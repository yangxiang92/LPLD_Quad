###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     21/Mar/2014  14:38:59 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\modu #
#                    le\lights.c                                              #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\modu #
#                    le\lights.c -D LPLD_K60 -lCN                             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\BOOT\Li #
#                    st\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar #
#                    \BOOT\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\BOOT\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\source\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\source\module\ -I                       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\source\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qua #
#                    d_V2\iar\..\source\lib\LPLD\HW\ -I                       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\LPLD\DEV\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD #
#                    _Quad_V2\iar\..\source\lib\uCOS-II\Ports\ -I             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\uCOS-II\Source\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V2\iar\..\source\lib\FatFs\ -I               #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpace\ #
#                    LPLD_Quad_V2\iar\..\source\lib\USB\common\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\source\lib\USB\descriptor\ -I          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\USB\class\ -Ol -I "D:\Program Files\IAR           #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\BOOT\Li #
#                    st\lights.lst                                            #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\BOOT\Ob #
#                    j\lights.o                                               #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\module\lights.c
      1          /****************************************************************************** 
      2           *       lights.c ----- The code for led lights use          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  lights.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/3/21 9:45:25                                                       *
     10           ******************************************************************************/
     11          #include "lights.h"
     12          
     13          //                 LED:     0    1    2    3    4    5    6    7

   \                                 In section .data, align 4
     14          static GPIO_Type * led_port[LIGHTS_AMOUNT]  = {PTC, PTC, PTC, PTC, PTC, PTC, PTC, PTC};
   \                     led_port:
   \   00000000   0x400FF080         DC32 400FF080H, 400FF080H, 400FF080H, 400FF080H, 400FF080H, 400FF080H
   \              0x400FF080   
   \              0x400FF080   
   \              0x400FF080   
   \              0x400FF080   
   \              0x400FF080   
   \   00000018   0x400FF080         DC32 400FF080H, 400FF080H
   \              0x400FF080   

   \                                 In section .data, align 4
     15          static uint32 led_port_bit[LIGHTS_AMOUNT]   = {12,  13,  14,  15,  16,  17,  18,  19};
   \                     led_port_bit:
   \   00000000   0x0000000C         DC32 12, 13, 14, 15, 16, 17, 18, 19
   \              0x0000000D   
   \              0x0000000E   
   \              0x0000000F   
   \              0x00000010   
   \              0x00000011   
   \              0x00000012   
   \              0x00000013   
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void light_init(void)
     18          {
   \                     light_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     19              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     20              GPIO_InitTypeDef light_init_struct;
     21          
     22              for(i = 0; i < LIGHTS_AMOUNT; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0xE019             B.N      ??light_init_0
     23              {
     24                  light_init_struct.GPIO_PTx = led_port[i];
   \                     ??light_init_1:
   \   0000000C   0x....             LDR.N    R0,??DataTable2
   \   0000000E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000012   0x9001             STR      R0,[SP, #+4]
     25                  light_init_struct.GPIO_Pins = (uint32)0x00000001 << (led_port_bit[i]);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x....             LDR.N    R1,??DataTable2_1
   \   00000018   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000001C   0x4088             LSLS     R0,R0,R1
   \   0000001E   0x9002             STR      R0,[SP, #+8]
     26                  light_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xF88D 0x0010      STRB     R0,[SP, #+16]
     27                  light_init_struct.GPIO_Output = OUTPUT_H;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xF88D 0x0011      STRB     R0,[SP, #+17]
     28                  LPLD_GPIO_Init(light_init_struct);
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0xB084             SUB      SP,SP,#+16
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x2214             MOVS     R2,#+20
   \   00000034   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000038   0xBC0F             POP      {R0-R3}
   \   0000003A   0x.... 0x....      BL       LPLD_GPIO_Init
     29              }
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
   \                     ??light_init_0:
   \   00000040   0x2C08             CMP      R4,#+8
   \   00000042   0xDBE3             BLT.N    ??light_init_1
     30          }
   \   00000044   0xB006             ADD      SP,SP,#+24
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void turn_lights_on(uint8 mask)
     33          {
   \                     turn_lights_on:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     34              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     35          
     36              for(i = 0; i < LIGHTS_AMOUNT; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0xE008             B.N      ??turn_lights_on_0
     37              {
     38                  if(mask & 0x01)
   \                     ??turn_lights_on_1:
   \   0000000C   0x07E0             LSLS     R0,R4,#+31
   \   0000000E   0xD503             BPL.N    ??turn_lights_on_2
     39                  {
     40                      set_light_1_on_off(i, 1);
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       set_light_1_on_off
     41                  }
     42                  mask = mask >> 1;
   \                     ??turn_lights_on_2:
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x0864             LSRS     R4,R4,#+1
     43              }
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??turn_lights_on_0:
   \   0000001E   0x2D08             CMP      R5,#+8
   \   00000020   0xDBF4             BLT.N    ??turn_lights_on_1
     44          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void turn_lights_off(uint8 mask)
     47          {
   \                     turn_lights_off:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     48              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     49          
     50              for(i = 0; i < LIGHTS_AMOUNT; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0xE008             B.N      ??turn_lights_off_0
     51              {
     52                  if(mask & 0x01)
   \                     ??turn_lights_off_1:
   \   0000000C   0x07E0             LSLS     R0,R4,#+31
   \   0000000E   0xD503             BPL.N    ??turn_lights_off_2
     53                  {
     54                      set_light_1_on_off(i, 0);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0x.... 0x....      BL       set_light_1_on_off
     55                  }
     56                  mask = mask >> 1;
   \                     ??turn_lights_off_2:
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x0864             LSRS     R4,R4,#+1
     57              }
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??turn_lights_off_0:
   \   0000001E   0x2D08             CMP      R5,#+8
   \   00000020   0xDBF4             BLT.N    ??turn_lights_off_1
     58          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void set_lights_on_off(uint8 mask)
     61          {
   \                     set_lights_on_off:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     62              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     63          
     64              for(i = 0; i < LIGHTS_AMOUNT; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0xE006             B.N      ??set_lights_on_off_0
     65              {
     66                  if(mask & 0x01)
     67                  {
     68                      set_light_1_on_off(i, 1);
     69                  }
     70                  else
     71                  {
     72                      set_light_1_on_off(i, 0);
   \                     ??set_lights_on_off_1:
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0x.... 0x....      BL       set_light_1_on_off
     73                  }
     74                  mask = mask >> 1;
   \                     ??set_lights_on_off_2:
   \   00000014   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000016   0x0864             LSRS     R4,R4,#+1
   \   00000018   0x1C6D             ADDS     R5,R5,#+1
   \                     ??set_lights_on_off_0:
   \   0000001A   0x2D08             CMP      R5,#+8
   \   0000001C   0xDA06             BGE.N    ??set_lights_on_off_3
   \   0000001E   0x07E0             LSLS     R0,R4,#+31
   \   00000020   0xD5F4             BPL.N    ??set_lights_on_off_1
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0x.... 0x....      BL       set_light_1_on_off
   \   0000002A   0xE7F3             B.N      ??set_lights_on_off_2
     75              }
     76          }
   \                     ??set_lights_on_off_3:
   \   0000002C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          void set_light_1_on_off(int led_num, uint8 state)
     79          {
   \                     set_light_1_on_off:
   \   00000000   0xB580             PUSH     {R7,LR}
     80              if((led_num >= 0) && (led_num < LIGHTS_AMOUNT))
   \   00000002   0x1E02             SUBS     R2,R0,#+0
   \   00000004   0x2A08             CMP      R2,#+8
   \   00000006   0xD20E             BCS.N    ??set_light_1_on_off_0
     81              {
     82                  LPLD_GPIO_Output_b(led_port[led_num], led_port_bit[led_num], (uint8)(!state));
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD101             BNE.N    ??set_light_1_on_off_1
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0xE000             B.N      ??set_light_1_on_off_2
   \                     ??set_light_1_on_off_1:
   \   00000012   0x2200             MOVS     R2,#+0
   \                     ??set_light_1_on_off_2:
   \   00000014   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000016   0x....             LDR.N    R1,??DataTable2_1
   \   00000018   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000001C   0x....             LDR.N    R3,??DataTable2
   \   0000001E   0xF853 0x0020      LDR      R0,[R3, R0, LSL #+2]
   \   00000022   0x.... 0x....      BL       LPLD_GPIO_Output_b
     83              }
     84          }
   \                     ??set_light_1_on_off_0:
   \   00000026   0xBD01             POP      {R0,PC}          ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void toggle_light_1(int led_num)
     87          {
   \                     toggle_light_1:
   \   00000000   0xB580             PUSH     {R7,LR}
     88              if((led_num >= 0) && (led_num < LIGHTS_AMOUNT))
   \   00000002   0x1E01             SUBS     R1,R0,#+0
   \   00000004   0x2908             CMP      R1,#+8
   \   00000006   0xD208             BCS.N    ??toggle_light_1_0
     89              {
     90                  LPLD_GPIO_Toggle_b(led_port[led_num], (uint8)led_port_bit[led_num]);
   \   00000008   0x....             LDR.N    R1,??DataTable2_1
   \   0000000A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x....             LDR.N    R2,??DataTable2
   \   00000012   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000016   0x.... 0x....      BL       LPLD_GPIO_Toggle_b
     91              }
     92          }
   \                     ??toggle_light_1_0:
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          void toggle_lights(uint8 mask)
     95          {
   \                     toggle_lights:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     96              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     97          
     98              for(i = 0; i < LIGHTS_AMOUNT; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \   0000000A   0xE007             B.N      ??toggle_lights_0
     99              {
    100                  if(mask & 0x01)
   \                     ??toggle_lights_1:
   \   0000000C   0x07E0             LSLS     R0,R4,#+31
   \   0000000E   0xD502             BPL.N    ??toggle_lights_2
    101                  {
    102                      toggle_light_1(i);
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       toggle_light_1
    103                  }
    104                  mask = mask >> 1;
   \                     ??toggle_lights_2:
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x0864             LSRS     R4,R4,#+1
    105              }    
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??toggle_lights_0:
   \   0000001C   0x2D08             CMP      R5,#+8
   \   0000001E   0xDBF5             BLT.N    ??toggle_lights_1
    106          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     led_port

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     led_port_bit

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       48  light_init
             32 -> LPLD_GPIO_Init
             48 -> __aeabi_memcpy4
        8  set_light_1_on_off
              8 -> LPLD_GPIO_Output_b
       16  set_lights_on_off
             16 -> set_light_1_on_off
        8  toggle_light_1
              8 -> LPLD_GPIO_Toggle_b
       16  toggle_lights
             16 -> toggle_light_1
       16  turn_lights_off
             16 -> set_light_1_on_off
       16  turn_lights_on
             16 -> set_light_1_on_off


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      32  led_port
      32  led_port_bit
      72  light_init
      40  set_light_1_on_off
      46  set_lights_on_off
      28  toggle_light_1
      34  toggle_lights
      36  turn_lights_off
      36  turn_lights_on

 
  64 bytes in section .data
 300 bytes in section .text
 
 300 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: none
