###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     20/Mar/2014  08:44:47 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_SDRAM.c                                            #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_SDRAM.c -D LPLD_K60 -lCN                           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\ #
#                    RAM\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V #
#                    2\iar\RAM\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ia #
#                    r\..\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\lib\LPLD\DEV\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V2\iar\..\lib\uCOS-II\Source\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\..\lib\USB\common\ -I                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\lib\USB\descriptor\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\class\ -Ol -I "D:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\DEV_SDRAM.lst                                          #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Obj #
#                    \DEV_SDRAM.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DEV\DEV_SDRAM.c
      1          /*
      2          * @file DEV_SDRAM.c
      3          * @version 0.1[By LPLD]
      4          * @date 2013-09-24
      5          * @brief SDRAM设备驱动程序
      6          *
      7          * 更改建议:可根据实际硬件修改
      8          *
      9          * 版权所有:北京拉普兰德电子技术有限公司
     10          * http://www.lpld.cn
     11          * mail:support@lpld.cn
     12          *
     13          * @par
     14          * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15          * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16          * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17          * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18          * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19          * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20          * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21          */
     22          #include "DEV_SDRAM.h"
     23          
     24          //该结构体构成分配内存的最小单元
     25          //同样构成用于分配和释放内存空间函数的链表结构
     26          typedef struct LPLD_ALLOC_HDR
     27          {
     28            struct
     29            {
     30              struct LPLD_ALLOC_HDR *ptr;
     31              unsigned int size;
     32            } s;
     33            unsigned int align;
     34            unsigned int pad;
     35          } LPLD_ALLOC_HDR;
     36          

   \                                 In section .bss, align 4
     37          static LPLD_ALLOC_HDR EX_base;
   \                     EX_base:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     38          static LPLD_ALLOC_HDR *EX_freep = NULL;
   \                     EX_freep:
   \   00000000                      DS8 4
     39          
     40          /*
     41           * LPLD_SDRAM_Init
     42           * 初始化SDRAM所需的FlexBus
     43           * 
     44           * 说明:
     45           *    本初始化函数用来配置FlexBus与SDRAM的连接
     46           *    配置为8位端口大小
     47           *    地址与数据线复用
     48           *    地址线为FB_AD[19:0]
     49           *    数据线为FB_AD[31:24]
     50           *    CS:FB_CS1
     51           *    RW:FB_FB_RW
     52           *    RD:FB_OE 
     53           */

   \                                 In section .text, align 2, keep-with-next
     54          void LPLD_SDRAM_Init()
     55          {
   \                     LPLD_SDRAM_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     56            FB_InitTypeDef fb_init;
     57            fb_init.FB_Fbx = FB1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xF88D 0x0004      STRB     R0,[SP, #+4]
     58            fb_init.FB_ChipSelAddress = SDRAM_ADDRESS;
   \   0000000A   0xF05F 0x40E0      MOVS     R0,#+1879048192
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     59            fb_init.FB_AutoAckEnable = TRUE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0012      STRB     R0,[SP, #+18]
     60            fb_init.FB_IsRightJustied = FALSE;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0011      STRB     R0,[SP, #+17]
     61            fb_init.FB_WateStates = 0x02;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xF88D 0x0013      STRB     R0,[SP, #+19]
     62            fb_init.FB_PortSize = FB_SIZE_8BIT;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xF88D 0x0010      STRB     R0,[SP, #+16]
     63            fb_init.FB_AddressSpace = FB_SPACE_KB(SDRAM_SIZE); 
   \   00000028   0xF45F 0x2080      MOVS     R0,#+262144
   \   0000002C   0x9003             STR      R0,[SP, #+12]
     64            fb_init.FB_ReadAddrHold = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF88D 0x0014      STRB     R0,[SP, #+20]
     65            fb_init.FB_WriteAddrHold = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0015      STRB     R0,[SP, #+21]
     66            LPLD_FlexBus_Init(fb_init); 
   \   0000003A   0xA901             ADD      R1,SP,#+4
   \   0000003C   0xB084             SUB      SP,SP,#+16
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x2214             MOVS     R2,#+20
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000046   0xBC0F             POP      {R0-R3}
   \   00000048   0x.... 0x....      BL       LPLD_FlexBus_Init
     67          }
   \   0000004C   0xB007             ADD      SP,SP,#+28
   \   0000004E   0xBD00             POP      {PC}             ;; return
     68          
     69          /*
     70           * LPLD_SDRAM_Free
     71           * 释放SDRAM中的空间
     72           * 
     73           * 参数：
     74           *    *ap--空间首地址指针
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          void LPLD_SDRAM_Free(void *ap)
     77          {
     78            LPLD_ALLOC_HDR *bp, *p;
     79            
     80            bp = (LPLD_ALLOC_HDR *)ap - 1;  
   \                     LPLD_SDRAM_Free:
   \   00000000   0x3810             SUBS     R0,R0,#+16
     81            for (p = EX_freep; !((bp > p) && (bp < p->s.ptr)) ; p = p->s.ptr)
   \   00000002   0x....             LDR.N    R1,??DataTable1
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xE000             B.N      ??LPLD_SDRAM_Free_0
   \                     ??LPLD_SDRAM_Free_1:
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \                     ??LPLD_SDRAM_Free_0:
   \   0000000A   0x4281             CMP      R1,R0
   \   0000000C   0xD202             BCS.N    ??LPLD_SDRAM_Free_2
   \   0000000E   0x680A             LDR      R2,[R1, #+0]
   \   00000010   0x4290             CMP      R0,R2
   \   00000012   0xD307             BCC.N    ??LPLD_SDRAM_Free_3
     82            {
     83              if ((p >= p->s.ptr) && ((bp > p) || (bp < p->s.ptr)))
   \                     ??LPLD_SDRAM_Free_2:
   \   00000014   0x680A             LDR      R2,[R1, #+0]
   \   00000016   0x4291             CMP      R1,R2
   \   00000018   0xD3F6             BCC.N    ??LPLD_SDRAM_Free_1
   \   0000001A   0x4281             CMP      R1,R0
   \   0000001C   0xD302             BCC.N    ??LPLD_SDRAM_Free_4
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x4290             CMP      R0,R2
   \   00000022   0xD2F1             BCS.N    ??LPLD_SDRAM_Free_1
     84              {
     85                break; 
     86              }
     87            }
     88            
     89            if ((bp + bp->s.size) == p->s.ptr)
   \                     ??LPLD_SDRAM_Free_4:
   \                     ??LPLD_SDRAM_Free_3:
   \   00000024   0x6842             LDR      R2,[R0, #+4]
   \   00000026   0xEB10 0x1202      ADDS     R2,R0,R2, LSL #+4
   \   0000002A   0x680B             LDR      R3,[R1, #+0]
   \   0000002C   0x429A             CMP      R2,R3
   \   0000002E   0xD108             BNE.N    ??LPLD_SDRAM_Free_5
     90            {
     91              bp->s.size += p->s.ptr->s.size;
   \   00000030   0x6842             LDR      R2,[R0, #+4]
   \   00000032   0x680B             LDR      R3,[R1, #+0]
   \   00000034   0x685B             LDR      R3,[R3, #+4]
   \   00000036   0x189A             ADDS     R2,R3,R2
   \   00000038   0x6042             STR      R2,[R0, #+4]
     92              bp->s.ptr = p->s.ptr->s.ptr;
   \   0000003A   0x680A             LDR      R2,[R1, #+0]
   \   0000003C   0x6812             LDR      R2,[R2, #+0]
   \   0000003E   0x6002             STR      R2,[R0, #+0]
   \   00000040   0xE001             B.N      ??LPLD_SDRAM_Free_6
     93            }
     94            else
     95            {
     96              bp->s.ptr = p->s.ptr;
   \                     ??LPLD_SDRAM_Free_5:
   \   00000042   0x680A             LDR      R2,[R1, #+0]
   \   00000044   0x6002             STR      R2,[R0, #+0]
     97            }
     98            
     99            if ((p + p->s.size) == bp)
   \                     ??LPLD_SDRAM_Free_6:
   \   00000046   0x684A             LDR      R2,[R1, #+4]
   \   00000048   0xEB11 0x1202      ADDS     R2,R1,R2, LSL #+4
   \   0000004C   0x4282             CMP      R2,R0
   \   0000004E   0xD106             BNE.N    ??LPLD_SDRAM_Free_7
    100            {
    101              p->s.size += bp->s.size;
   \   00000050   0x684A             LDR      R2,[R1, #+4]
   \   00000052   0x6843             LDR      R3,[R0, #+4]
   \   00000054   0x189A             ADDS     R2,R3,R2
   \   00000056   0x604A             STR      R2,[R1, #+4]
    102              p->s.ptr = bp->s.ptr;
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x6008             STR      R0,[R1, #+0]
   \   0000005C   0xE000             B.N      ??LPLD_SDRAM_Free_8
    103            }
    104            else
    105            {
    106              p->s.ptr = bp;
   \                     ??LPLD_SDRAM_Free_7:
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    107            }
    108            
    109            EX_freep = p;
   \                     ??LPLD_SDRAM_Free_8:
   \   00000060   0x....             LDR.N    R0,??DataTable1
   \   00000062   0x6001             STR      R1,[R0, #+0]
    110          }
   \   00000064   0x4770             BX       LR               ;; return
    111          
    112          /*
    113           * LPLD_SDRAM_Malloc
    114           * 动态分配SDRAM中的空间
    115           * 
    116           * 参数：
    117           *    nbytes--数据长度
    118           *
    119           * 返回值：
    120           *    空间地址指针
    121           */

   \                                 In section .text, align 2, keep-with-next
    122          void *LPLD_SDRAM_Malloc(unsigned nbytes)
    123          {
    124            LPLD_ALLOC_HDR *p, *prevp;
    125            unsigned nunits;   
    126            char* __HEAP_START;
    127            char* __HEAP_END;
    128            
    129            __HEAP_START = (char*)(SDRAM_ADDRESS);
   \                     LPLD_SDRAM_Malloc:
   \   00000000   0xF05F 0x41E0      MOVS     R1,#+1879048192
    130            __HEAP_END = (char*)(SDRAM_ADDRESS+SDRAM_SIZE*1024);
   \   00000004   0x....             LDR.N    R3,??DataTable1_1  ;; 0x70040000
    131            
    132            nunits = ((nbytes+sizeof(LPLD_ALLOC_HDR)-1) / sizeof(LPLD_ALLOC_HDR)) + 1;
   \   00000006   0x300F             ADDS     R0,R0,#+15
   \   00000008   0x0900             LSRS     R0,R0,#+4
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
    133            
    134            if ((prevp = EX_freep) == NULL)
   \   0000000C   0x....             LDR.N    R2,??DataTable1
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD10C             BNE.N    ??LPLD_SDRAM_Malloc_0
    135            {
    136              p = (LPLD_ALLOC_HDR *)__HEAP_START;
    137              p->s.size = ( ((uint32)__HEAP_END - (uint32)__HEAP_START)
    138                           / sizeof(LPLD_ALLOC_HDR) );
   \   00000014   0x1A5A             SUBS     R2,R3,R1
   \   00000016   0x0912             LSRS     R2,R2,#+4
   \   00000018   0x604A             STR      R2,[R1, #+4]
    139              p->s.ptr = &EX_base;
   \   0000001A   0x....             LDR.N    R2,??DataTable1_2
   \   0000001C   0x600A             STR      R2,[R1, #+0]
    140              EX_base.s.ptr = p;
   \   0000001E   0x....             LDR.N    R2,??DataTable1_2
   \   00000020   0x6011             STR      R1,[R2, #+0]
    141              EX_base.s.size = 0;
   \   00000022   0x....             LDR.N    R1,??DataTable1_2
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x604A             STR      R2,[R1, #+4]
    142              prevp = EX_freep = &EX_base;
   \   00000028   0x....             LDR.N    R2,??DataTable1_2
   \   0000002A   0x....             LDR.N    R1,??DataTable1
   \   0000002C   0x600A             STR      R2,[R1, #+0]
    143            }
    144            
    145            for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr)
   \                     ??LPLD_SDRAM_Malloc_0:
   \   0000002E   0x6811             LDR      R1,[R2, #+0]
   \   00000030   0xE001             B.N      ??LPLD_SDRAM_Malloc_1
   \                     ??LPLD_SDRAM_Malloc_2:
   \   00000032   0x000A             MOVS     R2,R1
   \   00000034   0x6809             LDR      R1,[R1, #+0]
    146            {
    147              if (p->s.size >= nunits)
   \                     ??LPLD_SDRAM_Malloc_1:
   \   00000036   0x684B             LDR      R3,[R1, #+4]
   \   00000038   0x4283             CMP      R3,R0
   \   0000003A   0xD311             BCC.N    ??LPLD_SDRAM_Malloc_3
    148              {
    149                if (p->s.size == nunits)
   \   0000003C   0x684B             LDR      R3,[R1, #+4]
   \   0000003E   0x4283             CMP      R3,R0
   \   00000040   0xD102             BNE.N    ??LPLD_SDRAM_Malloc_4
    150                {
    151                  prevp->s.ptr = p->s.ptr;
   \   00000042   0x6808             LDR      R0,[R1, #+0]
   \   00000044   0x6010             STR      R0,[R2, #+0]
   \   00000046   0xE006             B.N      ??LPLD_SDRAM_Malloc_5
    152                }
    153                else
    154                {
    155                  p->s.size -= nunits;
   \                     ??LPLD_SDRAM_Malloc_4:
   \   00000048   0x684B             LDR      R3,[R1, #+4]
   \   0000004A   0x1A1B             SUBS     R3,R3,R0
   \   0000004C   0x604B             STR      R3,[R1, #+4]
    156                  p += p->s.size;
   \   0000004E   0x684B             LDR      R3,[R1, #+4]
   \   00000050   0xEB11 0x1103      ADDS     R1,R1,R3, LSL #+4
    157                  p->s.size = nunits;
   \   00000054   0x6048             STR      R0,[R1, #+4]
    158                }
    159                EX_freep = prevp;
   \                     ??LPLD_SDRAM_Malloc_5:
   \   00000056   0x....             LDR.N    R0,??DataTable1
   \   00000058   0x6002             STR      R2,[R0, #+0]
    160                return (void *)(p + 1);
   \   0000005A   0xF111 0x0010      ADDS     R0,R1,#+16
   \   0000005E   0xE004             B.N      ??LPLD_SDRAM_Malloc_6
    161              }
    162              
    163              if (p == EX_freep)
   \                     ??LPLD_SDRAM_Malloc_3:
   \   00000060   0x....             LDR.N    R2,??DataTable1
   \   00000062   0x6812             LDR      R2,[R2, #+0]
   \   00000064   0x4291             CMP      R1,R2
   \   00000066   0xD1E4             BNE.N    ??LPLD_SDRAM_Malloc_2
    164                return NULL;
   \   00000068   0x2000             MOVS     R0,#+0
   \                     ??LPLD_SDRAM_Malloc_6:
   \   0000006A   0x4770             BX       LR               ;; return
    165            }
    166          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     EX_freep

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x70040000         DC32     0x70040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     EX_base
    167          
    168          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LPLD_SDRAM_Free
       48  LPLD_SDRAM_Init
             32 -> LPLD_FlexBus_Init
             48 -> __aeabi_memcpy4
        0  LPLD_SDRAM_Malloc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      16  EX_base
       4  EX_freep
     102  LPLD_SDRAM_Free
      80  LPLD_SDRAM_Init
     108  LPLD_SDRAM_Malloc

 
  20 bytes in section .bss
 302 bytes in section .text
 
 302 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
