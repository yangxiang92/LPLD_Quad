###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     20/Mar/2014  08:44:48 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_Nrf24L01.c                                         #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_Nrf24L01.c -D LPLD_K60 -lCN                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\ #
#                    RAM\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V #
#                    2\iar\RAM\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ia #
#                    r\..\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\lib\LPLD\DEV\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V2\iar\..\lib\uCOS-II\Source\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\..\lib\USB\common\ -I                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\lib\USB\descriptor\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\class\ -Ol -I "D:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\DEV_Nrf24L01.lst                                       #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Obj #
#                    \DEV_Nrf24L01.o                                          #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DEV\DEV_Nrf24L01.c
      1          /**
      2           * @file DEV_Nrf24L01.c
      3           * @version 1.0[By LPLD]
      4           * @date 2013-09-24
      5           * @brief Nrf24L01设备驱动程序
      6           *
      7           * 更改建议:可根据实际硬件修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "DEV_Nrf24L01.h"
     23          #include "HW_GPIO.h"
     24          
     25          static uint8 LPLD_Nrf24L01_WriteBuf(uint8 reg,uint8 *pbuf ,uint8 len);
     26          static uint8 LPLD_Nrf24L01_ReadBuf(uint8 reg,uint8 *pbuf,uint8 len);
     27          static uint8 LPLD_Nrf24L01_WriteReg(uint8 reg,uint8 value);
     28          static uint8 LPLD_Nrf24L01_ReadReg(uint8 reg);
     29          static uint8 LPLD_Nrf24L01_CheckID(void);
     30          static void Nrf24L01_DelayUs(uint16 t);
     31          

   \                                 In section .data, align 4
     32          uint8 TX_ADDRESS[NRF24L01_TX_ADR_LEN]={0x34,0x43,0x10,0x10,0x02}; //发送地址
   \                     TX_ADDRESS:
   \   00000000   0x34 0x43          DC8 52, 67, 16, 16, 2, 0, 0, 0
   \              0x10 0x10    
   \              0x02 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
     33          uint8 RX_ADDRESS[NRF24L01_RX_ADR_LEN]={0x34,0x43,0x10,0x10,0x02}; //接收地址(本机地址,仅用于接收模式)
   \                     RX_ADDRESS:
   \   00000000   0x34 0x43          DC8 52, 67, 16, 16, 2, 0, 0, 0
   \              0x10 0x10    
   \              0x02 0x00    
   \              0x00 0x00    
     34          //NRF24L01复位之后用于检测
     35          // NRF24L01_RX_ADDR_P0的复位值是否为0xE7E7E7E7
     36          // NRF24L01_RX_ADDR_P1的复位值是否为0xC2C2C2C2
     37          // NRF24L01_TX_ADDR的复位值是否为0xE7E7E7E7

   \                                 In section .bss, align 4
     38          uint8 NRF24L01_RX_ADDR_P0_RESET_BUF[5];
   \                     NRF24L01_RX_ADDR_P0_RESET_BUF:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     39          uint8 NRF24L01_RX_ADDR_P1_RESET_BUF[5];
   \                     NRF24L01_RX_ADDR_P1_RESET_BUF:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     40          uint8 NRF24L01_TX_ADDR_RESET_BUF[5];
   \                     NRF24L01_TX_ADDR_RESET_BUF:
   \   00000000                      DS8 8
     41          

   \                                 In section .bss, align 4
     42          SPI_InitTypeDef spi_init_param;
   \                     spi_init_param:
   \   00000000                      DS8 52

   \                                 In section .bss, align 4
     43          GPIO_InitTypeDef ce_io_param;
   \                     ce_io_param:
   \   00000000                      DS8 20
     44          /*
     45           * LPLD_Nrf24L01_Init
     46           * Nrf24L01初始化函数，配置SPI模块，选择Nrf24L01 CE引脚
     47           * 
     48           * 参数:
     49           *    无
     50           *
     51           * 输出:
     52           *    1 配置成功
     53           */

   \                                 In section .text, align 2, keep-with-next
     54          uint8 LPLD_Nrf24L01_Init(void)
     55          {
   \                     LPLD_Nrf24L01_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     56            //配置SPI
     57            spi_init_param.SPI_SPIx = NRF24L01_SPIX;
   \   00000004   0x....             LDR.N    R0,??DataTable8
   \   00000006   0x....             LDR.N    R1,??DataTable8_1  ;; 0x4002c000
   \   00000008   0x6001             STR      R1,[R0, #+0]
     58            spi_init_param.SPI_SckDivider = SPI_SCK_DIV_32;//1.56Mhz
   \   0000000A   0x....             LDR.N    R0,??DataTable8
   \   0000000C   0x2105             MOVS     R1,#+5
   \   0000000E   0x7141             STRB     R1,[R0, #+5]
     59            spi_init_param.SPI_Pcs0Pin = NRF24L01_PCS0;
   \   00000010   0x....             LDR.N    R0,??DataTable8
   \   00000012   0x210E             MOVS     R1,#+14
   \   00000014   0x7401             STRB     R1,[R0, #+16]
     60            spi_init_param.SPI_SckPin  = NRF24L01_SCK;
   \   00000016   0x....             LDR.N    R0,??DataTable8
   \   00000018   0x210F             MOVS     R1,#+15
   \   0000001A   0x7581             STRB     R1,[R0, #+22]
     61            spi_init_param.SPI_MosiPin = NRF24L01_MOSI;
   \   0000001C   0x....             LDR.N    R0,??DataTable8
   \   0000001E   0x2110             MOVS     R1,#+16
   \   00000020   0x75C1             STRB     R1,[R0, #+23]
     62            spi_init_param.SPI_MisoPin = NRF24L01_MISO;
   \   00000022   0x....             LDR.N    R0,??DataTable8
   \   00000024   0x2111             MOVS     R1,#+17
   \   00000026   0x7601             STRB     R1,[R0, #+24]
     63            
     64            spi_init_param.SPI_TxCompleteIntIsr = NULL;
   \   00000028   0x....             LDR.N    R0,??DataTable8
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x61C1             STR      R1,[R0, #+28]
     65            spi_init_param.SPI_QueueEndIntIsr = NULL;
   \   0000002E   0x....             LDR.N    R0,??DataTable8
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x6201             STR      R1,[R0, #+32]
     66            spi_init_param.SPI_TxFIFO_FillIntIsr = NULL;
   \   00000034   0x....             LDR.N    R0,??DataTable8
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x62C1             STR      R1,[R0, #+44]
     67            spi_init_param.SPI_TxFIFO_UnderflowIntIsr = NULL;
   \   0000003A   0x....             LDR.N    R0,??DataTable8
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x6241             STR      R1,[R0, #+36]
     68            spi_init_param.SPI_RxFIFO_DrainIntIsr = NULL;
   \   00000040   0x....             LDR.N    R0,??DataTable8
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x6301             STR      R1,[R0, #+48]
     69            spi_init_param.SPI_RxFIFO_OverflowIntIsr = NULL;
   \   00000046   0x....             LDR.N    R0,??DataTable8
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x6281             STR      R1,[R0, #+40]
     70            //配置CE
     71            ce_io_param.GPIO_PTx  = NRF24L01_CE_PTX;
   \   0000004C   0x....             LDR.N    R0,??DataTable8_2
   \   0000004E   0x....             LDR.N    R1,??DataTable8_3  ;; 0x400ff040
   \   00000050   0x6001             STR      R1,[R0, #+0]
     72            ce_io_param.GPIO_Pins = NRF24L01_CE_IOX;
   \   00000052   0x....             LDR.N    R0,??DataTable8_2
   \   00000054   0x2101             MOVS     R1,#+1
   \   00000056   0x6041             STR      R1,[R0, #+4]
     73            ce_io_param.GPIO_Dir  = DIR_OUTPUT;
   \   00000058   0x....             LDR.N    R0,??DataTable8_2
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x7301             STRB     R1,[R0, #+12]
     74            ce_io_param.GPIO_Output = OUTPUT_L;
   \   0000005E   0x....             LDR.N    R0,??DataTable8_2
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x7341             STRB     R1,[R0, #+13]
     75          
     76            LPLD_GPIO_Init(ce_io_param);
   \   00000064   0x....             LDR.N    R1,??DataTable8_2
   \   00000066   0xB084             SUB      SP,SP,#+16
   \   00000068   0x4668             MOV      R0,SP
   \   0000006A   0x2214             MOVS     R2,#+20
   \   0000006C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000070   0xBC0F             POP      {R0-R3}
   \   00000072   0x.... 0x....      BL       LPLD_GPIO_Init
     77            LPLD_SPI_Init(spi_init_param);
   \   00000076   0x....             LDR.N    R1,??DataTable8
   \   00000078   0xB084             SUB      SP,SP,#+16
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x2234             MOVS     R2,#+52
   \   0000007E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000082   0xBC0F             POP      {R0-R3}
   \   00000084   0x.... 0x....      BL       LPLD_SPI_Init
     78            
     79            return 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xB009             ADD      SP,SP,#+36
   \   0000008C   0xBD00             POP      {PC}             ;; return
     80          }
     81          
     82          /*
     83           * LPLD_Nrf24L01_TxModeInit
     84           * Nrf24L01发送模式初始化
     85           * 
     86           * 参数:
     87           *    无
     88           *
     89           * 输出:
     90           *    Nrf24L01寄存器返回状态
     91           */

   \                                 In section .text, align 2, keep-with-next
     92          uint8 LPLD_Nrf24L01_TxModeInit(void)
     93          {
   \                     LPLD_Nrf24L01_TxModeInit:
   \   00000000   0xB510             PUSH     {R4,LR}
     94            uint8 Temp;
     95            
     96            NRF24L01_CE_L;  
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400ff040
   \   00000008   0x.... 0x....      BL       LPLD_GPIO_Output_b
     97            // 芯片上电复位后
     98            // 分别读取NRF24L01_RX_ADDR_P0、NRF24L01_RX_ADDR_P1、NRF24L01_TX_ADDR的值
     99            // 查看以下数据
    100            // NRF24L01_RX_ADDR_P0的复位值是否为0xE7E7E7E7
    101            // NRF24L01_RX_ADDR_P1的复位值是否为0xC2C2C2C2
    102            // NRF24L01_TX_ADDR的复位值是否为0xE7E7E7E7
    103            // 如果正确证明SPI读写没有问题，反之亦然
    104            LPLD_Nrf24L01_CheckID();
   \   0000000C   0x.... 0x....      BL       LPLD_Nrf24L01_CheckID
    105              
    106            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_FLUSE_TX,0xFF);
   \   00000010   0x21FF             MOVS     R1,#+255
   \   00000012   0x20E1             MOVS     R0,#+225
   \   00000014   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000018   0x0004             MOVS     R4,R0
    107            
    108            Temp=LPLD_Nrf24L01_WriteBuf(NRF24L01_WRITE_REG + NRF24L01_TX_ADDR,TX_ADDRESS,NRF24L01_TX_ADR_LEN);
   \   0000001A   0x2205             MOVS     R2,#+5
   \   0000001C   0x....             LDR.N    R1,??DataTable8_4
   \   0000001E   0x2030             MOVS     R0,#+48
   \   00000020   0x.... 0x....      BL       LPLD_Nrf24L01_WriteBuf
   \   00000024   0x0004             MOVS     R4,R0
    109            
    110            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_EN_AA, 0x01);       //频道0自动,ACK应答允许
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2021             MOVS     R0,#+33
   \   0000002A   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   0000002E   0x0004             MOVS     R4,R0
    111            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_EN_RXADDR, 0x01);   //允许接收地址只有频道0      
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2022             MOVS     R0,#+34
   \   00000034   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000038   0x0004             MOVS     R4,R0
    112            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_SETUP_RETR, 0x1a);  //设置自动重发时间和次数：500us + 86us, 10 retrans...
   \   0000003A   0x211A             MOVS     R1,#+26
   \   0000003C   0x2024             MOVS     R0,#+36
   \   0000003E   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000042   0x0004             MOVS     R4,R0
    113            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_RF_CH, 40);         //设置信道工作为2.4GHZ，收发必须一致
   \   00000044   0x2128             MOVS     R1,#+40
   \   00000046   0x2025             MOVS     R0,#+37
   \   00000048   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   0000004C   0x0004             MOVS     R4,R0
    114            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_RF_SETUP, 0x0F);    //设置发射速率为1MHZ，发射功率为最大值0dB
   \   0000004E   0x210F             MOVS     R1,#+15
   \   00000050   0x2026             MOVS     R0,#+38
   \   00000052   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000056   0x0004             MOVS     R4,R0
    115            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_CONFIG, 0x0E);      //使能CRC校验，使能TX，并且上电
   \   00000058   0x210E             MOVS     R1,#+14
   \   0000005A   0x2020             MOVS     R0,#+32
   \   0000005C   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000060   0x0004             MOVS     R4,R0
    116            
    117            NRF24L01_CE_H;
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400ff040
   \   00000068   0x.... 0x....      BL       LPLD_GPIO_Output_b
    118            
    119            Nrf24L01_DelayUs(2000);//等待Nrf24L01发送模式初始化完毕
   \   0000006C   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000070   0x.... 0x....      BL       Nrf24L01_DelayUs
    120            
    121            return Temp;
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0xBD10             POP      {R4,PC}          ;; return
    122          }
    123          
    124          /*
    125           * LPLD_Nrf24L01_RxModeInit
    126           * Nrf24L01接收模式初始化
    127           * 
    128           * 参数:
    129           *    无
    130           *
    131           * 输出:
    132           *    Nrf24L01寄存器返回状态
    133           */

   \                                 In section .text, align 2, keep-with-next
    134          uint8 LPLD_Nrf24L01_RxModeInit(void) 
    135          { 
   \                     LPLD_Nrf24L01_RxModeInit:
   \   00000000   0xB510             PUSH     {R4,LR}
    136            uint8 Temp;
    137            
    138            NRF24L01_CE_L; 
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400ff040
   \   00000008   0x.... 0x....      BL       LPLD_GPIO_Output_b
    139            // 芯片上电复位后
    140            // 分别读取NRF24L01_RX_ADDR_P0、NRF24L01_RX_ADDR_P1、NRF24L01_TX_ADDR的值
    141            // 查看以下数据
    142            // NRF24L01_RX_ADDR_P0的复位值是否为0xE7E7E7E7
    143            // NRF24L01_RX_ADDR_P1的复位值是否为0xC2C2C2C2
    144            // NRF24L01_TX_ADDR的复位值是否为0xE7E7E7E7
    145            // 如果正确证明SPI读写没有问题，反之亦然
    146            LPLD_Nrf24L01_CheckID();
   \   0000000C   0x.... 0x....      BL       LPLD_Nrf24L01_CheckID
    147           
    148            Temp=LPLD_Nrf24L01_WriteBuf(NRF24L01_WRITE_REG + NRF24L01_RX_ADDR_P0, RX_ADDRESS, NRF24L01_RX_ADR_LEN); 
   \   00000010   0x2205             MOVS     R2,#+5
   \   00000012   0x....             LDR.N    R1,??DataTable8_5
   \   00000014   0x202A             MOVS     R0,#+42
   \   00000016   0x.... 0x....      BL       LPLD_Nrf24L01_WriteBuf
   \   0000001A   0x0004             MOVS     R4,R0
    149            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_RX_PW_P0, NRF24L01_PLOAD_LEN);
   \   0000001C   0x2120             MOVS     R1,#+32
   \   0000001E   0x2031             MOVS     R0,#+49
   \   00000020   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000024   0x0004             MOVS     R4,R0
    150            
    151            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_EN_AA, 0x01);      //频道0自动,ACK应答允许      
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x2021             MOVS     R0,#+33
   \   0000002A   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   0000002E   0x0004             MOVS     R4,R0
    152            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_EN_RXADDR, 0x01);  //允许接收地址只有频道0 
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x2022             MOVS     R0,#+34
   \   00000034   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000038   0x0004             MOVS     R4,R0
    153            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans... 	
   \   0000003A   0x211A             MOVS     R1,#+26
   \   0000003C   0x2024             MOVS     R0,#+36
   \   0000003E   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000042   0x0004             MOVS     R4,R0
    154            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_RF_CH, 40);        //设置信道工作为2.4GHZ，收发必须一致  
   \   00000044   0x2128             MOVS     R1,#+40
   \   00000046   0x2025             MOVS     R0,#+37
   \   00000048   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   0000004C   0x0004             MOVS     R4,R0
    155            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_RF_SETUP, 0x0F);   //设置发射速率为1MHZ，发射功率为最大值0dB
   \   0000004E   0x210F             MOVS     R1,#+15
   \   00000050   0x2026             MOVS     R0,#+38
   \   00000052   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000056   0x0004             MOVS     R4,R0
    156            Temp=LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG + NRF24L01_CONFIG, 0x0F);     //使能CRC校验，使能RX，并且上电 
   \   00000058   0x210F             MOVS     R1,#+15
   \   0000005A   0x2020             MOVS     R0,#+32
   \   0000005C   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
   \   00000060   0x0004             MOVS     R4,R0
    157            
    158            NRF24L01_CE_H;  
   \   00000062   0x2201             MOVS     R2,#+1
   \   00000064   0x2101             MOVS     R1,#+1
   \   00000066   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400ff040
   \   00000068   0x.... 0x....      BL       LPLD_GPIO_Output_b
    159            
    160            Nrf24L01_DelayUs(2000);//等待Nrf24L01接收模式初始化完毕
   \   0000006C   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000070   0x.... 0x....      BL       Nrf24L01_DelayUs
    161            
    162            return Temp;
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000078   0xBD10             POP      {R4,PC}          ;; return
    163          }
    164          
    165          /*
    166           * LPLD_Nrf24L01_SendFrame
    167           * Nrf24L01发送数据帧
    168           * 
    169           * 参数:
    170           *    *data--指向用户发送数据缓冲区
    171           *    len--发送数据长度，以字节为单位
    172           *
    173           * 输出:
    174           *    1 发送成功
    175           *    0 发送失败
    176           */

   \                                 In section .text, align 2, keep-with-next
    177          uint8 LPLD_Nrf24L01_SendFrame(uint8 *data, uint8 len)
    178          {
   \                     LPLD_Nrf24L01_SendFrame:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    179            uint8 Status;
    180            
    181            NRF24L01_CE_L; //拉低CE，让Nrf24l01进入Standby-I模式
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400ff040
   \   0000000C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    182            LPLD_Nrf24L01_WriteBuf(NRF24L01_WRITE_REG + NRF24L01_RX_ADDR_P0, TX_ADDRESS, NRF24L01_RX_ADR_LEN); // 装载接收端地址
   \   00000010   0x2205             MOVS     R2,#+5
   \   00000012   0x....             LDR.N    R1,??DataTable8_4
   \   00000014   0x202A             MOVS     R0,#+42
   \   00000016   0x.... 0x....      BL       LPLD_Nrf24L01_WriteBuf
    183            LPLD_Nrf24L01_WriteBuf(NRF24L01_WR_TX_PLOAD, data, len); 			   // 装载数据	
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0x20A0             MOVS     R0,#+160
   \   00000022   0x.... 0x....      BL       LPLD_Nrf24L01_WriteBuf
    184            NRF24L01_CE_H;  
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x....             LDR.N    R0,??DataTable8_3  ;; 0x400ff040
   \   0000002C   0x.... 0x....      BL       LPLD_GPIO_Output_b
    185            
    186            while(1)
    187            {
    188              Status = LPLD_Nrf24L01_ReadReg(NRF24L01_STATUS);           //读取状态寄存器
   \                     ??LPLD_Nrf24L01_SendFrame_0:
   \   00000030   0x2007             MOVS     R0,#+7
   \   00000032   0x.... 0x....      BL       LPLD_Nrf24L01_ReadReg
   \   00000036   0x0004             MOVS     R4,R0
    189              LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG+NRF24L01_STATUS,Status);  //清空状态奇存器
   \   00000038   0x0021             MOVS     R1,R4
   \   0000003A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003C   0x2027             MOVS     R0,#+39
   \   0000003E   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
    190              if(Status & NRF24L01_STATUS_TX_DS)                //如果发送完毕，并接收到ACK，该标志位置位
   \   00000042   0x06A0             LSLS     R0,R4,#+26
   \   00000044   0xD505             BPL.N    ??LPLD_Nrf24L01_SendFrame_1
    191              {
    192                LPLD_Nrf24L01_WriteReg(NRF24L01_FLUSE_TX,0xFF); //清空发送缓冲区
   \   00000046   0x21FF             MOVS     R1,#+255
   \   00000048   0x20E1             MOVS     R0,#+225
   \   0000004A   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
    193                Status = 1;
   \   0000004E   0x2401             MOVS     R4,#+1
    194                break;
   \   00000050   0xE002             B.N      ??LPLD_Nrf24L01_SendFrame_2
    195              }
    196              else if(Status & NRF24L01_STATUS_MAX_RT)//如果达到多次发送的最大值，且期间没有接收到ACK
   \                     ??LPLD_Nrf24L01_SendFrame_1:
   \   00000052   0x06E0             LSLS     R0,R4,#+27
   \   00000054   0xD5EC             BPL.N    ??LPLD_Nrf24L01_SendFrame_0
    197              { 
    198                Status = 0;
   \   00000056   0x2400             MOVS     R4,#+0
    199                break;
    200              }
    201            }
    202            return Status;
   \                     ??LPLD_Nrf24L01_SendFrame_2:
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    203          }
    204          
    205          /*
    206           * LPLD_Nrf24L01_RecvFrame
    207           * Nrf24L01接收数据帧
    208           * 
    209           * 参数:
    210           *    *data--指向用户接收数据缓冲区
    211           *    len--发送数据长度，以字节为单位
    212           *
    213           * 输出:
    214           *    无
    215           */

   \                                 In section .text, align 2, keep-with-next
    216          void LPLD_Nrf24L01_RecvFrame(uint8 *data, uint8 len)
    217          {
   \                     LPLD_Nrf24L01_RecvFrame:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    218            uint8 Status;
    219            Status = LPLD_Nrf24L01_ReadReg(NRF24L01_STATUS);                  
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      BL       LPLD_Nrf24L01_ReadReg
   \   0000000C   0x0006             MOVS     R6,R0
    220            LPLD_Nrf24L01_ReadBuf(NRF24L01_RD_RX_PLOAD,data,len);
   \   0000000E   0x002A             MOVS     R2,R5
   \   00000010   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0x2061             MOVS     R0,#+97
   \   00000016   0x.... 0x....      BL       LPLD_Nrf24L01_ReadBuf
    221            LPLD_Nrf24L01_WriteReg(NRF24L01_WRITE_REG+NRF24L01_STATUS,Status);
   \   0000001A   0x0031             MOVS     R1,R6
   \   0000001C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   0x2027             MOVS     R0,#+39
   \   00000020   0x.... 0x....      BL       LPLD_Nrf24L01_WriteReg
    222            Status = 0;
   \   00000024   0x2600             MOVS     R6,#+0
    223          }
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
    224          
    225          /*
    226          * LPLD_Nrf24L01_CheckID   
    227          * 用于检查复位后的NRF24L01_RX_ADDR_P1、NRF24L01_RX_ADDR_P0、NRF24L01_TX_ADDR的值是否正确
    228          * 此值用于反映SPI总线是否配置正确
    229          *
    230          * 输出:
    231          *     Nrf24L01寄存器返回状态
    232          */

   \                                 In section .text, align 4, keep-with-next
    233          static uint8 LPLD_Nrf24L01_CheckID(void)
    234          {
   \                     LPLD_Nrf24L01_CheckID:
   \   00000000   0xB510             PUSH     {R4,LR}
    235            uint8 Temp;
    236            Temp=LPLD_Nrf24L01_ReadBuf(NRF24L01_READ_REG + NRF24L01_RX_ADDR_P1, NRF24L01_RX_ADDR_P1_RESET_BUF,5);
   \   00000002   0x2205             MOVS     R2,#+5
   \   00000004   0x....             LDR.N    R1,??DataTable8_6
   \   00000006   0x200B             MOVS     R0,#+11
   \   00000008   0x.... 0x....      BL       LPLD_Nrf24L01_ReadBuf
   \   0000000C   0x0004             MOVS     R4,R0
    237            asm("nop");
   \   0000000E   0xBF00             nop
    238            Temp=LPLD_Nrf24L01_ReadBuf(NRF24L01_READ_REG + NRF24L01_TX_ADDR, NRF24L01_TX_ADDR_RESET_BUF,5);
   \   00000010   0x2205             MOVS     R2,#+5
   \   00000012   0x....             LDR.N    R1,??DataTable8_7
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x.... 0x....      BL       LPLD_Nrf24L01_ReadBuf
   \   0000001A   0x0004             MOVS     R4,R0
    239            asm("nop");
   \   0000001C   0xBF00             nop
    240            Temp=LPLD_Nrf24L01_ReadBuf(NRF24L01_READ_REG + NRF24L01_RX_ADDR_P0, NRF24L01_RX_ADDR_P0_RESET_BUF,5);
   \   0000001E   0x2205             MOVS     R2,#+5
   \   00000020   0x....             LDR.N    R1,??DataTable8_8
   \   00000022   0x200A             MOVS     R0,#+10
   \   00000024   0x.... 0x....      BL       LPLD_Nrf24L01_ReadBuf
   \   00000028   0x0004             MOVS     R4,R0
    241            asm("nop"); 
   \   0000002A   0xBF00             nop
    242            return Temp;
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    243          }
    244          
    245          /*
    246          * LPLD_Nrf24L01_WriteBuf
    247          * 向nrf24l01的缓冲区中写入数据，并返回寄存器的状态
    248          * 参数:   
    249          *     reg--nrf24l01寄存器
    250          *     *pbuf--指向存储写入数据的首地址
    251          *     len--存取区的长度，单位字节
    252          * 返回值: 
    253          *     返回当前寄存器的状态
    254          */

   \                                 In section .text, align 2, keep-with-next
    255          static uint8 LPLD_Nrf24L01_WriteBuf(uint8 reg,uint8 *pbuf ,uint8 len)
    256          {
   \                     LPLD_Nrf24L01_WriteBuf:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
    257            uint8 status,i;
    258            
    259            status = LPLD_SPI_Master_WriteRead(NRF24L01_SPIX, reg, SPI_PCS0, SPI_PCS_ASSERTED); //帧发送完毕后PCS保持低电平
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000010   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000014   0x0006             MOVS     R6,R0
    260            
    261            for(i = 0;i < len;i++) 
   \   00000016   0x2700             MOVS     R7,#+0
   \   00000018   0xE007             B.N      ??LPLD_Nrf24L01_WriteBuf_0
    262            {       
    263              if( i == (len-1) )
    264              {
    265                LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,*pbuf++,SPI_PCS0,SPI_PCS_INACTIVE);//帧发送完毕后PCS变成高电平
    266              }
    267              else
    268              {
    269                LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,*pbuf++,SPI_PCS0,SPI_PCS_ASSERTED);
   \                     ??LPLD_Nrf24L01_WriteBuf_1:
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x7821             LDRB     R1,[R4, #+0]
   \   00000020   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000022   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000026   0x1C64             ADDS     R4,R4,#+1
    270              }
   \                     ??LPLD_Nrf24L01_WriteBuf_2:
   \   00000028   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LPLD_Nrf24L01_WriteBuf_0:
   \   0000002A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x42AF             CMP      R7,R5
   \   00000030   0xD20C             BCS.N    ??LPLD_Nrf24L01_WriteBuf_3
   \   00000032   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000034   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000036   0x1E68             SUBS     R0,R5,#+1
   \   00000038   0x4287             CMP      R7,R0
   \   0000003A   0xD1EE             BNE.N    ??LPLD_Nrf24L01_WriteBuf_1
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x7821             LDRB     R1,[R4, #+0]
   \   00000042   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000044   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000048   0x1C64             ADDS     R4,R4,#+1
   \   0000004A   0xE7ED             B.N      ??LPLD_Nrf24L01_WriteBuf_2
    271            }
    272            return status;
   \                     ??LPLD_Nrf24L01_WriteBuf_3:
   \   0000004C   0x0030             MOVS     R0,R6
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    273          } 
    274          
    275          /*
    276          * LPLD_Nrf24L01_ReadBuf
    277          * 向nrf24l01的缓冲区中读取数据，并返回寄存器的状态
    278          * 参数:
    279          *     reg--nrf24l01寄存器
    280          *     *pBUF--指向存储读出数据的首地址
    281          *     len--存取区的长度，单位字节
    282          * 返回值：
    283          *     返回当前寄存器的状态
    284          */

   \                                 In section .text, align 2, keep-with-next
    285          static uint8 LPLD_Nrf24L01_ReadBuf(uint8 reg,uint8 *pbuf,uint8 len)
    286          {
   \                     LPLD_Nrf24L01_ReadBuf:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0015             MOVS     R5,R2
    287            uint8 Status,i;
    288            
    289            Status = LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,reg,SPI_PCS0,SPI_PCS_ASSERTED); 
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000010   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000014   0x0006             MOVS     R6,R0
    290            
    291            for(i = 0 ;i < len ;i++)
   \   00000016   0x2700             MOVS     R7,#+0
   \   00000018   0xE008             B.N      ??LPLD_Nrf24L01_ReadBuf_0
    292            {
    293              if( i == (len-1) )
    294              {
    295                pbuf[i] = LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,0xFF,SPI_PCS0,SPI_PCS_INACTIVE);
    296              }
    297              else
    298              {
    299                pbuf[i] = LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,0xFF,SPI_PCS0,SPI_PCS_ASSERTED);
   \                     ??LPLD_Nrf24L01_ReadBuf_1:
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x21FF             MOVS     R1,#+255
   \   00000020   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000022   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000026   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000028   0x5538             STRB     R0,[R7, R4]
    300              }
   \                     ??LPLD_Nrf24L01_ReadBuf_2:
   \   0000002A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LPLD_Nrf24L01_ReadBuf_0:
   \   0000002C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x42AF             CMP      R7,R5
   \   00000032   0xD20D             BCS.N    ??LPLD_Nrf24L01_ReadBuf_3
   \   00000034   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x1E68             SUBS     R0,R5,#+1
   \   0000003A   0x4287             CMP      R7,R0
   \   0000003C   0xD1ED             BNE.N    ??LPLD_Nrf24L01_ReadBuf_1
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0x2201             MOVS     R2,#+1
   \   00000042   0x21FF             MOVS     R1,#+255
   \   00000044   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000046   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   0000004A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004C   0x5538             STRB     R0,[R7, R4]
   \   0000004E   0xE7EC             B.N      ??LPLD_Nrf24L01_ReadBuf_2
    301            }
    302            return Status ;
   \                     ??LPLD_Nrf24L01_ReadBuf_3:
   \   00000050   0x0030             MOVS     R0,R6
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    303          }
    304          
    305          /*
    306          * LPLD_Nrf24L01_WriteReg
    307          * 向nrf24l01寄存器中写入数据，并返回寄存器的状态/向nrf24l01写入指令
    308          * 参数:
    309          *     reg--nrf24l01寄存器
    310          *     value--寄存器的数值
    311          * 返回值: 
    312          *     返回当前寄存器的状态
    313          */

   \                                 In section .text, align 2, keep-with-next
    314          static uint8 LPLD_Nrf24L01_WriteReg(uint8 reg,uint8 value)
    315          {
   \                     LPLD_Nrf24L01_WriteReg:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x000C             MOVS     R4,R1
    316            uint8 Status;
    317            Status = LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,reg,SPI_PCS0,SPI_PCS_ASSERTED);    
   \   00000004   0x2301             MOVS     R3,#+1
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   0000000E   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000012   0x0005             MOVS     R5,R0
    318            LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,value,SPI_PCS0,SPI_PCS_INACTIVE);  
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0x0021             MOVS     R1,R4
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   0000001E   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
    319            return Status;
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    320          }
    321          
    322          /*
    323          * LPLD_Nrf24L01_ReadReg
    324          * 向nrf24l01寄存器中写入数据，并返回寄存器的状态/向nrf24l01写入指令
    325          * 参数:
    326          *     reg--nrf24l01寄存器
    327          * 返回值: 
    328          *     返回当前寄存器的数值
    329          */

   \                                 In section .text, align 2, keep-with-next
    330          static uint8 LPLD_Nrf24L01_ReadReg(uint8 reg)
    331          {
   \                     LPLD_Nrf24L01_ReadReg:
   \   00000000   0xB580             PUSH     {R7,LR}
    332            uint8 temp;
    333            LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,reg,SPI_PCS0,SPI_PCS_ASSERTED);  
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x0001             MOVS     R1,R0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   0000000C   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
    334            temp = LPLD_SPI_Master_WriteRead(NRF24L01_SPIX,0xFF,SPI_PCS0,SPI_PCS_INACTIVE); 
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x21FF             MOVS     R1,#+255
   \   00000016   0x....             LDR.N    R0,??DataTable8_1  ;; 0x4002c000
   \   00000018   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
    335            return temp;
   \   0000001C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
    336          }
    337          
    338          /*
    339          * Nrf24L01_DelayUs
    340          * 用于延时 最小10us
    341          * 参数:   
    342          *     t 延时
    343          * 返回值: 
    344          *     无      
    345          */

   \                                 In section .text, align 4, keep-with-next
    346          static void Nrf24L01_DelayUs(uint16 t)
    347          {
    348            uint16 i;
    349            for(i = 0; i < t;i++)
   \                     Nrf24L01_DelayUs:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE001             B.N      ??Nrf24L01_DelayUs_0
    350            {
    351              asm("nop");
   \                     ??Nrf24L01_DelayUs_1:
   \   00000004   0xBF00             nop
    352            }
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??Nrf24L01_DelayUs_0:
   \   00000008   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000000A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000C   0x4281             CMP      R1,R0
   \   0000000E   0xD3F9             BCC.N    ??Nrf24L01_DelayUs_1
    353          }
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     spi_init_param

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     ce_io_param

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     TX_ADDRESS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     RX_ADDRESS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     NRF24L01_RX_ADDR_P1_RESET_BUF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     NRF24L01_TX_ADDR_RESET_BUF

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     NRF24L01_RX_ADDR_P0_RESET_BUF

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  LPLD_Nrf24L01_CheckID
              8 -> LPLD_Nrf24L01_ReadBuf
       56  LPLD_Nrf24L01_Init
             40 -> LPLD_GPIO_Init
             40 -> LPLD_SPI_Init
             56 -> __aeabi_memcpy4
       24  LPLD_Nrf24L01_ReadBuf
             24 -> LPLD_SPI_Master_WriteRead
        8  LPLD_Nrf24L01_ReadReg
              8 -> LPLD_SPI_Master_WriteRead
       16  LPLD_Nrf24L01_RecvFrame
             16 -> LPLD_Nrf24L01_ReadBuf
             16 -> LPLD_Nrf24L01_ReadReg
             16 -> LPLD_Nrf24L01_WriteReg
        8  LPLD_Nrf24L01_RxModeInit
              8 -> LPLD_GPIO_Output_b
              8 -> LPLD_Nrf24L01_CheckID
              8 -> LPLD_Nrf24L01_WriteBuf
              8 -> LPLD_Nrf24L01_WriteReg
              8 -> Nrf24L01_DelayUs
       16  LPLD_Nrf24L01_SendFrame
             16 -> LPLD_GPIO_Output_b
             16 -> LPLD_Nrf24L01_ReadReg
             16 -> LPLD_Nrf24L01_WriteBuf
             16 -> LPLD_Nrf24L01_WriteReg
        8  LPLD_Nrf24L01_TxModeInit
              8 -> LPLD_GPIO_Output_b
              8 -> LPLD_Nrf24L01_CheckID
              8 -> LPLD_Nrf24L01_WriteBuf
              8 -> LPLD_Nrf24L01_WriteReg
              8 -> Nrf24L01_DelayUs
       24  LPLD_Nrf24L01_WriteBuf
             24 -> LPLD_SPI_Master_WriteRead
       16  LPLD_Nrf24L01_WriteReg
             16 -> LPLD_SPI_Master_WriteRead
        0  Nrf24L01_DelayUs


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
      50  LPLD_Nrf24L01_CheckID
     142  LPLD_Nrf24L01_Init
      86  LPLD_Nrf24L01_ReadBuf
      32  LPLD_Nrf24L01_ReadReg
      40  LPLD_Nrf24L01_RecvFrame
     122  LPLD_Nrf24L01_RxModeInit
      94  LPLD_Nrf24L01_SendFrame
     122  LPLD_Nrf24L01_TxModeInit
      82  LPLD_Nrf24L01_WriteBuf
      40  LPLD_Nrf24L01_WriteReg
       8  NRF24L01_RX_ADDR_P0_RESET_BUF
       8  NRF24L01_RX_ADDR_P1_RESET_BUF
       8  NRF24L01_TX_ADDR_RESET_BUF
      18  Nrf24L01_DelayUs
       8  RX_ADDRESS
       8  TX_ADDRESS
      20  ce_io_param
      52  spi_init_param

 
  96 bytes in section .bss
  16 bytes in section .data
 864 bytes in section .text
 
 864 bytes of CODE memory
 112 bytes of DATA memory

Errors: none
Warnings: none
