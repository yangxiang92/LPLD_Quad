###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     19/Mar/2014  22:08:20 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\FatFs\d #
#                    iskio.c                                                  #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\FatFs\d #
#                    iskio.c -D LPLD_K60 -lCN E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V2\iar\RAM\List\ -lB                          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\R #
#                    AM\Obj\ --no_cse --no_unroll --no_inline                 #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ia #
#                    r\..\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\lib\LPLD\DEV\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V2\iar\..\lib\uCOS-II\Source\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\..\lib\USB\common\ -I                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\lib\USB\descriptor\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\class\ -Ol -I "D:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\diskio.lst                                             #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Obj #
#                    \diskio.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\FatFs\diskio.c
      1          /*-----------------------------------------------------------------------*/
      2          /* Low level disk I/O module skeleton for FatFs     (C)ChaN, 2013        */
      3          /*-----------------------------------------------------------------------*/
      4          /* If a working storage control module is available, it should be        */
      5          /* attached to the FatFs via a glue function rather than modifying it.   */
      6          /* This is an example of glue functions to attach various exsisting      */
      7          /* storage control module to the FatFs module with a defined API.        */
      8          /*-----------------------------------------------------------------------*/
      9          
     10          #include "diskio.h"		/* FatFs lower layer API */
     11          //#include "usbdisk.h"	/* Example: USB drive control */
     12          //#include "atadrive.h"	/* Example: ATA drive control */
     13          //#include "sdcard.h"		/* Example: MMC/SDC contorl */
     14          #include "common.h"     //包含LPLD底层驱K60动文件[By LPLD]
     15          
     16          
     17          //SD卡信息全局变量[By LPLD]
     18          extern SDCARD_STRUCT_PTR sdcard_ptr;
     19          
     20          /*-----------------------------------------------------------------------*/
     21          /* Inidialize a Drive                                                    */
     22          /*-----------------------------------------------------------------------*/
     23          

   \                                 In section .text, align 2, keep-with-next
     24          DSTATUS disk_initialize (
     25          	BYTE pdrv				/* Physical drive nmuber (0..) */
     26          )
     27          {
   \                     disk_initialize:
   \   00000000   0xB580             PUSH     {R7,LR}
     28            if(pdrv)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??disk_initialize_0
     29              return RES_PARERR;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xE002             B.N      ??disk_initialize_1
     30           
     31            return (DSTATUS)LPLD_SDHC_InitCard();
   \                     ??disk_initialize_0:
   \   0000000C   0x.... 0x....      BL       LPLD_SDHC_InitCard
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??disk_initialize_1:
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
     32          }
     33          
     34          
     35          
     36          /*-----------------------------------------------------------------------*/
     37          /* Get Disk Status                                                       */
     38          /*-----------------------------------------------------------------------*/
     39          

   \                                 In section .text, align 2, keep-with-next
     40          DSTATUS disk_status (
     41          	BYTE pdrv		/* Physical drive nmuber (0..) */
     42          )
     43          {
     44            return (DSTATUS)sdcard_ptr->STATUS;
   \                     disk_status:
   \   00000000   0x....             LDR.N    R0,??DataTable1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6940             LDR      R0,[R0, #+20]
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x4770             BX       LR               ;; return
     45          }
     46          
     47          
     48          
     49          /*-----------------------------------------------------------------------*/
     50          /* Read Sector(s)                                                        */
     51          /*-----------------------------------------------------------------------*/
     52          

   \                                 In section .text, align 2, keep-with-next
     53          DRESULT disk_read (
     54          	BYTE pdrv,		/* Physical drive nmuber (0..) */
     55          	BYTE *buff,		/* Data buffer to store read data */
     56          	DWORD sector,	/* Sector address (LBA) */
     57          	BYTE count		/* Number of sectors to read (1..128) */
     58          )
     59          {
   \                     disk_read:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001A             MOVS     R2,R3
     60            if(pdrv || (count == 0))
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??disk_read_0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD101             BNE.N    ??disk_read_1
     61              return RES_PARERR;
   \                     ??disk_read_0:
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0xE003             B.N      ??disk_read_2
     62          
     63            return (DRESULT)LPLD_SDHC_ReadBlocks(buff, sector, count);
   \                     ??disk_read_1:
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       LPLD_SDHC_ReadBlocks
   \                     ??disk_read_2:
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
     64          }
     65          
     66          
     67          
     68          /*-----------------------------------------------------------------------*/
     69          /* Write Sector(s)                                                       */
     70          /*-----------------------------------------------------------------------*/
     71          
     72          #if _USE_WRITE

   \                                 In section .text, align 2, keep-with-next
     73          DRESULT disk_write (
     74          	BYTE pdrv,			/* Physical drive nmuber (0..) */
     75          	const BYTE *buff,	/* Data to be written */
     76          	DWORD sector,		/* Sector address (LBA) */
     77          	BYTE count			/* Number of sectors to write (1..128) */
     78          )
     79          {
   \                     disk_write:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001A             MOVS     R2,R3
     80            if(pdrv || (count == 0))
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??disk_write_0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD101             BNE.N    ??disk_write_1
     81              return RES_PARERR;
   \                     ??disk_write_0:
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0xE003             B.N      ??disk_write_2
     82            
     83            return (DRESULT)LPLD_SDHC_WriteBlocks((uint8*)buff, sector, count);
   \                     ??disk_write_1:
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       LPLD_SDHC_WriteBlocks
   \                     ??disk_write_2:
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
     84          }
     85          #endif
     86          
     87          
     88          /*-----------------------------------------------------------------------*/
     89          /* Miscellaneous Functions                                               */
     90          /*-----------------------------------------------------------------------*/
     91          
     92          #if _USE_IOCTL

   \                                 In section .text, align 2, keep-with-next
     93          DRESULT disk_ioctl (
     94          	BYTE pdrv,		/* Physical drive nmuber (0..) */
     95          	BYTE cmd,		/* Control code */
     96          	void *buff		/* Buffer to send/receive control data */
     97          )
     98          {
     99            DRESULT result = RES_OK;
   \                     disk_ioctl:
   \   00000000   0x2300             MOVS     R3,#+0
    100            
    101            if(pdrv)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??disk_ioctl_0
    102              return RES_PARERR;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xE00B             B.N      ??disk_ioctl_1
    103            
    104            switch(cmd)
   \                     ??disk_ioctl_0:
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD006             BEQ.N    ??disk_ioctl_2
   \   00000012   0x2902             CMP      R1,#+2
   \   00000014   0xD007             BEQ.N    ??disk_ioctl_3
   \   00000016   0xD30E             BCC.N    ??disk_ioctl_4
   \   00000018   0x2904             CMP      R1,#+4
   \   0000001A   0xD017             BEQ.N    ??disk_ioctl_5
   \   0000001C   0xD314             BCC.N    ??disk_ioctl_6
   \   0000001E   0xE017             B.N      ??disk_ioctl_7
    105            {
    106              case CTRL_SYNC:
    107                /*
    108                确定磁盘驱动已经完成写操作挂起的处理. 
    109                当磁盘IO模块有一个会写缓存，会立即擦除扇区. 该命令不能再只读模式使用.
    110                */
    111                // 在POLLING模式中，所有写操作已完成。
    112                break;
    113              case GET_SECTOR_SIZE:
    114                /*
    115                以WORD型指针变量的形式返回扇区大小.
    116                此命令不能用在可变扇区大小的配置, 
    117                _MAX_SS 为 512.
    118                */
    119                if(buff == NULL)
    120                  result = RES_PARERR;
    121                else
    122                  *(uint32*)buff = IO_SDCARD_BLOCK_SIZE;
    123                
    124                break;
    125              case GET_SECTOR_COUNT:
    126                /*
    127                以UINT32型指针变量的形式返回磁盘的可用扇区数. 
    128                该命令仅被f_mkfs函数调用以决定可创建多大的卷. 
    129                */
    130                if(buff == NULL)
    131                  result = RES_PARERR;
    132                else
    133                  *(uint32*)buff = sdcard_ptr->NUM_BLOCKS;
    134                break;
    135              case GET_BLOCK_SIZE:
    136                /*
    137                以UINT32类型的指针变量返回返回flash内存中擦除的扇区数.
    138                合法的数值为2的1至32768次方.
    139                返回1代表擦除大小或磁盘设备未知.
    140                该命令仅被f_mkfs函数调用并试图将擦除的扇区边界进行数据对齐.
    141                */
    142                result = RES_PARERR;
    143                break;
    144              case CTRL_ERASE_SECTOR:
    145                /*
    146                擦除由UINT32类型指针数组指定的flash内存,{<start sector>, <end sector>}.
    147                如果介质为非flash内存,则该命令无效.
    148                FatFs系统不会检查结果,如果擦除失败也不会影响文件函数.
    149                当_USE_ERASE为1时移动一个簇链会调用此命令.
    150                */
    151                result = RES_PARERR;
    152                break;
    153              default:
    154                return RES_PARERR;
    155              
    156            }
    157            return result;
   \                     ??disk_ioctl_2:
   \                     ??disk_ioctl_8:
   \   00000020   0x0018             MOVS     R0,R3
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??disk_ioctl_1:
   \   00000024   0x4770             BX       LR               ;; return
   \                     ??disk_ioctl_3:
   \   00000026   0x2A00             CMP      R2,#+0
   \   00000028   0xD101             BNE.N    ??disk_ioctl_9
   \   0000002A   0x2304             MOVS     R3,#+4
   \   0000002C   0xE002             B.N      ??disk_ioctl_10
   \                     ??disk_ioctl_9:
   \   0000002E   0xF44F 0x7000      MOV      R0,#+512
   \   00000032   0x6010             STR      R0,[R2, #+0]
   \                     ??disk_ioctl_10:
   \   00000034   0xE7F4             B.N      ??disk_ioctl_8
   \                     ??disk_ioctl_4:
   \   00000036   0x2A00             CMP      R2,#+0
   \   00000038   0xD101             BNE.N    ??disk_ioctl_11
   \   0000003A   0x2304             MOVS     R3,#+4
   \   0000003C   0xE003             B.N      ??disk_ioctl_12
   \                     ??disk_ioctl_11:
   \   0000003E   0x....             LDR.N    R0,??DataTable1
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x6840             LDR      R0,[R0, #+4]
   \   00000044   0x6010             STR      R0,[R2, #+0]
   \                     ??disk_ioctl_12:
   \   00000046   0xE7EB             B.N      ??disk_ioctl_8
   \                     ??disk_ioctl_6:
   \   00000048   0x2304             MOVS     R3,#+4
   \   0000004A   0xE7E9             B.N      ??disk_ioctl_8
   \                     ??disk_ioctl_5:
   \   0000004C   0x2304             MOVS     R3,#+4
   \   0000004E   0xE7E7             B.N      ??disk_ioctl_8
   \                     ??disk_ioctl_7:
   \   00000050   0x2004             MOVS     R0,#+4
   \   00000052   0xE7E7             B.N      ??disk_ioctl_1
    158          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     sdcard_ptr
    159          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  disk_initialize
             8 -> LPLD_SDHC_InitCard
        0  disk_ioctl
        8  disk_read
             8 -> LPLD_SDHC_ReadBlocks
        0  disk_status
        8  disk_write
             8 -> LPLD_SDHC_WriteBlocks


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      20  disk_initialize
      84  disk_ioctl
      34  disk_read
      10  disk_status
      34  disk_write

 
 186 bytes in section .text
 
 186 bytes of CODE memory

Errors: none
Warnings: none
