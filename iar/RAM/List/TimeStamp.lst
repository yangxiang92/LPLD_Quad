###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     20/Mar/2014  08:42:20 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\FU #
#                    NC\TimeStamp.c                                           #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\FU #
#                    NC\TimeStamp.c -D LPLD_K60 -lCN                          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\ #
#                    RAM\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V #
#                    2\iar\RAM\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ia #
#                    r\..\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\lib\LPLD\DEV\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V2\iar\..\lib\uCOS-II\Source\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\..\lib\USB\common\ -I                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\lib\USB\descriptor\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\class\ -Ol -I "D:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\TimeStamp.lst                                          #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Obj #
#                    \TimeStamp.o                                             #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\FUNC\TimeStamp.c
      1          /**
      2           * @file TimeStamp.c
      3           * @version 3.01[By LPLD]
      4           * @date 2013-10-29
      5           * @brief TIMESTAMP时间戳功能定义
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"
     23          #include "TimeStamp.h"
     24          //定义每月天数常量

   \                                 In section .rodata, align 4
     25          const uint8 month_table[12]={31,28,31,30,31,30,31,31,30,31,30,31};
   \                     month_table:
   \   00000000   0x1F 0x1C          DC8 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   \              0x1F 0x1E    
   \              0x1F 0x1E    
   \              0x1F 0x1F    
   \              0x1E 0x1F    
   \              0x1E 0x1F    
     26          //定义星期补偿常量

   \                                 In section .rodata, align 4
     27          const uint8 week_table[12]={0,3,3,6,1,4,6,2,5,0,3,5}; 
   \                     week_table:
   \   00000000   0x00 0x03          DC8 0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5
   \              0x03 0x06    
   \              0x01 0x04    
   \              0x06 0x02    
   \              0x05 0x00    
   \              0x03 0x05    
     28          

   \                                 In section .rodata, align 4
     29          const uint8 month_list[12][3]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
   \                     month_list:
   \   00000000   0x4A 0x61          DC8 4AH, 61H, 6EH
   \              0x6E         
   \   00000003   0x46 0x65          DC8 46H, 65H, 62H
   \              0x62         
   \   00000006   0x4D 0x61          DC8 4DH, 61H, 72H
   \              0x72         
   \   00000009   0x41 0x70          DC8 41H, 70H, 72H
   \              0x72         
   \   0000000C   0x4D 0x61          DC8 4DH, 61H, 79H
   \              0x79         
   \   0000000F   0x4A 0x75          DC8 4AH, 75H, 6EH
   \              0x6E         
   \   00000012   0x4A 0x75          DC8 4AH, 75H, 6CH
   \              0x6C         
   \   00000015   0x41 0x75          DC8 41H, 75H, 67H
   \              0x67         
   \   00000018   0x53 0x65          DC8 53H, 65H, 70H
   \              0x70         
   \   0000001B   0x4F 0x63          DC8 4FH, 63H, 74H
   \              0x74         
   \   0000001E   0x4E 0x6F          DC8 4EH, 6FH, 76H
   \              0x76         
   \   00000021   0x44 0x65          DC8 44H, 65H, 63H
   \              0x63         
     30          
     31          /*
     32           * LPLD_DateTimeToTimeStamp
     33           * 将时间结构体转换为秒
     34           * 以IBM时间标准为基础
     35           * 
     36           * 参数:
     37           *    TimeStamp_FormatTypeDef* realtime_init_struct
     38           *                        具体定义见TimeStamp_FormatTypeDef
     39           *
     40           * 输出:
     41           *    返回值为秒，可以做为RTC秒计数器的值
     42           *    返回零表示错误
     43           *
     44           */

   \                                 In section .text, align 2, keep-with-next
     45          uint32 LPLD_DateTimeToTimeStamp(TimeStamp_FormatTypeDef *realtime_init_struct)
     46          {
   \                     LPLD_DateTimeToTimeStamp:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
     47            uint16 i; 
     48            uint32 current_second = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     49            uint16 current_year = realtime_init_struct->year;
   \   00000004   0x88C2             LDRH     R2,[R0, #+6]
     50            uint8 current_month = realtime_init_struct->month;
   \   00000006   0x7943             LDRB     R3,[R0, #+5]
     51            uint8 current_day = realtime_init_struct->day;
   \   00000008   0x7904             LDRB     R4,[R0, #+4]
     52            uint8 current_hour = realtime_init_struct->hour;
   \   0000000A   0x7805             LDRB     R5,[R0, #+0]
     53            uint8 current_minute = realtime_init_struct->minute;
   \   0000000C   0x7846             LDRB     R6,[R0, #+1]
     54            //判断时间起点终端是否越界
     55            if(current_year < IBM_YEAR_START || current_year > IBM_YEAR_END)
   \   0000000E   0xF2A2 0x77B2      SUBW     R7,R2,#+1970
   \   00000012   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000014   0x2F82             CMP      R7,#+130
   \   00000016   0xD301             BCC.N    ??LPLD_DateTimeToTimeStamp_0
     56            {
     57              return 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE092             B.N      ??LPLD_DateTimeToTimeStamp_1
     58            }
     59            //将年转化为秒
     60            for (i = IBM_YEAR_START; i < current_year; i++)
   \                     ??LPLD_DateTimeToTimeStamp_0:
   \   0000001C   0xF240 0x77B2      MOVW     R7,#+1970
   \   00000020   0xE004             B.N      ??LPLD_DateTimeToTimeStamp_2
     61            {
     62              if(IS_LEAPYEAR(i))
     63              {
     64                  current_second += LEAPYEAR_CONVERTTO_SECONEDS;
     65              }
     66              else
     67              {
     68                  current_second += AVERAGEYEAR_CONVERTTO_SECONEDS;
   \                     ??LPLD_DateTimeToTimeStamp_3:
   \   00000022   0x.... 0x....      LDR.W    R12,??DataTable3  ;; 0x1e13380
   \   00000026   0xEB1C 0x0101      ADDS     R1,R12,R1
     69              }
   \                     ??LPLD_DateTimeToTimeStamp_4:
   \   0000002A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LPLD_DateTimeToTimeStamp_2:
   \   0000002C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000030   0x4297             CMP      R7,R2
   \   00000032   0xD230             BCS.N    ??LPLD_DateTimeToTimeStamp_5
   \   00000034   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000036   0xF05F 0x0C04      MOVS     R12,#+4
   \   0000003A   0xFB97 0xFEFC      SDIV     LR,R7,R12
   \   0000003E   0xFB0E 0x7E1C      MLS      LR,LR,R12,R7
   \   00000042   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000046   0xD002             BEQ.N    ??LPLD_DateTimeToTimeStamp_6
   \   00000048   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000004C   0xE01B             B.N      ??LPLD_DateTimeToTimeStamp_7
   \                     ??LPLD_DateTimeToTimeStamp_6:
   \   0000004E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000050   0xF05F 0x0C64      MOVS     R12,#+100
   \   00000054   0xFB97 0xFEFC      SDIV     LR,R7,R12
   \   00000058   0xFB0C 0x7C1E      MLS      R12,R12,LR,R7
   \   0000005C   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000060   0xD002             BEQ.N    ??LPLD_DateTimeToTimeStamp_8
   \   00000062   0xF05F 0x0C01      MOVS     R12,#+1
   \   00000066   0xE00E             B.N      ??LPLD_DateTimeToTimeStamp_7
   \                     ??LPLD_DateTimeToTimeStamp_8:
   \   00000068   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006A   0xF44F 0x7CC8      MOV      R12,#+400
   \   0000006E   0xFB97 0xFEFC      SDIV     LR,R7,R12
   \   00000072   0xFB0C 0x7C1E      MLS      R12,R12,LR,R7
   \   00000076   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000007A   0xD002             BEQ.N    ??LPLD_DateTimeToTimeStamp_9
   \   0000007C   0xF05F 0x0C00      MOVS     R12,#+0
   \   00000080   0xE001             B.N      ??LPLD_DateTimeToTimeStamp_7
   \                     ??LPLD_DateTimeToTimeStamp_9:
   \   00000082   0xF05F 0x0C01      MOVS     R12,#+1
   \                     ??LPLD_DateTimeToTimeStamp_7:
   \   00000086   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000008A   0xD0CA             BEQ.N    ??LPLD_DateTimeToTimeStamp_3
   \   0000008C   0xF101 0x71F1      ADD      R1,R1,#+31588352
   \   00000090   0xF511 0x4105      ADDS     R1,R1,#+34048
   \   00000094   0xE7C9             B.N      ??LPLD_DateTimeToTimeStamp_4
     70            }
     71            //将月转化为秒
     72            for ( i = 0; i < (current_month - 1); i++)
   \                     ??LPLD_DateTimeToTimeStamp_5:
   \   00000096   0x2700             MOVS     R7,#+0
   \   00000098   0xE00C             B.N      ??LPLD_DateTimeToTimeStamp_10
     73            {
     74              current_second += (uint32)month_table[i] * DAY_CONVERTTO_SECONEDS;
     75              if(IS_LEAPYEAR(current_year) && i == FEBRUARY)
   \                     ??LPLD_DateTimeToTimeStamp_11:
   \   0000009A   0xF05F 0x0C01      MOVS     R12,#+1
   \                     ??LPLD_DateTimeToTimeStamp_12:
   \   0000009E   0xF1BC 0x0F00      CMP      R12,#+0
   \   000000A2   0xD006             BEQ.N    ??LPLD_DateTimeToTimeStamp_13
   \   000000A4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000A6   0x2F01             CMP      R7,#+1
   \   000000A8   0xD103             BNE.N    ??LPLD_DateTimeToTimeStamp_13
     76              {
     77                  current_second += DAY_CONVERTTO_SECONEDS;
   \   000000AA   0x.... 0x....      LDR.W    R12,??DataTable3_1  ;; 0x15180
   \   000000AE   0xEB1C 0x0101      ADDS     R1,R12,R1
     78              }
   \                     ??LPLD_DateTimeToTimeStamp_13:
   \   000000B2   0x1C7F             ADDS     R7,R7,#+1
   \                     ??LPLD_DateTimeToTimeStamp_10:
   \   000000B4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000B6   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000000B8   0xF1B3 0x0C01      SUBS     R12,R3,#+1
   \   000000BC   0x4567             CMP      R7,R12
   \   000000BE   0xDA2F             BGE.N    ??LPLD_DateTimeToTimeStamp_14
   \   000000C0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C2   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   000000C6   0xF817 0xC00C      LDRB     R12,[R7, R12]
   \   000000CA   0x.... 0x....      LDR.W    LR,??DataTable3_1  ;; 0x15180
   \   000000CE   0xFB0E 0x110C      MLA      R1,LR,R12,R1
   \   000000D2   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000D4   0xF05F 0x0C04      MOVS     R12,#+4
   \   000000D8   0xFB92 0xFEFC      SDIV     LR,R2,R12
   \   000000DC   0xFB0E 0x2E1C      MLS      LR,LR,R12,R2
   \   000000E0   0xF1BE 0x0F00      CMP      LR,#+0
   \   000000E4   0xD002             BEQ.N    ??LPLD_DateTimeToTimeStamp_15
   \   000000E6   0xF05F 0x0C00      MOVS     R12,#+0
   \   000000EA   0xE7D8             B.N      ??LPLD_DateTimeToTimeStamp_12
   \                     ??LPLD_DateTimeToTimeStamp_15:
   \   000000EC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000EE   0xF05F 0x0C64      MOVS     R12,#+100
   \   000000F2   0xFB92 0xFEFC      SDIV     LR,R2,R12
   \   000000F6   0xFB0C 0x2C1E      MLS      R12,R12,LR,R2
   \   000000FA   0xF1BC 0x0F00      CMP      R12,#+0
   \   000000FE   0xD002             BEQ.N    ??LPLD_DateTimeToTimeStamp_16
   \   00000100   0xF05F 0x0C01      MOVS     R12,#+1
   \   00000104   0xE7CB             B.N      ??LPLD_DateTimeToTimeStamp_12
   \                     ??LPLD_DateTimeToTimeStamp_16:
   \   00000106   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000108   0xF44F 0x7CC8      MOV      R12,#+400
   \   0000010C   0xFB92 0xFEFC      SDIV     LR,R2,R12
   \   00000110   0xFB0C 0x2C1E      MLS      R12,R12,LR,R2
   \   00000114   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000118   0xD0BF             BEQ.N    ??LPLD_DateTimeToTimeStamp_11
   \   0000011A   0xF05F 0x0C00      MOVS     R12,#+0
   \   0000011E   0xE7BE             B.N      ??LPLD_DateTimeToTimeStamp_12
     79            }
     80            //将天，小时，分转化为秒
     81            current_second += (uint32)(current_day - 1) * DAY_CONVERTTO_SECONEDS;
   \                     ??LPLD_DateTimeToTimeStamp_14:
   \   00000120   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000122   0x1E62             SUBS     R2,R4,#+1
   \   00000124   0x....             LDR.N    R3,??DataTable3_1  ;; 0x15180
   \   00000126   0xFB03 0x1102      MLA      R1,R3,R2,R1
     82            current_second += (uint32)current_hour * HOUR_CONVERTTO_SECONEDS;
   \   0000012A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000012C   0xF44F 0x6261      MOV      R2,#+3600
   \   00000130   0xFB02 0x1105      MLA      R1,R2,R5,R1
     83            current_second += (uint32)current_minute * MINUTE_CONVERTTO_SECONEDS;
   \   00000134   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000136   0x223C             MOVS     R2,#+60
   \   00000138   0xFB02 0x1106      MLA      R1,R2,R6,R1
     84            current_second += realtime_init_struct->second;   
   \   0000013C   0x7880             LDRB     R0,[R0, #+2]
   \   0000013E   0x1809             ADDS     R1,R1,R0
     85            return current_second;   
   \   00000140   0x0008             MOVS     R0,R1
   \                     ??LPLD_DateTimeToTimeStamp_1:
   \   00000142   0xBDF0             POP      {R4-R7,PC}       ;; return
     86          }
     87          /*
     88           * LPLD_TimeStampToDateTime
     89           * 将秒转换为时间结构体
     90           * 以IBM时间标准为基础
     91           * 
     92           * 参数:
     93           *    uint32 -- rtc_second  RTC秒计数器的值
     94           *    TimeStamp_FormatTypeDef* realtime_init_struct
     95           *                        具体定义见TimeStamp_FormatTypeDef
     96           *
     97           * 输出:
     98           *    返回值为秒，可以做为RTC秒计数器的值
     99           *    返回1表示正确
    100           *
    101           */

   \                                 In section .text, align 2, keep-with-next
    102          uint8 LPLD_TimeStampToDateTime(uint32 rtc_second, TimeStamp_FormatTypeDef *realtime_init_struct)
    103          {
   \                     LPLD_TimeStampToDateTime:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x000C             MOVS     R4,R1
    104            static uint32 day_counter = 0;
    105            uint32 days = 0;
   \   00000004   0x2100             MOVS     R1,#+0
    106            uint32 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    107            days = rtc_second / DAY_CONVERTTO_SECONEDS;//second to days
   \   00000008   0x....             LDR.N    R2,??DataTable3_1  ;; 0x15180
   \   0000000A   0xFBB0 0xF2F2      UDIV     R2,R0,R2
   \   0000000E   0x0011             MOVS     R1,R2
    108            if(day_counter != days)
   \   00000010   0x....             LDR.N    R2,??DataTable3_3
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0x428A             CMP      R2,R1
   \   00000016   0xD06A             BEQ.N    ??LPLD_TimeStampToDateTime_0
    109            {
    110              day_counter = days;
   \   00000018   0x....             LDR.N    R2,??DataTable3_3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
    111              i = IBM_YEAR_START;
   \   0000001C   0xF240 0x75B2      MOVW     R5,#+1970
   \   00000020   0xE002             B.N      ??LPLD_TimeStampToDateTime_1
    112              //days to years
    113              while(days >= AVERAGEYEAR_DAYS)
    114              {
    115                if(IS_LEAPYEAR(i)) 
    116                {
    117                  if(days >= LEAPYEAR_DAYS)
    118                  {
    119                      days-= LEAPYEAR_DAYS;
    120                  }   
    121                  else 
    122                  {
    123                      i++;
    124                      break;
    125                  }   
    126                }
    127                else 
    128                {
    129                   days -= AVERAGEYEAR_DAYS; 
   \                     ??LPLD_TimeStampToDateTime_2:
   \   00000022   0xF2A1 0x116D      SUBW     R1,R1,#+365
    130                }
    131                i++;  
   \                     ??LPLD_TimeStampToDateTime_3:
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_TimeStampToDateTime_1:
   \   00000028   0xF5B1 0x7FB6      CMP      R1,#+364
   \   0000002C   0xD925             BLS.N    ??LPLD_TimeStampToDateTime_4
   \   0000002E   0x2204             MOVS     R2,#+4
   \   00000030   0xFBB5 0xF3F2      UDIV     R3,R5,R2
   \   00000034   0xFB03 0x5312      MLS      R3,R3,R2,R5
   \   00000038   0x2B00             CMP      R3,#+0
   \   0000003A   0xD001             BEQ.N    ??LPLD_TimeStampToDateTime_5
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0xE013             B.N      ??LPLD_TimeStampToDateTime_6
   \                     ??LPLD_TimeStampToDateTime_5:
   \   00000040   0x2264             MOVS     R2,#+100
   \   00000042   0xFBB5 0xF3F2      UDIV     R3,R5,R2
   \   00000046   0xFB02 0x5213      MLS      R2,R2,R3,R5
   \   0000004A   0x2A00             CMP      R2,#+0
   \   0000004C   0xD001             BEQ.N    ??LPLD_TimeStampToDateTime_7
   \   0000004E   0x2201             MOVS     R2,#+1
   \   00000050   0xE00A             B.N      ??LPLD_TimeStampToDateTime_6
   \                     ??LPLD_TimeStampToDateTime_7:
   \   00000052   0xF44F 0x72C8      MOV      R2,#+400
   \   00000056   0xFBB5 0xF3F2      UDIV     R3,R5,R2
   \   0000005A   0xFB02 0x5213      MLS      R2,R2,R3,R5
   \   0000005E   0x2A00             CMP      R2,#+0
   \   00000060   0xD001             BEQ.N    ??LPLD_TimeStampToDateTime_8
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0xE000             B.N      ??LPLD_TimeStampToDateTime_6
   \                     ??LPLD_TimeStampToDateTime_8:
   \   00000066   0x2201             MOVS     R2,#+1
   \                     ??LPLD_TimeStampToDateTime_6:
   \   00000068   0x2A00             CMP      R2,#+0
   \   0000006A   0xD0DA             BEQ.N    ??LPLD_TimeStampToDateTime_2
   \   0000006C   0xF5B1 0x7FB7      CMP      R1,#+366
   \   00000070   0xD302             BCC.N    ??LPLD_TimeStampToDateTime_9
   \   00000072   0xF5B1 0x71B7      SUBS     R1,R1,#+366
   \   00000076   0xE7D6             B.N      ??LPLD_TimeStampToDateTime_3
   \                     ??LPLD_TimeStampToDateTime_9:
   \   00000078   0x1C6D             ADDS     R5,R5,#+1
    132              }
    133              realtime_init_struct->year = i;
   \                     ??LPLD_TimeStampToDateTime_4:
   \   0000007A   0x80E5             STRH     R5,[R4, #+6]
    134              i = 0;
   \   0000007C   0x2500             MOVS     R5,#+0
   \   0000007E   0xE01D             B.N      ??LPLD_TimeStampToDateTime_10
    135              //days to month
    136              while(days >= AVERAGEYEAR_FEBRUARY_DAYS )
    137              {
    138                if(IS_LEAPYEAR(realtime_init_struct->year) && i == FEBRUARY )
   \                     ??LPLD_TimeStampToDateTime_11:
   \   00000080   0x88E2             LDRH     R2,[R4, #+6]
   \   00000082   0x2364             MOVS     R3,#+100
   \   00000084   0xFB92 0xF6F3      SDIV     R6,R2,R3
   \   00000088   0xFB03 0x2216      MLS      R2,R3,R6,R2
   \   0000008C   0x2A00             CMP      R2,#+0
   \   0000008E   0xD001             BEQ.N    ??LPLD_TimeStampToDateTime_12
   \   00000090   0x2201             MOVS     R2,#+1
   \   00000092   0xE00B             B.N      ??LPLD_TimeStampToDateTime_13
   \                     ??LPLD_TimeStampToDateTime_12:
   \   00000094   0x88E2             LDRH     R2,[R4, #+6]
   \   00000096   0xF44F 0x73C8      MOV      R3,#+400
   \   0000009A   0xFB92 0xF6F3      SDIV     R6,R2,R3
   \   0000009E   0xFB03 0x2216      MLS      R2,R3,R6,R2
   \   000000A2   0x2A00             CMP      R2,#+0
   \   000000A4   0xD001             BEQ.N    ??LPLD_TimeStampToDateTime_14
   \   000000A6   0x2200             MOVS     R2,#+0
   \   000000A8   0xE000             B.N      ??LPLD_TimeStampToDateTime_13
   \                     ??LPLD_TimeStampToDateTime_14:
   \   000000AA   0x2201             MOVS     R2,#+1
   \                     ??LPLD_TimeStampToDateTime_13:
   \   000000AC   0x2A00             CMP      R2,#+0
   \   000000AE   0xD012             BEQ.N    ??LPLD_TimeStampToDateTime_15
   \   000000B0   0x2D01             CMP      R5,#+1
   \   000000B2   0xD110             BNE.N    ??LPLD_TimeStampToDateTime_15
    139                {
    140                  if(days >= LEAPYEAR_FEBRUARY_DAYS) 
   \   000000B4   0x291D             CMP      R1,#+29
   \   000000B6   0xD30D             BCC.N    ??LPLD_TimeStampToDateTime_16
    141                  {
    142                    days -= LEAPYEAR_FEBRUARY_DAYS;
   \   000000B8   0x391D             SUBS     R1,R1,#+29
    143                  }
    144                  else break; 
    145                }
    146                else 
    147                {
    148                  if(days >= month_table[i]) 
    149                  {
    150                    days -= month_table[i];
    151                  }
    152                  else break;
    153                }
    154                i++;  
   \                     ??LPLD_TimeStampToDateTime_17:
   \   000000BA   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_TimeStampToDateTime_10:
   \   000000BC   0x291C             CMP      R1,#+28
   \   000000BE   0xD312             BCC.N    ??LPLD_TimeStampToDateTime_18
   \   000000C0   0x88E2             LDRH     R2,[R4, #+6]
   \   000000C2   0x2304             MOVS     R3,#+4
   \   000000C4   0xFB92 0xF6F3      SDIV     R6,R2,R3
   \   000000C8   0xFB06 0x2613      MLS      R6,R6,R3,R2
   \   000000CC   0x2E00             CMP      R6,#+0
   \   000000CE   0xD0D7             BEQ.N    ??LPLD_TimeStampToDateTime_11
   \   000000D0   0x2200             MOVS     R2,#+0
   \   000000D2   0xE7EB             B.N      ??LPLD_TimeStampToDateTime_13
   \                     ??LPLD_TimeStampToDateTime_16:
   \   000000D4   0xE007             B.N      ??LPLD_TimeStampToDateTime_18
   \                     ??LPLD_TimeStampToDateTime_15:
   \   000000D6   0x....             LDR.N    R2,??DataTable3_2
   \   000000D8   0x5CAA             LDRB     R2,[R5, R2]
   \   000000DA   0x4291             CMP      R1,R2
   \   000000DC   0xD303             BCC.N    ??LPLD_TimeStampToDateTime_19
   \   000000DE   0x....             LDR.N    R2,??DataTable3_2
   \   000000E0   0x5CAA             LDRB     R2,[R5, R2]
   \   000000E2   0x1A89             SUBS     R1,R1,R2
   \   000000E4   0xE7E9             B.N      ??LPLD_TimeStampToDateTime_17
    155              }
    156              realtime_init_struct->month = i+1;
   \                     ??LPLD_TimeStampToDateTime_19:
   \                     ??LPLD_TimeStampToDateTime_18:
   \   000000E6   0x1C6A             ADDS     R2,R5,#+1
   \   000000E8   0x7162             STRB     R2,[R4, #+5]
    157              realtime_init_struct->day = days+1;
   \   000000EA   0x1C49             ADDS     R1,R1,#+1
   \   000000EC   0x7121             STRB     R1,[R4, #+4]
    158            }
    159            i = rtc_second % DAY_CONVERTTO_SECONEDS;     
   \                     ??LPLD_TimeStampToDateTime_0:
   \   000000EE   0x....             LDR.N    R1,??DataTable3_1  ;; 0x15180
   \   000000F0   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   000000F4   0xFB01 0x0512      MLS      R5,R1,R2,R0
    160            realtime_init_struct->week = LPLD_GetWeek(realtime_init_struct);         
   \   000000F8   0x0020             MOVS     R0,R4
   \   000000FA   0x.... 0x....      BL       LPLD_GetWeek
   \   000000FE   0x70E0             STRB     R0,[R4, #+3]
    161            realtime_init_struct->hour = i / HOUR_CONVERTTO_SECONEDS;        //hours
   \   00000100   0xF44F 0x6061      MOV      R0,#+3600
   \   00000104   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000108   0x7020             STRB     R0,[R4, #+0]
    162            realtime_init_struct->minute = (i % HOUR_CONVERTTO_SECONEDS) / MINUTE_CONVERTTO_SECONEDS; //minutes  
   \   0000010A   0xF44F 0x6061      MOV      R0,#+3600
   \   0000010E   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   00000112   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000116   0x213C             MOVS     R1,#+60
   \   00000118   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000011C   0x7060             STRB     R0,[R4, #+1]
    163            realtime_init_struct->second = (i % HOUR_CONVERTTO_SECONEDS) % MINUTE_CONVERTTO_SECONEDS; //seconds
   \   0000011E   0xF44F 0x6061      MOV      R0,#+3600
   \   00000122   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   00000126   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   0000012A   0x213C             MOVS     R1,#+60
   \   0000012C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000130   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000134   0x70A0             STRB     R0,[R4, #+2]
    164            return 1;
   \   00000136   0x2001             MOVS     R0,#+1
   \   00000138   0xBD70             POP      {R4-R6,PC}       ;; return
    165          }

   \                                 In section .bss, align 4
   \                     ??day_counter:
   \   00000000                      DS8 4
    166          /*
    167           * LPLD_GetWeek
    168           * 从时间结构体获得周数
    169           * 
    170           * 参数:
    171           *    TimeStamp_FormatTypeDef* realtime_init_struct
    172           *                        具体定义见TimeStamp_FormatTypeDef
    173           *
    174           * 输出:
    175           *    返回值为周数
    176           *
    177           */

   \                                 In section .text, align 2, keep-with-next
    178          uint8 LPLD_GetWeek(TimeStamp_FormatTypeDef *realtime_init_struct)
    179          {   
   \                     LPLD_GetWeek:
   \   00000000   0xB430             PUSH     {R4,R5}
    180            uint16 i;
    181            uint8 yh,yl,day,month;
    182            i = realtime_init_struct->year;
   \   00000002   0x88C3             LDRH     R3,[R0, #+6]
    183            day = realtime_init_struct->day;
   \   00000004   0x7901             LDRB     R1,[R0, #+4]
    184            month = realtime_init_struct->month;
   \   00000006   0x7940             LDRB     R0,[R0, #+5]
    185            yh = i / 100;
   \   00000008   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000000A   0x2264             MOVS     R2,#+100
   \   0000000C   0xFB93 0xF4F2      SDIV     R4,R3,R2
    186            yl = i % 100;
   \   00000010   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000012   0x2264             MOVS     R2,#+100
   \   00000014   0xFB93 0xF5F2      SDIV     R5,R3,R2
   \   00000018   0xFB02 0x3215      MLS      R2,R2,R5,R3
    187            if(yh >= 20 && yh <21)
   \   0000001C   0xF1B4 0x0314      SUBS     R3,R4,#+20
   \   00000020   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000022   0x2B01             CMP      R3,#+1
   \   00000024   0xD200             BCS.N    ??LPLD_GetWeek_0
    188            {
    189              yl +=100;
   \   00000026   0x3264             ADDS     R2,R2,#+100
    190            }
    191            i = (yl + yl/4)%7 + day + week_table[month - 1];
   \                     ??LPLD_GetWeek_0:
   \   00000028   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000002A   0x2304             MOVS     R3,#+4
   \   0000002C   0xFB92 0xF3F3      SDIV     R3,R2,R3
   \   00000030   0xFA53 0xF382      UXTAB    R3,R3,R2
   \   00000034   0x2407             MOVS     R4,#+7
   \   00000036   0xFB93 0xF5F4      SDIV     R5,R3,R4
   \   0000003A   0xFB04 0x3315      MLS      R3,R4,R5,R3
   \   0000003E   0xFA53 0xF181      UXTAB    R1,R3,R1
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x....             LDR.N    R3,??DataTable3_4
   \   00000046   0x18C3             ADDS     R3,R0,R3
   \   00000048   0xF813 0x3C01      LDRB     R3,[R3, #-1]
   \   0000004C   0xFA51 0xF383      UXTAB    R3,R1,R3
    192            if(!(yl % 4) && month < 3)
   \   00000050   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000052   0x2104             MOVS     R1,#+4
   \   00000054   0xFB92 0xF4F1      SDIV     R4,R2,R1
   \   00000058   0xFB04 0x2411      MLS      R4,R4,R1,R2
   \   0000005C   0x2C00             CMP      R4,#+0
   \   0000005E   0xD103             BNE.N    ??LPLD_GetWeek_1
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0x2803             CMP      R0,#+3
   \   00000064   0xD200             BCS.N    ??LPLD_GetWeek_1
    193            {
    194              i--;
   \   00000066   0x1E5B             SUBS     R3,R3,#+1
    195            }
    196            return (i % 7);
   \                     ??LPLD_GetWeek_1:
   \   00000068   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000006A   0x2007             MOVS     R0,#+7
   \   0000006C   0xFB93 0xF1F0      SDIV     R1,R3,R0
   \   00000070   0xFB00 0x3011      MLS      R0,R0,R1,R3
   \   00000074   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000076   0xBC30             POP      {R4,R5}
   \   00000078   0x4770             BX       LR               ;; return
    197          } 
    198          
    199          /*
    200           * LPLD_AutoInitTimeStamp
    201           * 根据编译器时钟自动初始化TimeStamp_FormatTypeDef结构体
    202           * 
    203           * 参数:
    204           *    TimeStamp_FormatTypeDef* realtime_init_struct
    205           *                        具体定义见TimeStamp_FormatTypeDef
    206           *
    207           * 输出:
    208           */

   \                                 In section .text, align 2, keep-with-next
    209          void LPLD_AutoInitTimeStamp(TimeStamp_FormatTypeDef *realtime_init_struct)
    210          {
   \                     LPLD_AutoInitTimeStamp:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    211            int i;
    212            for(i = 0;i < 12;i++)
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0xE000             B.N      ??LPLD_AutoInitTimeStamp_0
   \                     ??LPLD_AutoInitTimeStamp_1:
   \   00000008   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LPLD_AutoInitTimeStamp_0:
   \   0000000A   0x2D0C             CMP      R5,#+12
   \   0000000C   0xDA0B             BGE.N    ??LPLD_AutoInitTimeStamp_2
    213            {
    214              if(strncmp((char*)month_list[i],__DATE__,3)==0)
   \   0000000E   0x2203             MOVS     R2,#+3
   \   00000010   0x....             LDR.N    R1,??DataTable3_5
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x....             LDR.N    R3,??DataTable3_6
   \   00000016   0xFB00 0x3005      MLA      R0,R0,R5,R3
   \   0000001A   0x.... 0x....      BL       strncmp
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F2             BNE.N    ??LPLD_AutoInitTimeStamp_1
    215              {
    216                realtime_init_struct->month = i + 1;
   \   00000022   0x1C68             ADDS     R0,R5,#+1
   \   00000024   0x7160             STRB     R0,[R4, #+5]
    217                break;
    218              }
    219            }
    220            realtime_init_struct->year = GET_COMPILE_YEAR;
   \                     ??LPLD_AutoInitTimeStamp_2:
   \   00000026   0x....             LDR.N    R0,??DataTable3_5
   \   00000028   0x79C0             LDRB     R0,[R0, #+7]
   \   0000002A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000002E   0xFB10 0xF001      SMULBB   R0,R0,R1
   \   00000032   0x....             LDR.N    R1,??DataTable3_5
   \   00000034   0x7A09             LDRB     R1,[R1, #+8]
   \   00000036   0x2264             MOVS     R2,#+100
   \   00000038   0xFB11 0x0002      SMLABB   R0,R1,R2,R0
   \   0000003C   0x....             LDR.N    R1,??DataTable3_5
   \   0000003E   0x7A49             LDRB     R1,[R1, #+9]
   \   00000040   0x220A             MOVS     R2,#+10
   \   00000042   0xFB11 0x0002      SMLABB   R0,R1,R2,R0
   \   00000046   0x....             LDR.N    R1,??DataTable3_5
   \   00000048   0x7A89             LDRB     R1,[R1, #+10]
   \   0000004A   0x1840             ADDS     R0,R0,R1
   \   0000004C   0xF500 0x503C      ADD      R0,R0,#+12032
   \   00000050   0x30B0             ADDS     R0,R0,#+176
   \   00000052   0x80E0             STRH     R0,[R4, #+6]
    221            realtime_init_struct->day = GET_COMPILE_DAY;
   \   00000054   0x....             LDR.N    R0,??DataTable3_5
   \   00000056   0x7900             LDRB     R0,[R0, #+4]
   \   00000058   0x2820             CMP      R0,#+32
   \   0000005A   0xD101             BNE.N    ??LPLD_AutoInitTimeStamp_3
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE004             B.N      ??LPLD_AutoInitTimeStamp_4
   \                     ??LPLD_AutoInitTimeStamp_3:
   \   00000060   0x....             LDR.N    R0,??DataTable3_5
   \   00000062   0x7900             LDRB     R0,[R0, #+4]
   \   00000064   0x3830             SUBS     R0,R0,#+48
   \   00000066   0x210A             MOVS     R1,#+10
   \   00000068   0x4348             MULS     R0,R1,R0
   \                     ??LPLD_AutoInitTimeStamp_4:
   \   0000006A   0x....             LDR.N    R1,??DataTable3_5
   \   0000006C   0x7949             LDRB     R1,[R1, #+5]
   \   0000006E   0x1808             ADDS     R0,R1,R0
   \   00000070   0x3830             SUBS     R0,R0,#+48
   \   00000072   0x7120             STRB     R0,[R4, #+4]
    222            realtime_init_struct->week = 0;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x70E0             STRB     R0,[R4, #+3]
    223            realtime_init_struct->hour = GET_COMPILE_HOUR;
   \   00000078   0x....             LDR.N    R0,??DataTable3_7
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x210A             MOVS     R1,#+10
   \   0000007E   0x....             LDR.N    R2,??DataTable3_7
   \   00000080   0x7852             LDRB     R2,[R2, #+1]
   \   00000082   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000086   0x3810             SUBS     R0,R0,#+16
   \   00000088   0x7020             STRB     R0,[R4, #+0]
    224            realtime_init_struct->minute = GET_COMPILE_MINUTE;
   \   0000008A   0x....             LDR.N    R0,??DataTable3_7
   \   0000008C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000008E   0x210A             MOVS     R1,#+10
   \   00000090   0x....             LDR.N    R2,??DataTable3_7
   \   00000092   0x7912             LDRB     R2,[R2, #+4]
   \   00000094   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000098   0x3810             SUBS     R0,R0,#+16
   \   0000009A   0x7060             STRB     R0,[R4, #+1]
    225            realtime_init_struct->second = GET_COMPILE_SECOND;
   \   0000009C   0x....             LDR.N    R0,??DataTable3_7
   \   0000009E   0x7980             LDRB     R0,[R0, #+6]
   \   000000A0   0x210A             MOVS     R1,#+10
   \   000000A2   0x....             LDR.N    R2,??DataTable3_7
   \   000000A4   0x79D2             LDRB     R2,[R2, #+7]
   \   000000A6   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000AA   0x3810             SUBS     R0,R0,#+16
   \   000000AC   0x70A0             STRB     R0,[R4, #+2]
    226          }
   \   000000AE   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x01E13380         DC32     0x1e13380

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     month_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ??day_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     week_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     `?<Constant "Mar 20 2014">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     month_list

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     `?<Constant "08:42:19">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mar 20 2014">`:
   \   00000000   0x4D 0x61          DC8 "Mar 20 2014"
   \              0x72 0x20    
   \              0x32 0x30    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x34 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "08:42:19">`:
   \   00000000   0x30 0x38          DC8 "08:42:19"
   \              0x3A 0x34    
   \              0x32 0x3A    
   \              0x31 0x39    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    227          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  LPLD_AutoInitTimeStamp
             16 -> strncmp
       20  LPLD_DateTimeToTimeStamp
        8  LPLD_GetWeek
       16  LPLD_TimeStampToDateTime
             16 -> LPLD_GetWeek


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "08:42:19">
      12  ?<Constant "Mar 20 2014">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
     176  LPLD_AutoInitTimeStamp
     324  LPLD_DateTimeToTimeStamp
     122  LPLD_GetWeek
     314  LPLD_TimeStampToDateTime
       4  day_counter
      36  month_list
      12  month_table
      12  week_table

 
   4 bytes in section .bss
  84 bytes in section .rodata
 968 bytes in section .text
 
 968 bytes of CODE  memory
  84 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
