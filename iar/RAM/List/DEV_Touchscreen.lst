###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     20/Mar/2014  08:44:53 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_Touchscreen.c                                      #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_Touchscreen.c -D LPLD_K60 -lCN                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\ #
#                    RAM\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V #
#                    2\iar\RAM\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ia #
#                    r\..\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\lib\LPLD\DEV\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V2\iar\..\lib\uCOS-II\Source\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\..\lib\USB\common\ -I                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\lib\USB\descriptor\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\class\ -Ol -I "D:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\DEV_Touchscreen.lst                                    #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Obj #
#                    \DEV_Touchscreen.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DEV\DEV_Touchscreen.c
      1          /**
      2           * @file DEV_Touchscreen.c
      3           * @version 1.0[By LPLD]
      4           * @date 2013-09-24
      5           * @brief Touchscreen设备驱动程序
      6           *
      7           * 更改建议:可根据实际硬件修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "DEV_Touchscreen.h"
     23          
     24          static void LPLD_Touchscreen_Delay(int i);
     25          
     26          /*
     27           * LPLD_Touchscreen_Init
     28           * 配置与ADS7843芯片连接的SPI模块
     29           * 
     30           * 参数:
     31           *    无
     32           * 输出：
     33           *    无
     34           */

   \                                 In section .text, align 2, keep-with-next
     35          void LPLD_Touchscreen_Init (void)
     36          {
   \                     LPLD_Touchscreen_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
     37            SPI_InitTypeDef touch_spi_param;
     38           
     39            touch_spi_param.SPI_SPIx = TOUCHSCREEN_SPIX;
   \   00000004   0x....             LDR.N    R0,??DataTable2  ;; 0x400ac000
   \   00000006   0x9009             STR      R0,[SP, #+36]
     40            touch_spi_param.SPI_SckDivider = SPI_SCK_DIV_32;//1.56Mhz
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0xF88D 0x0029      STRB     R0,[SP, #+41]
     41            touch_spi_param.SPI_Pcs0Pin = TOUCHSCREEN_PCS0;
   \   0000000E   0x2067             MOVS     R0,#+103
   \   00000010   0xF88D 0x0034      STRB     R0,[SP, #+52]
     42            touch_spi_param.SPI_SckPin  = TOUCHSCREEN_SCK;
   \   00000014   0x2068             MOVS     R0,#+104
   \   00000016   0xF88D 0x003A      STRB     R0,[SP, #+58]
     43            touch_spi_param.SPI_MosiPin = TOUCHSCREEN_MOSI;
   \   0000001A   0x2069             MOVS     R0,#+105
   \   0000001C   0xF88D 0x003B      STRB     R0,[SP, #+59]
     44            touch_spi_param.SPI_MisoPin = TOUCHSCREEN_MISO;
   \   00000020   0x206A             MOVS     R0,#+106
   \   00000022   0xF88D 0x003C      STRB     R0,[SP, #+60]
     45            
     46            touch_spi_param.SPI_TxCompleteIntIsr = NULL;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9010             STR      R0,[SP, #+64]
     47            touch_spi_param.SPI_QueueEndIntIsr = NULL;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9011             STR      R0,[SP, #+68]
     48            touch_spi_param.SPI_TxFIFO_FillIntIsr = NULL;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9014             STR      R0,[SP, #+80]
     49            touch_spi_param.SPI_TxFIFO_UnderflowIntIsr = NULL;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9012             STR      R0,[SP, #+72]
     50            touch_spi_param.SPI_RxFIFO_DrainIntIsr = NULL;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9015             STR      R0,[SP, #+84]
     51            touch_spi_param.SPI_RxFIFO_OverflowIntIsr = NULL;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9013             STR      R0,[SP, #+76]
     52            
     53            LPLD_SPI_Init(touch_spi_param);
   \   0000003E   0xA909             ADD      R1,SP,#+36
   \   00000040   0xB084             SUB      SP,SP,#+16
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x2234             MOVS     R2,#+52
   \   00000046   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000004A   0xBC0F             POP      {R0-R3}
   \   0000004C   0x.... 0x....      BL       LPLD_SPI_Init
     54          
     55          }
   \   00000050   0xB017             ADD      SP,SP,#+92
   \   00000052   0xBD00             POP      {PC}             ;; return
     56          
     57          /*
     58           * LPLD_Touch_SendCmd
     59           * 向ADS7843芯片发送控制指令
     60           * 
     61           * 参数:
     62           *    CMD--控制命令，在DEV_Touchscreen.h中有定义
     63           *
     64           *    pcs_state--片选PCSx发送完一帧数据之后的状态
     65           *      |__0  保持低电平
     66           *      |__1  由低电平拉高到高电平     
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void LPLD_Touchscreen_SendCmd(uint8_t CMD,uint8_t pcs_state)
     69          {
   \                     LPLD_Touchscreen_SendCmd:
   \   00000000   0xB580             PUSH     {R7,LR}
     70            LPLD_SPI_Master_WriteRead(TOUCHSCREEN_SPIX,CMD,SPI_PCS0,pcs_state);
   \   00000002   0x000B             MOVS     R3,R1
   \   00000004   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable2  ;; 0x400ac000
   \   0000000E   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
     71          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     72          
     73          /*
     74           * LPLD_Touchscreen_GetCovValue
     75           * 从ADS7843芯片获得数据
     76           * 
     77           * 参数:
     78           *    CMD--控制命令，在Touch.h中有定义
     79           *
     80           *    pcs_state--片选PCSx发送完一帧数据之后的状态
     81           *      |__0  保持低电平
     82           *      |__1  由低电平拉高到高电平     
     83           */

   \                                 In section .text, align 2, keep-with-next
     84          uint8_t LPLD_Touchscreen_GetCovValue(uint8_t CMD,uint8_t pcs_state)
     85          {
   \                     LPLD_Touchscreen_GetCovValue:
   \   00000000   0xB580             PUSH     {R7,LR}
     86            return LPLD_SPI_Master_WriteRead(TOUCHSCREEN_SPIX,CMD,SPI_PCS0,pcs_state);
   \   00000002   0x000B             MOVS     R3,R1
   \   00000004   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x....             LDR.N    R0,??DataTable2  ;; 0x400ac000
   \   0000000E   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
     87          }
     88          
     89          /*
     90           * LPLD_Touchscreen_GetResult
     91           * 获得触摸屏位置的12位AD转换结果
     92           * 
     93           * 参数:
     94           *    CMD--控制命令，在Touch.h中有定义
     95           *
     96           *    pcs_state--片选PCSx发送完一帧数据之后的状态
     97           *      |__0  保持低电平
     98           *      |__1  由低电平拉高到高电平     
     99           */

   \                                 In section .text, align 2, keep-with-next
    100          uint16_t LPLD_Touchscreen_GetResult(uint8_t Cmd)
    101          {
   \                     LPLD_Touchscreen_GetResult:
   \   00000000   0xB510             PUSH     {R4,LR}
    102            uint16_t HI,LO,Data;
    103            //发送完毕CMD，CS保持在低电平状态
    104            LPLD_Touchscreen_SendCmd(Cmd,SPI_PCS_ASSERTED);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x.... 0x....      BL       LPLD_Touchscreen_SendCmd
    105            //如有必要判断忙
    106            //在此添加判断忙函数或者延时函数，延时大于125khz即可
    107            LPLD_Touchscreen_Delay(500);
   \   0000000A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000000E   0x.... 0x....      BL       LPLD_Touchscreen_Delay
    108            //获得12位精度的高8位
    109            HI=LPLD_Touchscreen_GetCovValue(LPLD_CMD_DUMMY,SPI_PCS_ASSERTED);
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       LPLD_Touchscreen_GetCovValue
   \   0000001A   0x0004             MOVS     R4,R0
    110            //获得12位精度的低4位，并将CS拉高
    111            LO=LPLD_Touchscreen_GetCovValue(LPLD_CMD_DUMMY,SPI_PCS_INACTIVE);
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       LPLD_Touchscreen_GetCovValue
    112            //合成12位的转换结果
    113            //参考ADS7843技术文档
    114            Data = ((HI<<8)&0xFF00)|LO;
   \   00000024   0xEA50 0x2004      ORRS     R0,R0,R4, LSL #+8
    115            Data = Data>>4; 
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x0900             LSRS     R0,R0,#+4
    116            return Data;
   \   0000002C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    117          }
    118          
    119          /*
    120           * LPLD_Touchscreen_Delay
    121           * Touchscreen延时函数
    122           * 
    123           * 参数:
    124           *    i--延时
    125           *    
    126           */

   \                                 In section .text, align 4, keep-with-next
    127          static void LPLD_Touchscreen_Delay(int i)
    128          {
    129            int k;
    130            for(k=0;k<i;k++)
   \                     LPLD_Touchscreen_Delay:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE001             B.N      ??LPLD_Touchscreen_Delay_0
    131              asm("nop");
   \                     ??LPLD_Touchscreen_Delay_1:
   \   00000004   0xBF00             nop
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??LPLD_Touchscreen_Delay_0:
   \   00000008   0x4281             CMP      R1,R0
   \   0000000A   0xDBFB             BLT.N    ??LPLD_Touchscreen_Delay_1
    132          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x400AC000         DC32     0x400ac000
    133          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LPLD_Touchscreen_Delay
        8  LPLD_Touchscreen_GetCovValue
               8 -> LPLD_SPI_Master_WriteRead
        8  LPLD_Touchscreen_GetResult
               8 -> LPLD_Touchscreen_Delay
               8 -> LPLD_Touchscreen_GetCovValue
               8 -> LPLD_Touchscreen_SendCmd
      112  LPLD_Touchscreen_Init
              96 -> LPLD_SPI_Init
             112 -> __aeabi_memcpy4
        8  LPLD_Touchscreen_SendCmd
               8 -> LPLD_SPI_Master_WriteRead


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
      14  LPLD_Touchscreen_Delay
      20  LPLD_Touchscreen_GetCovValue
      48  LPLD_Touchscreen_GetResult
      84  LPLD_Touchscreen_Init
      20  LPLD_Touchscreen_SendCmd

 
 190 bytes in section .text
 
 190 bytes of CODE memory

Errors: none
Warnings: none
