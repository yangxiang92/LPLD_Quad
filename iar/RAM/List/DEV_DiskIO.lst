###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     20/Mar/2014  08:42:18 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_DiskIO.c                                           #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DE #
#                    V\DEV_DiskIO.c -D LPLD_K60 -lCN                          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\ #
#                    RAM\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V #
#                    2\iar\RAM\Obj\ --no_cse --no_unroll --no_inline          #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ia #
#                    r\..\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\lib\LPLD\DEV\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V2\iar\..\lib\uCOS-II\Source\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\i #
#                    ar\..\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\..\lib\USB\common\ -I                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\lib\USB\descriptor\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\lib\ #
#                    USB\class\ -Ol -I "D:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Lis #
#                    t\DEV_DiskIO.lst                                         #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\RAM\Obj #
#                    \DEV_DiskIO.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\lib\LPLD\DEV\DEV_DiskIO.c
      1          /**
      2           * @file DEV_DiskIO.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief 磁盘设备层相关接口函数，需调用SDHC底层驱动
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。 
     21           */
     22          #include "common.h"
     23          #include "DEV_DiskIO.h"
     24          
     25          //SD卡信息全局变量
     26          extern SDCARD_STRUCT_PTR sdcard_ptr;
     27          
     28          /*
     29           * LPLD_Disk_Initialize
     30           * 磁盘初始化
     31           * 
     32           * 参数:
     33           *    drv--物理磁盘号，只能为0
     34           *
     35           * 输出:
     36           *    RES_OK--成功
     37           *    RES_ERROR--读/写错误
     38           *    RES_WRPRT--写保护
     39           *    RES_NOTRDY--未准备好
     40           *    RES_PARERR--参数错误
     41           *    RES_NONRSPNS--未响应 
     42           */
     43          

   \                                 In section .text, align 2, keep-with-next
     44          DSTATUS LPLD_Disk_Initialize(uint8 drv)
     45          {
   \                     LPLD_Disk_Initialize:
   \   00000000   0xB580             PUSH     {R7,LR}
     46            if(drv)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??LPLD_Disk_Initialize_0
     47              return RES_PARERR;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xE001             B.N      ??LPLD_Disk_Initialize_1
     48           
     49            return LPLD_SDHC_InitCard();
   \                     ??LPLD_Disk_Initialize_0:
   \   0000000C   0x.... 0x....      BL       LPLD_SDHC_InitCard
   \                     ??LPLD_Disk_Initialize_1:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
     50          }
     51          
     52          /*
     53           * LPLD_Disk_Status
     54           * 返回磁盘状态
     55           * 
     56           * 参数:
     57           *    drv--物理磁盘号，只能为0
     58           *
     59           * 输出:
     60           *    RES_OK--成功
     61           *    RES_ERROR--读/写错误
     62           *    RES_WRPRT--写保护
     63           *    RES_NOTRDY--未准备好
     64           *    RES_PARERR--参数错误
     65           *    RES_NONRSPNS--未响应 
     66           */

   \                                 In section .text, align 2, keep-with-next
     67          DSTATUS LPLD_Disk_Status(uint8 drv)
     68          {
     69            return sdcard_ptr->STATUS;
   \                     LPLD_Disk_Status:
   \   00000000   0x....             LDR.N    R0,??DataTable1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6940             LDR      R0,[R0, #+20]
   \   00000006   0x4770             BX       LR               ;; return
     70          }
     71          
     72          /*
     73           * LPLD_Disk_Read
     74           * 读磁盘的一个或多个扇区
     75           * 
     76           * 参数:
     77           *    drv--物理磁盘号，只能为0
     78           *    buff--数据读出所存的地址指针
     79           *    sector--扇区起始号
     80           *    count--所读的扇区数
     81           *
     82           * 输出:
     83           *    RES_OK--成功
     84           *    RES_ERROR--读/写错误
     85           *    RES_WRPRT--写保护
     86           *    RES_NOTRDY--未准备好
     87           *    RES_PARERR--参数错误
     88           *    RES_NONRSPNS--未响应 
     89           */

   \                                 In section .text, align 2, keep-with-next
     90          DRESULT LPLD_Disk_Read(uint8 drv, uint8* buff, uint32 sector, uint8 count)
     91          {
   \                     LPLD_Disk_Read:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001A             MOVS     R2,R3
     92            if(drv || (count == 0))
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??LPLD_Disk_Read_0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD101             BNE.N    ??LPLD_Disk_Read_1
     93              return RES_PARERR;
   \                     ??LPLD_Disk_Read_0:
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0xE003             B.N      ??LPLD_Disk_Read_2
     94          
     95            return LPLD_SDHC_ReadBlocks(buff, sector, count);
   \                     ??LPLD_Disk_Read_1:
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       LPLD_SDHC_ReadBlocks
   \                     ??LPLD_Disk_Read_2:
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
     96          }
     97          
     98          //如果磁盘系统为只读，则不编译以下函数
     99          #if	_READONLY == 0
    100          /*
    101           * LPLD_Disk_Write
    102           * 写磁盘的一个或多个扇区
    103           * 
    104           * 参数:
    105           *    drv--物理磁盘号，只能为0
    106           *    buff--数据读出所存的地址指针
    107           *    sector--扇区起始号
    108           *    count--所读的扇区数
    109           *
    110           * 输出:
    111           *    RES_OK--成功
    112           *    RES_ERROR--读/写错误
    113           *    RES_WRPRT--写保护
    114           *    RES_NOTRDY--未准备好
    115           *    RES_PARERR--参数错误
    116           *    RES_NONRSPNS--未响应 
    117           */
    118          

   \                                 In section .text, align 2, keep-with-next
    119          DRESULT LPLD_Disk_Write(uint8 drv, const uint8* buff, uint32 sector, uint8 count)
    120          {
   \                     LPLD_Disk_Write:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
   \   00000004   0x0011             MOVS     R1,R2
   \   00000006   0x001A             MOVS     R2,R3
    121            if(drv || (count == 0))
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??LPLD_Disk_Write_0
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD101             BNE.N    ??LPLD_Disk_Write_1
    122              return RES_PARERR;
   \                     ??LPLD_Disk_Write_0:
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0xE003             B.N      ??LPLD_Disk_Write_2
    123            
    124            return LPLD_SDHC_WriteBlocks((uint8*)buff, sector, count);
   \                     ??LPLD_Disk_Write_1:
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       LPLD_SDHC_WriteBlocks
   \                     ??LPLD_Disk_Write_2:
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    125          }
    126          #endif
    127          
    128          /*
    129           * LPLD_Disk_IOC
    130           * 磁盘功能控制函数
    131           * 
    132           * 参数:
    133           *    drv--物理磁盘号，只能为0
    134           *    ctrl--控制命令
    135           *    buff--IO操作所需数据的指针
    136           *
    137           * 输出:
    138           *    RES_OK--成功
    139           *    RES_ERROR--读/写错误
    140           *    RES_WRPRT--写保护
    141           *    RES_NOTRDY--未准备好
    142           *    RES_PARERR--参数错误
    143           *    RES_NONRSPNS--未响应 
    144           */

   \                                 In section .text, align 2, keep-with-next
    145          DRESULT LPLD_Disk_IOC(uint8 drv, uint8 ctrl, void* buff)
    146          {
    147            DRESULT result = RES_OK;
   \                     LPLD_Disk_IOC:
   \   00000000   0x2300             MOVS     R3,#+0
    148            
    149            if(drv)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ.N    ??LPLD_Disk_IOC_0
    150              return RES_PARERR;
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xE00B             B.N      ??LPLD_Disk_IOC_1
    151            
    152            switch(ctrl)
   \                     ??LPLD_Disk_IOC_0:
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x2900             CMP      R1,#+0
   \   00000010   0xD006             BEQ.N    ??LPLD_Disk_IOC_2
   \   00000012   0x2902             CMP      R1,#+2
   \   00000014   0xD007             BEQ.N    ??LPLD_Disk_IOC_3
   \   00000016   0xD30E             BCC.N    ??LPLD_Disk_IOC_4
   \   00000018   0x2904             CMP      R1,#+4
   \   0000001A   0xD017             BEQ.N    ??LPLD_Disk_IOC_5
   \   0000001C   0xD314             BCC.N    ??LPLD_Disk_IOC_6
   \   0000001E   0xE017             B.N      ??LPLD_Disk_IOC_7
    153            {
    154              case CTRL_SYNC:
    155                /*
    156                确定磁盘驱动已经完成写操作挂起的处理. 
    157                当磁盘IO模块有一个会写缓存，会立即擦除扇区. 该命令不能再只读模式使用.
    158                */
    159                // 在POLLING模式中，所有写操作已完成。
    160                break;
    161              case GET_SECTOR_SIZE:
    162                /*
    163                以WORD型指针变量的形式返回扇区大小.
    164                此命令不能用在可变扇区大小的配置, 
    165                _MAX_SS 为 512.
    166                */
    167                if(buff == NULL)
    168                  result = RES_PARERR;
    169                else
    170                  *(uint32*)buff = IO_SDCARD_BLOCK_SIZE;
    171                
    172                break;
    173              case GET_SECTOR_COUNT:
    174                /*
    175                以UINT32型指针变量的形式返回磁盘的可用扇区数. 
    176                该命令仅被f_mkfs函数调用以决定可创建多大的卷. 
    177                */
    178                if(buff == NULL)
    179                  result = RES_PARERR;
    180                else
    181                  *(uint32*)buff = sdcard_ptr->NUM_BLOCKS;
    182                break;
    183              case GET_BLOCK_SIZE:
    184                /*
    185                以UINT32类型的指针变量返回返回flash内存中擦除的扇区数.
    186                合法的数值为2的1至32768次方.
    187                返回1代表擦除大小或磁盘设备未知.
    188                该命令仅被f_mkfs函数调用并试图将擦除的扇区边界进行数据对齐.
    189                */
    190                result = RES_PARERR;
    191                break;
    192              case CTRL_ERASE_SECTOR:
    193                /*
    194                擦除由UINT32类型指针数组指定的flash内存,{<start sector>, <end sector>}.
    195                如果介质为非flash内存,则该命令无效.
    196                FatFs系统不会检查结果,如果擦除失败也不会影响文件函数.
    197                当_USE_ERASE为1时移动一个簇链会调用此命令.
    198                */
    199                result = RES_PARERR;
    200                break;
    201              default:
    202                return RES_PARERR;
    203              
    204            }
    205            return result;
   \                     ??LPLD_Disk_IOC_2:
   \                     ??LPLD_Disk_IOC_8:
   \   00000020   0x0018             MOVS     R0,R3
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??LPLD_Disk_IOC_1:
   \   00000024   0x4770             BX       LR               ;; return
   \                     ??LPLD_Disk_IOC_3:
   \   00000026   0x2A00             CMP      R2,#+0
   \   00000028   0xD101             BNE.N    ??LPLD_Disk_IOC_9
   \   0000002A   0x2304             MOVS     R3,#+4
   \   0000002C   0xE002             B.N      ??LPLD_Disk_IOC_10
   \                     ??LPLD_Disk_IOC_9:
   \   0000002E   0xF44F 0x7000      MOV      R0,#+512
   \   00000032   0x6010             STR      R0,[R2, #+0]
   \                     ??LPLD_Disk_IOC_10:
   \   00000034   0xE7F4             B.N      ??LPLD_Disk_IOC_8
   \                     ??LPLD_Disk_IOC_4:
   \   00000036   0x2A00             CMP      R2,#+0
   \   00000038   0xD101             BNE.N    ??LPLD_Disk_IOC_11
   \   0000003A   0x2304             MOVS     R3,#+4
   \   0000003C   0xE003             B.N      ??LPLD_Disk_IOC_12
   \                     ??LPLD_Disk_IOC_11:
   \   0000003E   0x....             LDR.N    R0,??DataTable1
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x6840             LDR      R0,[R0, #+4]
   \   00000044   0x6010             STR      R0,[R2, #+0]
   \                     ??LPLD_Disk_IOC_12:
   \   00000046   0xE7EB             B.N      ??LPLD_Disk_IOC_8
   \                     ??LPLD_Disk_IOC_6:
   \   00000048   0x2304             MOVS     R3,#+4
   \   0000004A   0xE7E9             B.N      ??LPLD_Disk_IOC_8
   \                     ??LPLD_Disk_IOC_5:
   \   0000004C   0x2304             MOVS     R3,#+4
   \   0000004E   0xE7E7             B.N      ??LPLD_Disk_IOC_8
   \                     ??LPLD_Disk_IOC_7:
   \   00000050   0x2004             MOVS     R0,#+4
   \   00000052   0xE7E7             B.N      ??LPLD_Disk_IOC_1
    206          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     sdcard_ptr
    207          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  LPLD_Disk_IOC
        8  LPLD_Disk_Initialize
             8 -> LPLD_SDHC_InitCard
        8  LPLD_Disk_Read
             8 -> LPLD_SDHC_ReadBlocks
        0  LPLD_Disk_Status
        8  LPLD_Disk_Write
             8 -> LPLD_SDHC_WriteBlocks


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      84  LPLD_Disk_IOC
      18  LPLD_Disk_Initialize
      34  LPLD_Disk_Read
       8  LPLD_Disk_Status
      34  LPLD_Disk_Write

 
 182 bytes in section .text
 
 182 bytes of CODE memory

Errors: none
Warnings: 2
