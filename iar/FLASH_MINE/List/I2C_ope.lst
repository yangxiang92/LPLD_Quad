###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:33 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\I2C_ope.c                                             #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\I2C_ope.c -D LPLD_K60 -lCN                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\I2C_ope.lst                                     #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\I2C_ope.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\I2C_ope.c
      1          /****************************************************************************** 
      2           *       I2C_ope.c ----- The code to use I2C to read and write reg of device          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  I2C_ope.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/3/30 21:55:35                                                       *
     10           ******************************************************************************/
     11          #include "I2C_ope.h"
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void I2C_WriteRegMulti(I2C_Type * i2cx, uint8 dev_address, uint8 reg_address, uint8 len, uint8 * data, uint32 delay_time)
     14          {
   \                     I2C_WriteRegMulti:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xF8DD 0x9024      LDR      R9,[SP, #+36]
     15              int i = 0;
   \   00000014   0xF05F 0x0A00      MOVS     R10,#+0
     16            //发送从机地址
     17            //I2C产生start信号
     18            LPLD_I2C_Start(i2cx);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       LPLD_I2C_Start
     19            //将从机地址写入
     20            LPLD_I2C_WriteByte(i2cx, dev_address << 1);
   \   0000001E   0x0069             LSLS     R1,R5,#+1
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       LPLD_I2C_WriteByte
     21            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       LPLD_I2C_WaitAck
     22            
     23            //写MMA7660寄存器地址
     24            LPLD_I2C_WriteByte(i2cx, reg_address);
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       LPLD_I2C_WriteByte
     25            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   0000003A   0x2101             MOVS     R1,#+1
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       LPLD_I2C_WaitAck
     26            
     27            //向寄存器中写具体数据
     28            for(i = 0; i < len; i ++)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x4682             MOV      R10,R0
   \                     ??I2C_WriteRegMulti_0:
   \   00000046   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000048   0x45BA             CMP      R10,R7
   \   0000004A   0xDA0B             BGE.N    ??I2C_WriteRegMulti_1
     29            {
     30              LPLD_I2C_WriteByte(i2cx, data[i]);
   \   0000004C   0xF81A 0x1008      LDRB     R1,[R10, R8]
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       LPLD_I2C_WriteByte
     31              LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x.... 0x....      BL       LPLD_I2C_WaitAck
     32            }
   \   0000005E   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   00000062   0xE7F0             B.N      ??I2C_WriteRegMulti_0
     33          
     34            LPLD_I2C_Stop(i2cx);
   \                     ??I2C_WriteRegMulti_1:
   \   00000064   0x0020             MOVS     R0,R4
   \   00000066   0x.... 0x....      BL       LPLD_I2C_Stop
     35          
     36            delayus(delay_time);
   \   0000006A   0x4648             MOV      R0,R9
   \   0000006C   0x.... 0x....      BL       delayus
     37          
     38          }
   \   00000070   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void I2C_WriteRegSingle(I2C_Type * i2cx, uint8 dev_address, uint8 reg_address, uint8 data, uint32 delay_time)
     41          {
   \                     I2C_WriteRegSingle:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8018      LDR      R8,[SP, #+24]
     42            //发送从机地址
     43            //I2C产生start信号
     44            LPLD_I2C_Start(i2cx);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       LPLD_I2C_Start
     45            //将从机地址写入
     46            LPLD_I2C_WriteByte(i2cx, dev_address << 1);
   \   00000016   0x0069             LSLS     R1,R5,#+1
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       LPLD_I2C_WriteByte
     47            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       LPLD_I2C_WaitAck
     48            
     49            //写MMA7660寄存器地址
     50            LPLD_I2C_WriteByte(i2cx, reg_address);
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       LPLD_I2C_WriteByte
     51            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       LPLD_I2C_WaitAck
     52            
     53            //向寄存器中写具体数据
     54            LPLD_I2C_WriteByte(i2cx, data);
   \   0000003A   0x0039             MOVS     R1,R7
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       LPLD_I2C_WriteByte
     55            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x0020             MOVS     R0,R4
   \   00000048   0x.... 0x....      BL       LPLD_I2C_WaitAck
     56          
     57            LPLD_I2C_Stop(i2cx);
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       LPLD_I2C_Stop
     58          
     59            delayus(delay_time);
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       delayus
     60          }
   \   00000058   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void I2C_ReadRegMulti(I2C_Type* i2cx, uint8 dev_address, uint8 reg_address, uint8 len, uint8 * buf, uint32 delay_time)
     63          {
   \                     I2C_ReadRegMulti:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   00000010   0xF8DD 0x9024      LDR      R9,[SP, #+36]
     64              int i =0;
   \   00000014   0xF05F 0x0A00      MOVS     R10,#+0
     65          /*     for(i = 0; i < len; i ++)
     66              {
     67                //发送从机地址
     68                //I2C产生start信号
     69                LPLD_I2C_Start(i2cx);
     70                //将从机地址写入
     71                LPLD_I2C_WriteByte(i2cx, dev_address << 1);
     72                LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
     73          
     74                //写MMA7660寄存器地址
     75                LPLD_I2C_WriteByte(i2cx, reg_address + i);
     76                LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
     77          
     78                //再次产生开始信号
     79                LPLD_I2C_ReStart(i2cx);
     80          
     81                //发送从机地址和读取位
     82                LPLD_I2C_WriteByte(i2cx, (dev_address << 1) + 1);
     83                LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
     84          
     85                //转换主机模式为读
     86                LPLD_I2C_SetMasterWR(i2cx, I2C_MRSW);
     87          
     88                //关闭应答ACK
     89                LPLD_I2C_WaitAck(i2cx, I2C_ACK_OFF);//关闭ACK
     90          
     91                //读IIC数据
     92                *buf =LPLD_I2C_ReadByte(i2cx);
     93                LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
     94          
     95                //发送停止信号
     96                LPLD_I2C_Stop(i2cx);
     97          
     98                //读IIC数据
     99                *buf = LPLD_I2C_ReadByte(i2cx);
    100          
    101                buf++;
    102          
    103                delayus(delay_time);
    104              }*/
    105          
    106              //发送从机地址
    107              //I2C产生start信号
    108              LPLD_I2C_Start(i2cx);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       LPLD_I2C_Start
    109              //将从机地址写入
    110              LPLD_I2C_WriteByte(i2cx, dev_address << 1);
   \   0000001E   0x0069             LSLS     R1,R5,#+1
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       LPLD_I2C_WriteByte
    111              LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       LPLD_I2C_WaitAck
    112          
    113              //写MMA7660寄存器地址
    114              LPLD_I2C_WriteByte(i2cx, reg_address + i);
   \   00000030   0xEB1A 0x0106      ADDS     R1,R10,R6
   \   00000034   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       LPLD_I2C_WriteByte
    115              LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       LPLD_I2C_WaitAck
    116          
    117              //再次产生开始信号
    118              LPLD_I2C_ReStart(i2cx);
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       LPLD_I2C_ReStart
    119          
    120              //发送从机地址和读取位
    121              LPLD_I2C_WriteByte(i2cx, (dev_address << 1) + 1);
   \   0000004A   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000004C   0x0068             LSLS     R0,R5,#+1
   \   0000004E   0x1C41             ADDS     R1,R0,#+1
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x.... 0x....      BL       LPLD_I2C_WriteByte
    122              LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x.... 0x....      BL       LPLD_I2C_WaitAck
    123          
    124              //转换主机模式为读
    125              LPLD_I2C_SetMasterWR(i2cx, I2C_MRSW);
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       LPLD_I2C_SetMasterWR
    126          
    127              for(i = 0; i < len; i++)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x4682             MOV      R10,R0
   \                     ??I2C_ReadRegMulti_0:
   \   0000006C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006E   0x45BA             CMP      R10,R7
   \   00000070   0xDA21             BGE.N    ??I2C_ReadRegMulti_1
    128              {
    129                  if(i < (len-1))
   \   00000072   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000074   0x1E78             SUBS     R0,R7,#+1
   \   00000076   0x4582             CMP      R10,R0
   \   00000078   0xDA04             BGE.N    ??I2C_ReadRegMulti_2
    130                  {
    131                      /* Turn on ACK */
    132                      i2cx->C1 &= (~I2C_C1_TXAK_MASK);
   \   0000007A   0x78A0             LDRB     R0,[R4, #+2]
   \   0000007C   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000080   0x70A0             STRB     R0,[R4, #+2]
   \   00000082   0xE003             B.N      ??I2C_ReadRegMulti_3
    133                  }
    134                  else
    135                  {
    136                      /* Turn off ACK */
    137                      i2cx->C1 |= I2C_C1_TXAK_MASK;            
   \                     ??I2C_ReadRegMulti_2:
   \   00000084   0x78A0             LDRB     R0,[R4, #+2]
   \   00000086   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000008A   0x70A0             STRB     R0,[R4, #+2]
    138                  }
    139          
    140                  //读IIC数据
    141                  if(i == 0)
   \                     ??I2C_ReadRegMulti_3:
   \   0000008C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000090   0xD103             BNE.N    ??I2C_ReadRegMulti_4
    142                  {
    143                      LPLD_I2C_ReadByte(i2cx);
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   00000098   0xE006             B.N      ??I2C_ReadRegMulti_5
    144                  }
    145                  else
    146                  {
    147                      *buf =LPLD_I2C_ReadByte(i2cx);
   \                     ??I2C_ReadRegMulti_4:
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   000000A0   0xF888 0x0000      STRB     R0,[R8, #+0]
    148                      buf ++;
   \   000000A4   0xF118 0x0801      ADDS     R8,R8,#+1
    149                  }
    150                  LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \                     ??I2C_ReadRegMulti_5:
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0x0020             MOVS     R0,R4
   \   000000AC   0x.... 0x....      BL       LPLD_I2C_WaitAck
    151              }
   \   000000B0   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \   000000B4   0xE7DA             B.N      ??I2C_ReadRegMulti_0
    152              //发送停止信号
    153              LPLD_I2C_Stop(i2cx);
   \                     ??I2C_ReadRegMulti_1:
   \   000000B6   0x0020             MOVS     R0,R4
   \   000000B8   0x.... 0x....      BL       LPLD_I2C_Stop
    154              *buf = LPLD_I2C_ReadByte(i2cx);
   \   000000BC   0x0020             MOVS     R0,R4
   \   000000BE   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   000000C2   0xF888 0x0000      STRB     R0,[R8, #+0]
    155          
    156              delayus(delay_time); 
   \   000000C6   0x4648             MOV      R0,R9
   \   000000C8   0x.... 0x....      BL       delayus
    157          }  
   \   000000CC   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    158          

   \                                 In section .text, align 2, keep-with-next
    159          uint8 I2C_ReadRegSingle(I2C_Type* i2cx, uint8 dev_address, uint8 reg_address, uint32 delay_time)
    160          {
   \                     I2C_ReadRegSingle:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    161            uint8 result;
    162          
    163            //发送从机地址
    164            //I2C产生start信号
    165            LPLD_I2C_Start(i2cx);
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       LPLD_I2C_Start
    166            //将从机地址写入
    167            LPLD_I2C_WriteByte(i2cx, dev_address << 1);
   \   00000012   0x0069             LSLS     R1,R5,#+1
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       LPLD_I2C_WriteByte
    168            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       LPLD_I2C_WaitAck
    169          
    170            //写MMA7660寄存器地址
    171            LPLD_I2C_WriteByte(i2cx, reg_address);
   \   00000024   0x0031             MOVS     R1,R6
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x.... 0x....      BL       LPLD_I2C_WriteByte
    172            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       LPLD_I2C_WaitAck
    173          
    174            //再次产生开始信号
    175            LPLD_I2C_ReStart(i2cx);
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       LPLD_I2C_ReStart
    176          
    177            //发送从机地址和读取位
    178            LPLD_I2C_WriteByte(i2cx, (dev_address << 1) | 0x01);
   \   0000003C   0x0068             LSLS     R0,R5,#+1
   \   0000003E   0xF050 0x0101      ORRS     R1,R0,#0x1
   \   00000042   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   0x0020             MOVS     R0,R4
   \   00000046   0x.... 0x....      BL       LPLD_I2C_WriteByte
    179            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x.... 0x....      BL       LPLD_I2C_WaitAck
    180          
    181            //转换主机模式为读
    182            LPLD_I2C_SetMasterWR(i2cx, I2C_MRSW);
   \   00000052   0x2101             MOVS     R1,#+1
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       LPLD_I2C_SetMasterWR
    183          
    184            //关闭应答ACK
    185            LPLD_I2C_WaitAck(i2cx, I2C_ACK_OFF);//关闭ACK
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0x0020             MOVS     R0,R4
   \   0000005E   0x.... 0x....      BL       LPLD_I2C_WaitAck
    186          
    187            //读IIC数据
    188            result =LPLD_I2C_ReadByte(i2cx);
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   00000068   0x4680             MOV      R8,R0
    189            LPLD_I2C_WaitAck(i2cx, I2C_ACK_ON);
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0x.... 0x....      BL       LPLD_I2C_WaitAck
    190          
    191            //发送停止信号
    192            LPLD_I2C_Stop(i2cx);
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       LPLD_I2C_Stop
    193          
    194            //读IIC数据
    195            result = LPLD_I2C_ReadByte(i2cx);
   \   00000078   0x0020             MOVS     R0,R4
   \   0000007A   0x.... 0x....      BL       LPLD_I2C_ReadByte
   \   0000007E   0x4680             MOV      R8,R0
    196          
    197            delayus(delay_time);
   \   00000080   0x0038             MOVS     R0,R7
   \   00000082   0x.... 0x....      BL       delayus
    198          
    199            return result;
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    200          
    201          }  
    202          

   \                                 In section .text, align 2, keep-with-next
    203          void I2C0_WriteRegMulti(uint8 dev_address, uint8 reg_address, uint8 len, uint8 * data, uint32 delay_time)
    204          {
   \                     I2C0_WriteRegMulti:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    205              I2C_WriteRegMulti(I2C0, dev_address, reg_address, len, data, delay_time);
   \   00000010   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \   00000014   0x9700             STR      R7,[SP, #+0]
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable7  ;; 0x40066000
   \   00000024   0x.... 0x....      BL       I2C_WriteRegMulti
    206          }
   \   00000028   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    207          

   \                                 In section .text, align 2, keep-with-next
    208          void I2C1_WriteRegMulti(uint8 dev_address, uint8 reg_address, uint8 len, uint8 * data, uint32 delay_time)
    209          {
   \                     I2C1_WriteRegMulti:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    210              I2C_WriteRegMulti(I2C1, dev_address, reg_address, len, data, delay_time);
   \   00000010   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \   00000014   0x9700             STR      R7,[SP, #+0]
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40067000
   \   00000024   0x.... 0x....      BL       I2C_WriteRegMulti
    211          }
   \   00000028   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    212          

   \                                 In section .text, align 2, keep-with-next
    213          void I2C0_WriteRegSingle(uint8 dev_address, uint8 reg_address, uint8 data, uint32 delay_time)
    214          {
   \                     I2C0_WriteRegSingle:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    215              I2C_WriteRegSingle(I2C0, dev_address, reg_address, data, delay_time);
   \   0000000A   0x9700             STR      R7,[SP, #+0]
   \   0000000C   0x0033             MOVS     R3,R6
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0x002A             MOVS     R2,R5
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x....             LDR.N    R0,??DataTable7  ;; 0x40066000
   \   0000001A   0x.... 0x....      BL       I2C_WriteRegSingle
    216          }
   \   0000001E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    217          

   \                                 In section .text, align 2, keep-with-next
    218          void I2C1_WriteRegSingle(uint8 dev_address, uint8 reg_address, uint8 data, uint32 delay_time)
    219          {
   \                     I2C1_WriteRegSingle:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
    220              I2C_WriteRegSingle(I2C1, dev_address, reg_address, data, delay_time);
   \   0000000A   0x9700             STR      R7,[SP, #+0]
   \   0000000C   0x0033             MOVS     R3,R6
   \   0000000E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   0x002A             MOVS     R2,R5
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40067000
   \   0000001A   0x.... 0x....      BL       I2C_WriteRegSingle
    221          }
   \   0000001E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    222          

   \                                 In section .text, align 2, keep-with-next
    223          void I2C0_ReadRegMulti(uint8 dev_address, uint8 reg_address, uint8 len, uint8 * buf, uint32 delay_time)
    224          {
   \                     I2C0_ReadRegMulti:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    225              I2C_ReadRegMulti(I2C0, dev_address, reg_address, len, buf, delay_time);
   \   00000010   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \   00000014   0x9700             STR      R7,[SP, #+0]
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable7  ;; 0x40066000
   \   00000024   0x.... 0x....      BL       I2C_ReadRegMulti
    226          }
   \   00000028   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void I2C1_ReadRegMulti(uint8 dev_address, uint8 reg_address, uint8 len, uint8 * buf, uint32 delay_time)
    229          {
   \                     I2C1_ReadRegMulti:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
   \   0000000C   0xF8DD 0x8020      LDR      R8,[SP, #+32]
    230              I2C_ReadRegMulti(I2C1, dev_address, reg_address, len, buf, delay_time);
   \   00000010   0xF8CD 0x8004      STR      R8,[SP, #+4]
   \   00000014   0x9700             STR      R7,[SP, #+0]
   \   00000016   0x0033             MOVS     R3,R6
   \   00000018   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40067000
   \   00000024   0x.... 0x....      BL       I2C_ReadRegMulti
    231          }
   \   00000028   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    232          

   \                                 In section .text, align 2, keep-with-next
    233          uint8 I2C0_ReadRegSingle(uint8 dev_address, uint8 reg_address, uint32 delay_time)
    234          {
   \                     I2C0_ReadRegSingle:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    235              return I2C_ReadRegSingle(I2C0, dev_address, reg_address, delay_time);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x....             LDR.N    R0,??DataTable7  ;; 0x40066000
   \   00000014   0x.... 0x....      BL       I2C_ReadRegSingle
   \   00000018   0xBD70             POP      {R4-R6,PC}       ;; return
    236          }
    237          

   \                                 In section .text, align 2, keep-with-next
    238          uint8 I2C1_ReadRegSingle(uint8 dev_address, uint8 reg_address, uint32 delay_time)
    239          {
   \                     I2C1_ReadRegSingle:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    240              return I2C_ReadRegSingle(I2C1, dev_address, reg_address, delay_time);
   \   00000008   0x0033             MOVS     R3,R6
   \   0000000A   0x002A             MOVS     R2,R5
   \   0000000C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x....             LDR.N    R0,??DataTable7_1  ;; 0x40067000
   \   00000014   0x.... 0x....      BL       I2C_ReadRegSingle
   \   00000018   0xBD70             POP      {R4-R6,PC}       ;; return
    241          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40066000         DC32     0x40066000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40067000         DC32     0x40067000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  I2C0_ReadRegMulti
             32 -> I2C_ReadRegMulti
       16  I2C0_ReadRegSingle
             16 -> I2C_ReadRegSingle
       32  I2C0_WriteRegMulti
             32 -> I2C_WriteRegMulti
       24  I2C0_WriteRegSingle
             24 -> I2C_WriteRegSingle
       32  I2C1_ReadRegMulti
             32 -> I2C_ReadRegMulti
       16  I2C1_ReadRegSingle
             16 -> I2C_ReadRegSingle
       32  I2C1_WriteRegMulti
             32 -> I2C_WriteRegMulti
       24  I2C1_WriteRegSingle
             24 -> I2C_WriteRegSingle
       32  I2C_ReadRegMulti
             32 -> LPLD_I2C_ReStart
             32 -> LPLD_I2C_ReadByte
             32 -> LPLD_I2C_SetMasterWR
             32 -> LPLD_I2C_Start
             32 -> LPLD_I2C_Stop
             32 -> LPLD_I2C_WaitAck
             32 -> LPLD_I2C_WriteByte
             32 -> delayus
       24  I2C_ReadRegSingle
             24 -> LPLD_I2C_ReStart
             24 -> LPLD_I2C_ReadByte
             24 -> LPLD_I2C_SetMasterWR
             24 -> LPLD_I2C_Start
             24 -> LPLD_I2C_Stop
             24 -> LPLD_I2C_WaitAck
             24 -> LPLD_I2C_WriteByte
             24 -> delayus
       32  I2C_WriteRegMulti
             32 -> LPLD_I2C_Start
             32 -> LPLD_I2C_Stop
             32 -> LPLD_I2C_WaitAck
             32 -> LPLD_I2C_WriteByte
             32 -> delayus
       24  I2C_WriteRegSingle
             24 -> LPLD_I2C_Start
             24 -> LPLD_I2C_Stop
             24 -> LPLD_I2C_WaitAck
             24 -> LPLD_I2C_WriteByte
             24 -> delayus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
      44  I2C0_ReadRegMulti
      26  I2C0_ReadRegSingle
      44  I2C0_WriteRegMulti
      32  I2C0_WriteRegSingle
      44  I2C1_ReadRegMulti
      26  I2C1_ReadRegSingle
      44  I2C1_WriteRegMulti
      32  I2C1_WriteRegSingle
     208  I2C_ReadRegMulti
     142  I2C_ReadRegSingle
     116  I2C_WriteRegMulti
      92  I2C_WriteRegSingle

 
 858 bytes in section .text
 
 858 bytes of CODE memory

Errors: none
Warnings: none
