###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:38 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\flash_rom.c                                           #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\flash_rom.c -D LPLD_K60 -lCN                          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\flash_rom.lst                                   #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\flash_rom.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\flash_rom.c
      1          /****************************************************************************** 
      2           *       flash_rom.c ----- The use FLASH as a EEPROM          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  flash_rom.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/30 11:12:59                                                       *
     10           ******************************************************************************/
     11          #include "flash_rom.h"
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void InitFlashRom(void)
     14          {
   \                     InitFlashRom:
   \   00000000   0xB580             PUSH     {R7,LR}
     15              LPLD_Flash_Init();
   \   00000002   0x.... 0x....      BL       LPLD_Flash_Init
     16          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
     17          

   \                                 In section .text, align 2, keep-with-next
     18          uint8 EraseFlashStorage(void)
     19          {
   \                     EraseFlashStorage:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     20              uint8 success = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     21              uint8 result = NULL;
   \   00000004   0x2500             MOVS     R5,#+0
     22          
     23              result = FlashStorageSectorErase();
   \   00000006   0x.... 0x....      BL       FlashStorageSectorErase
   \   0000000A   0x0005             MOVS     R5,R0
     24          
     25              if(result == FLASH_OK)
   \   0000000C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD102             BNE.N    ??EraseFlashStorage_0
     26              {
     27                  success = 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x0004             MOVS     R4,R0
   \   00000016   0xE001             B.N      ??EraseFlashStorage_1
     28              }
     29              else
     30              {
     31                  success = 0;
   \                     ??EraseFlashStorage_0:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0004             MOVS     R4,R0
     32              }
     33          
     34              return success;
   \                     ??EraseFlashStorage_1:
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     35          }
     36          

   \                                 In section .text, align 2, keep-with-next
     37          uint8 WriteFlashStorage(uint32 addr_offset, void * p_data, uint32 byte_size)
     38          {
   \                     WriteFlashStorage:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xF5AD 0x7D00      SUB      SP,SP,#+512
   \   00000008   0x0004             MOVS     R4,R0
   \   0000000A   0x000D             MOVS     R5,R1
   \   0000000C   0x0016             MOVS     R6,R2
     39              int i = 0;
   \   0000000E   0x2700             MOVS     R7,#+0
     40              uint8 result = 0;
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
     41              uint8 flash_storage_data_buff[FLASH_STORAGE_SIZE] = {0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0xF44F 0x7100      MOV      R1,#+512
   \   0000001A   0x.... 0x....      BL       __aeabi_memclr4
     42              
     43              if((addr_offset + byte_size) > FLASH_STORAGE_SIZE)  // 检查数据大小是否合法 
   \   0000001E   0x1930             ADDS     R0,R6,R4
   \   00000020   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000024   0xD901             BLS.N    ??WriteFlashStorage_0
     44              {
     45                  return 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xE031             B.N      ??WriteFlashStorage_1
     46              }
     47          
     48              if(!ReadFlashStorage(0, flash_storage_data_buff, FLASH_STORAGE_SIZE))  // 确定能够正确地读出flash数据 
   \                     ??WriteFlashStorage_0:
   \   0000002A   0xF44F 0x7200      MOV      R2,#+512
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       ReadFlashStorage
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD101             BNE.N    ??WriteFlashStorage_2
     49              {
     50                  return 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xE027             B.N      ??WriteFlashStorage_1
     51              }
     52          
     53              if(MemoryBytesCompare((flash_storage_data_buff + addr_offset), p_data, byte_size) != 0)
   \                     ??WriteFlashStorage_2:
   \   0000003E   0x0032             MOVS     R2,R6
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0xA800             ADD      R0,SP,#+0
   \   00000044   0x1820             ADDS     R0,R4,R0
   \   00000046   0x.... 0x....      BL       MemoryBytesCompare
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD01E             BEQ.N    ??WriteFlashStorage_3
     54              {
     55                  for(i = 0; i < byte_size; i++)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x0007             MOVS     R7,R0
   \                     ??WriteFlashStorage_4:
   \   00000052   0x42B7             CMP      R7,R6
   \   00000054   0xD205             BCS.N    ??WriteFlashStorage_5
     56                  {                                            // 把flash中需要改变的数据改变（以便于重新写入） 
     57                      flash_storage_data_buff[addr_offset + i] = ((uint8 *)p_data)[i];
   \   00000056   0x1938             ADDS     R0,R7,R4
   \   00000058   0xA900             ADD      R1,SP,#+0
   \   0000005A   0x5D7A             LDRB     R2,[R7, R5]
   \   0000005C   0x5442             STRB     R2,[R0, R1]
     58                  }
   \   0000005E   0x1C7F             ADDS     R7,R7,#+1
   \   00000060   0xE7F7             B.N      ??WriteFlashStorage_4
     59          
     60                  if(!EraseFlashStorage())
   \                     ??WriteFlashStorage_5:
   \   00000062   0x.... 0x....      BL       EraseFlashStorage
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD101             BNE.N    ??WriteFlashStorage_6
     61                  {                                            // 确定flash扇区被正常擦除 
     62                      return 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE00F             B.N      ??WriteFlashStorage_1
     63                  }
     64          
     65                  result = FlashStorageByteProgram(flash_storage_data_buff, FLASH_STORAGE_SIZE);
   \                     ??WriteFlashStorage_6:
   \   0000006E   0xF44F 0x7100      MOV      R1,#+512
   \   00000072   0xA800             ADD      R0,SP,#+0
   \   00000074   0x.... 0x....      BL       FlashStorageByteProgram
   \   00000078   0x4680             MOV      R8,R0
     66          
     67                  if(result == FLASH_OK)
   \   0000007A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000007E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000082   0xD101             BNE.N    ??WriteFlashStorage_7
     68                  {
     69                      return 1;
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0xE002             B.N      ??WriteFlashStorage_1
     70                  }
     71                  else
     72                  {
     73                      return 0;
   \                     ??WriteFlashStorage_7:
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xE000             B.N      ??WriteFlashStorage_1
     74                  }
     75              }
     76              else
     77              {
     78                  return 1;
   \                     ??WriteFlashStorage_3:
   \   0000008C   0x2001             MOVS     R0,#+1
   \                     ??WriteFlashStorage_1:
   \   0000008E   0xF50D 0x7D00      ADD      SP,SP,#+512
   \   00000092   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     79              }
     80          }
     81          

   \                                 In section .text, align 2, keep-with-next
     82          uint8 ReadFlashStorage(uint32 addr_offset, void * data_buf, uint32 byte_size)
     83          {
   \                     ReadFlashStorage:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0003             MOVS     R3,R0
     84              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     85          
     86              uint32 flash_to_read_addr = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     87              flash_to_read_addr = FLASH_STORAGE_SECTOR_ADDR + addr_offset;
   \   00000008   0xF513 0x20F5      ADDS     R0,R3,#+501760
   \   0000000C   0x0005             MOVS     R5,R0
     88          
     89              uint8 * flash_to_read_pointer = (uint8 *)flash_to_read_addr;
   \   0000000E   0x002E             MOVS     R6,R5
     90          
     91              for(i = 0; i < byte_size; i ++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0004             MOVS     R4,R0
   \                     ??ReadFlashStorage_0:
   \   00000014   0x4294             CMP      R4,R2
   \   00000016   0xD203             BCS.N    ??ReadFlashStorage_1
     92              {
     93                  ((uint8 *)data_buf)[i] = flash_to_read_pointer[i];
   \   00000018   0x5DA0             LDRB     R0,[R4, R6]
   \   0000001A   0x5460             STRB     R0,[R4, R1]
     94              }
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \   0000001E   0xE7F9             B.N      ??ReadFlashStorage_0
     95          
     96              return 1;
   \                     ??ReadFlashStorage_1:
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xBC70             POP      {R4-R6}
   \   00000024   0x4770             BX       LR               ;; return
     97          }
     98          

   \                                 In section .text, align 2, keep-with-next
     99          uint8 FlashStorageByteProgram(uint8 * data_ptr, uint32 data_size)
    100          {
   \                     FlashStorageByteProgram:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    101              return LPLD_Flash_ByteProgram(FLASH_STORAGE_SECTOR_ADDR, (uint32 *)data_ptr, data_size);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0xF45F 0x20F5      MOVS     R0,#+501760
   \   0000000E   0x.... 0x....      BL       LPLD_Flash_ByteProgram
   \   00000012   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    102          }
    103          

   \                                 In section .text, align 2, keep-with-next
    104          uint8 FlashStorageSectorErase(void)
    105          {
   \                     FlashStorageSectorErase:
   \   00000000   0xB580             PUSH     {R7,LR}
    106              return LPLD_Flash_SectorErase(FLASH_STORAGE_SECTOR_ADDR);
   \   00000002   0xF45F 0x20F5      MOVS     R0,#+501760
   \   00000006   0x.... 0x....      BL       LPLD_Flash_SectorErase
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
    107          }
    108          

   \                                 In section .text, align 2, keep-with-next
    109          int8 MemoryBytesCompare(void * source1, void * source2, uint32 size)
    110          {
   \                     MemoryBytesCompare:
   \   00000000   0xB4F0             PUSH     {R4-R7}
   \   00000002   0x0003             MOVS     R3,R0
    111              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
    112          
    113              uint8 * ptr1 = NULL;
   \   00000006   0x2500             MOVS     R5,#+0
    114              uint8 * ptr2 = NULL;
   \   00000008   0x2600             MOVS     R6,#+0
    115          
    116              ptr1 = (uint8 *)source1;
   \   0000000A   0x001D             MOVS     R5,R3
    117              ptr2 = (uint8 *)source2;
   \   0000000C   0x000E             MOVS     R6,R1
    118          
    119              for(i = 0; i < size; i++)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x0004             MOVS     R4,R0
   \                     ??MemoryBytesCompare_0:
   \   00000012   0x4294             CMP      R4,R2
   \   00000014   0xD20E             BCS.N    ??MemoryBytesCompare_1
    120              {
    121                  if(ptr1[i] > ptr2[i])
   \   00000016   0x5DA0             LDRB     R0,[R4, R6]
   \   00000018   0x5D67             LDRB     R7,[R4, R5]
   \   0000001A   0x42B8             CMP      R0,R7
   \   0000001C   0xD201             BCS.N    ??MemoryBytesCompare_2
    122                  {
    123                      return 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xE009             B.N      ??MemoryBytesCompare_3
    124                  }
    125                  else if(ptr1[i] < ptr2[i])
   \                     ??MemoryBytesCompare_2:
   \   00000022   0x5D60             LDRB     R0,[R4, R5]
   \   00000024   0x5DA7             LDRB     R7,[R4, R6]
   \   00000026   0x42B8             CMP      R0,R7
   \   00000028   0xD202             BCS.N    ??MemoryBytesCompare_4
    126                  {
    127                      return -1;
   \   0000002A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000002E   0xE002             B.N      ??MemoryBytesCompare_3
    128                  }
    129              }
   \                     ??MemoryBytesCompare_4:
   \   00000030   0x1C64             ADDS     R4,R4,#+1
   \   00000032   0xE7EE             B.N      ??MemoryBytesCompare_0
    130          
    131              return 0;
   \                     ??MemoryBytesCompare_1:
   \   00000034   0x2000             MOVS     R0,#+0
   \                     ??MemoryBytesCompare_3:
   \   00000036   0xBCF0             POP      {R4-R7}
   \   00000038   0x4770             BX       LR               ;; return
    132          }    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000101   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000111   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000121   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000131   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000141   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000151   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000161   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000171   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000181   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000191   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  EraseFlashStorage
              16 -> FlashStorageSectorErase
       16  FlashStorageByteProgram
              16 -> LPLD_Flash_ByteProgram
        8  FlashStorageSectorErase
               8 -> LPLD_Flash_SectorErase
        8  InitFlashRom
               8 -> LPLD_Flash_Init
       16  MemoryBytesCompare
       12  ReadFlashStorage
      536  WriteFlashStorage
             536 -> EraseFlashStorage
             536 -> FlashStorageByteProgram
             536 -> MemoryBytesCompare
             536 -> ReadFlashStorage
             536 -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     512  ?<Constant {0}>
      34  EraseFlashStorage
      20  FlashStorageByteProgram
      12  FlashStorageSectorErase
       8  InitFlashRom
      58  MemoryBytesCompare
      38  ReadFlashStorage
     150  WriteFlashStorage

 
 512 bytes in section .rodata
 320 bytes in section .text
 
 320 bytes of CODE  memory
 512 bytes of CONST memory

Errors: none
Warnings: none
