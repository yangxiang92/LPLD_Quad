###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:32 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\ #
#                    LPLD\HW\HW_SPI.c                                         #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\ #
#                    LPLD\HW\HW_SPI.c -D LPLD_K60 -lCN                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\HW_SPI.lst                                      #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\HW_SPI.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\LPLD\HW\HW_SPI.c
      1          /**
      2           * @file HW_SPI.c
      3           * @version 3.03[By LPLD]
      4           * @date 2014-2-10
      5           * @brief SPI底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0941             LSRS     R1,R0,#+5
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable8  ;; 0xe000e100
   \   0000000A   0x2301             MOVS     R3,#+1
   \   0000000C   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   00000010   0x40A3             LSLS     R3,R3,R4
   \   00000012   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \   00000016   0xBC10             POP      {R4}
   \   00000018   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0941             LSRS     R1,R0,#+5
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable8_1  ;; 0xe000e180
   \   0000000A   0x2301             MOVS     R3,#+1
   \   0000000C   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   00000010   0x40A3             LSLS     R3,R3,R4
   \   00000012   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \   00000016   0xBC10             POP      {R4}
   \   00000018   0x4770             BX       LR               ;; return
     23          #include "HW_SPI.h"
     24          

   \                                 In section .bss, align 4
     25          SPI_ISR_CALLBACK SPI0_ISR[6];
   \                     SPI0_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     26          SPI_ISR_CALLBACK SPI1_ISR[6];
   \                     SPI1_ISR:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     27          SPI_ISR_CALLBACK SPI2_ISR[6];
   \                     SPI2_ISR:
   \   00000000                      DS8 24
     28          
     29          /*
     30           * LPLD_SPI_Init
     31           * SPI初始化函数,在该函数中选择SPI通道，初始化SPI SCK总线时钟
     32           * 选择使能Tx，Rx FIFO，选择开启SPI外设的发送完成，发送队列结束，
     33           * Tx FIFO队列为空，Rx FIFO队列溢出，选择FIFO的中断方式和DMA请求等
     34           * 
     35           * 参数:
     36           *    spi_init_structure--SPI初始化结构体，
     37           *                        具体定义见SPI_InitTypeDef
     38           *
     39           * 输出:
     40           *    0--配置错误
     41           *    1--配置成功
     42           */

   \                                 In section .text, align 2, keep-with-next
     43          uint8 LPLD_SPI_Init(SPI_InitTypeDef spi_init_structure)
     44          {
   \                     LPLD_SPI_Init:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000006   0xB087             SUB      SP,SP,#+28
     45            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000008   0x9910             LDR      R1,[SP, #+64]
     46            uint8 spi_mode = spi_init_structure.SPI_ModeSelect;
   \   0000000A   0xF89D 0x0044      LDRB     R0,[SP, #+68]
   \   0000000E   0xF88D 0x0018      STRB     R0,[SP, #+24]
     47            uint8 sck_div = spi_init_structure.SPI_SckDivider; 
   \   00000012   0xF89D 0x0045      LDRB     R0,[SP, #+69]
   \   00000016   0xF88D 0x000B      STRB     R0,[SP, #+11]
     48            boolean txFIFO_enable = spi_init_structure.SPI_EnableTxFIFO;
   \   0000001A   0xF89D 0x0046      LDRB     R0,[SP, #+70]
   \   0000001E   0xF88D 0x000A      STRB     R0,[SP, #+10]
     49            boolean rxFIFO_enable = spi_init_structure.SPI_EnableRxFIFO;
   \   00000022   0xF89D 0x0047      LDRB     R0,[SP, #+71]
   \   00000026   0xF88D 0x0009      STRB     R0,[SP, #+9]
     50            //定义SPI外设中断变量
     51            boolean tx_complete_int = spi_init_structure.SPI_TxCompleteIntEnable;
   \   0000002A   0xF89D 0x2048      LDRB     R2,[SP, #+72]
     52            boolean QueueEnd_Request_int = spi_init_structure.SPI_QueueEndIntEnable; 
   \   0000002E   0xF89D 0x3049      LDRB     R3,[SP, #+73]
     53            boolean txFIFO_underflow_int = spi_init_structure.SPI_TxFIFO_UnderflowIntEnable;
   \   00000032   0xF89D 0x404A      LDRB     R4,[SP, #+74]
     54            boolean rxFIFO_overflow_int = spi_init_structure.SPI_RxFIFO_OverflowIntEnable;
   \   00000036   0xF89D 0x504B      LDRB     R5,[SP, #+75]
     55            boolean txFIFO_Fill_int = spi_init_structure.SPI_TxFIFO_FillIntEnable;
   \   0000003A   0xF89D 0x604C      LDRB     R6,[SP, #+76]
     56            boolean rxFIFO_Drain_int = spi_init_structure.SPI_RxFIFO_DrainIntEnable; 
   \   0000003E   0xF89D 0x704D      LDRB     R7,[SP, #+77]
     57            boolean txFIFO_req = spi_init_structure.SPI_TxFIFO_RequestSelect;
   \   00000042   0xF89D 0xE04E      LDRB     LR,[SP, #+78]
     58            boolean rxFIFO_req = spi_init_structure.SPI_RxFIFO_RequestSelect;
   \   00000046   0xF89D 0x804F      LDRB     R8,[SP, #+79]
     59            //选择SPI引脚
     60            PortPinsEnum_Type miso_pin = spi_init_structure.SPI_MisoPin;//MISO 
   \   0000004A   0xF89D 0x0058      LDRB     R0,[SP, #+88]
   \   0000004E   0xF88D 0x0004      STRB     R0,[SP, #+4]
     61            PortPinsEnum_Type mosi_pin = spi_init_structure.SPI_MosiPin;//MOSI
   \   00000052   0xF89D 0x0057      LDRB     R0,[SP, #+87]
   \   00000056   0xF88D 0x0003      STRB     R0,[SP, #+3]
     62            PortPinsEnum_Type sck_pin = spi_init_structure.SPI_SckPin;  //SCK
   \   0000005A   0xF89D 0x0056      LDRB     R0,[SP, #+86]
   \   0000005E   0xF88D 0x0002      STRB     R0,[SP, #+2]
     63            PortPinsEnum_Type pcs0_pin = spi_init_structure.SPI_Pcs0Pin;//PCS0
   \   00000062   0xF89D 0x0050      LDRB     R0,[SP, #+80]
   \   00000066   0xF88D 0x0001      STRB     R0,[SP, #+1]
     64            PortPinsEnum_Type pcs1_pin = spi_init_structure.SPI_Pcs1Pin;//PCS1
   \   0000006A   0xF89D 0x0051      LDRB     R0,[SP, #+81]
   \   0000006E   0xF88D 0x0000      STRB     R0,[SP, #+0]
     65            PortPinsEnum_Type pcs2_pin = spi_init_structure.SPI_Pcs2Pin;//PCS2
   \   00000072   0xF89D 0x0052      LDRB     R0,[SP, #+82]
   \   00000076   0xF88D 0x0006      STRB     R0,[SP, #+6]
     66            PortPinsEnum_Type pcs3_pin = spi_init_structure.SPI_Pcs3Pin;//PCS3
   \   0000007A   0xF89D 0x0053      LDRB     R0,[SP, #+83]
   \   0000007E   0xF88D 0x0005      STRB     R0,[SP, #+5]
     67            PortPinsEnum_Type pcs4_pin = spi_init_structure.SPI_Pcs4Pin;//PCS4
   \   00000082   0xF89D 0x0054      LDRB     R0,[SP, #+84]
   \   00000086   0xF88D 0x0008      STRB     R0,[SP, #+8]
     68            PortPinsEnum_Type pcs5_pin = spi_init_structure.SPI_Pcs5Pin;//PCS5
   \   0000008A   0xF89D 0x0055      LDRB     R0,[SP, #+85]
   \   0000008E   0xF88D 0x0007      STRB     R0,[SP, #+7]
     69            //定义中断回掉函数
     70            SPI_ISR_CALLBACK TxComplete_isr = spi_init_structure.SPI_TxCompleteIntIsr;
   \   00000092   0x9817             LDR      R0,[SP, #+92]
   \   00000094   0x9005             STR      R0,[SP, #+20]
     71            SPI_ISR_CALLBACK QueueEndReq_isr = spi_init_structure.SPI_QueueEndIntIsr;
   \   00000096   0x9818             LDR      R0,[SP, #+96]
   \   00000098   0x9004             STR      R0,[SP, #+16]
     72            SPI_ISR_CALLBACK UnderflowInt_isr = spi_init_structure.SPI_TxFIFO_UnderflowIntIsr;
   \   0000009A   0x9819             LDR      R0,[SP, #+100]
   \   0000009C   0x9003             STR      R0,[SP, #+12]
     73            SPI_ISR_CALLBACK OverflowInt_isr = spi_init_structure.SPI_RxFIFO_OverflowIntIsr;
   \   0000009E   0xF8DD 0xC068      LDR      R12,[SP, #+104]
     74            SPI_ISR_CALLBACK FillInt_isr = spi_init_structure.SPI_TxFIFO_FillIntIsr;
   \   000000A2   0xF8DD 0x906C      LDR      R9,[SP, #+108]
     75            SPI_ISR_CALLBACK DrainInt_isr = spi_init_structure.SPI_RxFIFO_DrainIntIsr;
   \   000000A6   0xF8DD 0xA070      LDR      R10,[SP, #+112]
     76            //检测参数
     77            ASSERT(spi_mode <= SPI_MODE_MASTER);
     78            ASSERT(sck_div <= SPI_SCK_DIV_32768);
     79          
     80            if(spix == SPI0)
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable8_2  ;; 0x4002c000
   \   000000AE   0x4281             CMP      R1,R0
   \   000000B0   0xF040 0x8095      BNE.W    ??LPLD_SPI_Init_0
     81            {
     82              SIM->SCGC6 |= SIM_SCGC6_DSPI0_MASK;  
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000BE   0x.... 0x....      LDR.W    R11,??DataTable8_3  ;; 0x4004803c
   \   000000C2   0xF8CB 0x0000      STR      R0,[R11, #+0]
     83          
     84              //选择PCS0
     85              if(pcs0_pin == PTA14)
   \   000000C6   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000CA   0x280E             CMP      R0,#+14
   \   000000CC   0xD106             BNE.N    ??LPLD_SPI_Init_1
     86              {
     87                PORTA->PCR[14] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable8_4  ;; 0x40049038
   \   000000D2   0xF44F 0x7B10      MOV      R11,#+576
   \   000000D6   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000000DA   0xE005             B.N      ??LPLD_SPI_Init_2
     88              }
     89              else//pcs0_pin == PTC4
     90              {
     91                PORTC->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_1:
   \   000000DC   0x.... 0x....      LDR.W    R0,??DataTable8_5  ;; 0x4004b010
   \   000000E0   0xF44F 0x7B10      MOV      R11,#+576
   \   000000E4   0xF8C0 0xB000      STR      R11,[R0, #+0]
     92              }
     93              //选择PCS1
     94              if(pcs1_pin == PTC3)
   \                     ??LPLD_SPI_Init_2:
   \   000000E8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000EC   0x283F             CMP      R0,#+63
   \   000000EE   0xD106             BNE.N    ??LPLD_SPI_Init_3
     95              {
     96                PORTC->PCR[3]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable8_6  ;; 0x4004b00c
   \   000000F4   0xF44F 0x7B10      MOV      R11,#+576
   \   000000F8   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000000FC   0xE005             B.N      ??LPLD_SPI_Init_4
     97              }
     98              else //pcs1_pin == PTD4
     99              {
    100                PORTD->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_3:
   \   000000FE   0x.... 0x....      LDR.W    R0,??DataTable8_7  ;; 0x4004c010
   \   00000102   0xF44F 0x7B10      MOV      R11,#+576
   \   00000106   0xF8C0 0xB000      STR      R11,[R0, #+0]
    101              }
    102              //选择PCS2
    103              if(pcs2_pin == PTC2)
   \                     ??LPLD_SPI_Init_4:
   \   0000010A   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000010E   0x283E             CMP      R0,#+62
   \   00000110   0xD106             BNE.N    ??LPLD_SPI_Init_5
    104              {
    105                PORTC->PCR[2]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000112   0x.... 0x....      LDR.W    R0,??DataTable8_8  ;; 0x4004b008
   \   00000116   0xF44F 0x7B10      MOV      R11,#+576
   \   0000011A   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   0000011E   0xE005             B.N      ??LPLD_SPI_Init_6
    106              }
    107              else //pcs2_pin == PTD5
    108              {
    109                PORTD->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_5:
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable8_9  ;; 0x4004c014
   \   00000124   0xF44F 0x7B10      MOV      R11,#+576
   \   00000128   0xF8C0 0xB000      STR      R11,[R0, #+0]
    110              }
    111              //选择PCS3
    112              if(pcs3_pin == PTC1)
   \                     ??LPLD_SPI_Init_6:
   \   0000012C   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000130   0x283D             CMP      R0,#+61
   \   00000132   0xD106             BNE.N    ??LPLD_SPI_Init_7
    113              {
    114                PORTC->PCR[1]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable8_10  ;; 0x4004b004
   \   00000138   0xF44F 0x7B10      MOV      R11,#+576
   \   0000013C   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   00000140   0xE005             B.N      ??LPLD_SPI_Init_8
    115              }
    116              else //pcs3_pin == PTD6
    117              {
    118                PORTD->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_7:
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable8_11  ;; 0x4004c018
   \   00000146   0xF44F 0x7B10      MOV      R11,#+576
   \   0000014A   0xF8C0 0xB000      STR      R11,[R0, #+0]
    119              }
    120              //选择PCS4
    121              if(pcs4_pin == PTC0)
   \                     ??LPLD_SPI_Init_8:
   \   0000014E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000152   0x283C             CMP      R0,#+60
   \   00000154   0xD105             BNE.N    ??LPLD_SPI_Init_9
    122              {
    123                PORTC->PCR[0]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000156   0x.... 0x....      LDR.W    R0,??DataTable8_12  ;; 0x4004b000
   \   0000015A   0xF44F 0x7B10      MOV      R11,#+576
   \   0000015E   0xF8C0 0xB000      STR      R11,[R0, #+0]
    124              }
    125              //选择PCS5
    126              if(pcs5_pin == PTB23)
   \                     ??LPLD_SPI_Init_9:
   \   00000162   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   00000166   0x2837             CMP      R0,#+55
   \   00000168   0xD105             BNE.N    ??LPLD_SPI_Init_10
    127              {
    128                PORTB->PCR[23] = 0 | PORT_PCR_MUX(3) | PORT_PCR_DSE_MASK;
   \   0000016A   0x.... 0x....      LDR.W    R0,??DataTable8_13  ;; 0x4004a05c
   \   0000016E   0xF44F 0x7B50      MOV      R11,#+832
   \   00000172   0xF8C0 0xB000      STR      R11,[R0, #+0]
    129              }
    130          
    131              //选择SCK
    132              if(sck_pin == PTA15)
   \                     ??LPLD_SPI_Init_10:
   \   00000176   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000017A   0x280F             CMP      R0,#+15
   \   0000017C   0xD106             BNE.N    ??LPLD_SPI_Init_11
    133              {
    134                PORTA->PCR[15] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \   0000017E   0x.... 0x....      LDR.W    R0,??DataTable8_14  ;; 0x4004903c
   \   00000182   0xF44F 0x7B10      MOV      R11,#+576
   \   00000186   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   0000018A   0xE005             B.N      ??LPLD_SPI_Init_12
    135              }
    136              else //sck_pin == PTC5
    137              {
    138                PORTC->PCR[5] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_11:
   \   0000018C   0x.... 0x....      LDR.W    R0,??DataTable8_15  ;; 0x4004b014
   \   00000190   0xF44F 0x7B10      MOV      R11,#+576
   \   00000194   0xF8C0 0xB000      STR      R11,[R0, #+0]
    139              }
    140              //选择MOSI
    141              if(mosi_pin == PTA16)
   \                     ??LPLD_SPI_Init_12:
   \   00000198   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000019C   0x2810             CMP      R0,#+16
   \   0000019E   0xD106             BNE.N    ??LPLD_SPI_Init_13
    142              {
    143                PORTA->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   000001A0   0x.... 0x....      LDR.W    R0,??DataTable8_16  ;; 0x40049040
   \   000001A4   0xF44F 0x7B10      MOV      R11,#+576
   \   000001A8   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000001AC   0xE005             B.N      ??LPLD_SPI_Init_14
    144              }
    145              else //mosi_pin == PTC6
    146              {
    147                PORTC->PCR[6] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_13:
   \   000001AE   0x.... 0x....      LDR.W    R0,??DataTable8_17  ;; 0x4004b018
   \   000001B2   0xF44F 0x7B10      MOV      R11,#+576
   \   000001B6   0xF8C0 0xB000      STR      R11,[R0, #+0]
    148              }
    149              //选择MISO
    150              if(miso_pin == PTA17)
   \                     ??LPLD_SPI_Init_14:
   \   000001BA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001BE   0x2811             CMP      R0,#+17
   \   000001C0   0xD106             BNE.N    ??LPLD_SPI_Init_15
    151              {
    152                PORTA->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
   \   000001C2   0x.... 0x....      LDR.W    R0,??DataTable8_18  ;; 0x40049044
   \   000001C6   0xF44F 0x7B00      MOV      R11,#+512
   \   000001CA   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000001CE   0xE0DB             B.N      ??LPLD_SPI_Init_16
    153              }
    154              else //miso_pin == PTC7
    155              {
    156                PORTC->PCR[7] = 0 | PORT_PCR_MUX(2); //SIN
   \                     ??LPLD_SPI_Init_15:
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable8_19  ;; 0x4004b01c
   \   000001D4   0xF44F 0x7B00      MOV      R11,#+512
   \   000001D8   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000001DC   0xE0D4             B.N      ??LPLD_SPI_Init_16
    157              } 
    158            
    159            }
    160            else if(spix == SPI1)
   \                     ??LPLD_SPI_Init_0:
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable8_20  ;; 0x4002d000
   \   000001E2   0x4281             CMP      R1,R0
   \   000001E4   0xD172             BNE.N    ??LPLD_SPI_Init_17
    161            {
    162              SIM->SCGC6 |= SIM_SCGC6_SPI1_MASK;
   \   000001E6   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   000001EA   0x6800             LDR      R0,[R0, #+0]
   \   000001EC   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   000001F0   0x.... 0x....      LDR.W    R11,??DataTable8_3  ;; 0x4004803c
   \   000001F4   0xF8CB 0x0000      STR      R0,[R11, #+0]
    163              //选择PCS0
    164              if(pcs0_pin == PTB10)
   \   000001F8   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001FC   0x282A             CMP      R0,#+42
   \   000001FE   0xD106             BNE.N    ??LPLD_SPI_Init_18
    165              {
    166                PORTB->PCR[10] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000200   0x.... 0x....      LDR.W    R0,??DataTable8_21  ;; 0x4004a028
   \   00000204   0xF44F 0x7B10      MOV      R11,#+576
   \   00000208   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   0000020C   0xE005             B.N      ??LPLD_SPI_Init_19
    167              }
    168              else//pcs0_pin == PTE4
    169              {
    170                PORTE->PCR[4] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_18:
   \   0000020E   0x.... 0x....      LDR.W    R0,??DataTable8_22  ;; 0x4004d010
   \   00000212   0xF44F 0x7B10      MOV      R11,#+576
   \   00000216   0xF8C0 0xB000      STR      R11,[R0, #+0]
    171              }
    172              //选择PCS1
    173              if(pcs1_pin == PTB9)
   \                     ??LPLD_SPI_Init_19:
   \   0000021A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000021E   0x2829             CMP      R0,#+41
   \   00000220   0xD106             BNE.N    ??LPLD_SPI_Init_20
    174              {
    175                PORTB->PCR[9]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000222   0x.... 0x....      LDR.W    R0,??DataTable8_23  ;; 0x4004a024
   \   00000226   0xF44F 0x7B10      MOV      R11,#+576
   \   0000022A   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   0000022E   0xE005             B.N      ??LPLD_SPI_Init_21
    176              }
    177              else //pcs1_pin == PTE0
    178              {
    179                PORTE->PCR[0] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_20:
   \   00000230   0x.... 0x....      LDR.W    R0,??DataTable8_24  ;; 0x4004d000
   \   00000234   0xF44F 0x7B10      MOV      R11,#+576
   \   00000238   0xF8C0 0xB000      STR      R11,[R0, #+0]
    180              }
    181              //选择PCS2
    182              if(pcs2_pin == PTE5)
   \                     ??LPLD_SPI_Init_21:
   \   0000023C   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000240   0x2881             CMP      R0,#+129
   \   00000242   0xD105             BNE.N    ??LPLD_SPI_Init_22
    183              {
    184                PORTE->PCR[5]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000244   0x.... 0x....      LDR.W    R0,??DataTable8_25  ;; 0x4004d014
   \   00000248   0xF44F 0x7B10      MOV      R11,#+576
   \   0000024C   0xF8C0 0xB000      STR      R11,[R0, #+0]
    185              }
    186          
    187              //选择PCS3
    188              if(pcs3_pin == PTE6)
   \                     ??LPLD_SPI_Init_22:
   \   00000250   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000254   0x2882             CMP      R0,#+130
   \   00000256   0xD105             BNE.N    ??LPLD_SPI_Init_23
    189              {
    190                PORTE->PCR[6]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000258   0x.... 0x....      LDR.W    R0,??DataTable8_26  ;; 0x4004d018
   \   0000025C   0xF44F 0x7B10      MOV      R11,#+576
   \   00000260   0xF8C0 0xB000      STR      R11,[R0, #+0]
    191              }
    192          
    193              //选择SCK
    194              if(sck_pin == PTB11)
   \                     ??LPLD_SPI_Init_23:
   \   00000264   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000268   0x282B             CMP      R0,#+43
   \   0000026A   0xD106             BNE.N    ??LPLD_SPI_Init_24
    195              {
    196                PORTB->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable8_27  ;; 0x4004a02c
   \   00000270   0xF44F 0x7B10      MOV      R11,#+576
   \   00000274   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   00000278   0xE005             B.N      ??LPLD_SPI_Init_25
    197              }
    198              else //sck_pin == PTE2
    199              {
    200                PORTE->PCR[2] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_24:
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable8_28  ;; 0x4004d008
   \   0000027E   0xF44F 0x7B10      MOV      R11,#+576
   \   00000282   0xF8C0 0xB000      STR      R11,[R0, #+0]
    201              }
    202              //选择MOSI
    203              if(mosi_pin == PTB16)
   \                     ??LPLD_SPI_Init_25:
   \   00000286   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   0000028A   0x2830             CMP      R0,#+48
   \   0000028C   0xD106             BNE.N    ??LPLD_SPI_Init_26
    204              {
    205                PORTB->PCR[16] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   0000028E   0x.... 0x....      LDR.W    R0,??DataTable8_29  ;; 0x4004a040
   \   00000292   0xF44F 0x7B10      MOV      R11,#+576
   \   00000296   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   0000029A   0xE005             B.N      ??LPLD_SPI_Init_27
    206              }
    207              else //mosi_pin == PTE1
    208              {
    209                PORTE->PCR[1] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_26:
   \   0000029C   0x.... 0x....      LDR.W    R0,??DataTable8_30  ;; 0x4004d004
   \   000002A0   0xF44F 0x7B10      MOV      R11,#+576
   \   000002A4   0xF8C0 0xB000      STR      R11,[R0, #+0]
    210              }
    211              //选择MISO
    212              if(miso_pin == PTB17)
   \                     ??LPLD_SPI_Init_27:
   \   000002A8   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000002AC   0x2831             CMP      R0,#+49
   \   000002AE   0xD106             BNE.N    ??LPLD_SPI_Init_28
    213              {
    214                PORTB->PCR[17] = 0 | PORT_PCR_MUX(2); //SIN
   \   000002B0   0x.... 0x....      LDR.W    R0,??DataTable8_31  ;; 0x4004a044
   \   000002B4   0xF44F 0x7B00      MOV      R11,#+512
   \   000002B8   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000002BC   0xE064             B.N      ??LPLD_SPI_Init_16
    215              }
    216              else //miso_pin == PTE3
    217              {
    218                PORTE->PCR[3] = 0 | PORT_PCR_MUX(2); //SIN
   \                     ??LPLD_SPI_Init_28:
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable8_32  ;; 0x4004d00c
   \   000002C2   0xF44F 0x7B00      MOV      R11,#+512
   \   000002C6   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000002CA   0xE05D             B.N      ??LPLD_SPI_Init_16
    219              } 
    220            }
    221            else if(spix == SPI2)
   \                     ??LPLD_SPI_Init_17:
   \   000002CC   0x.... 0x....      LDR.W    R0,??DataTable8_33  ;; 0x400ac000
   \   000002D0   0x4281             CMP      R1,R0
   \   000002D2   0xD157             BNE.N    ??LPLD_SPI_Init_29
    222            {
    223              SIM->SCGC3 |= SIM_SCGC3_SPI2_MASK;
   \   000002D4   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x40048030
   \   000002D8   0x6800             LDR      R0,[R0, #+0]
   \   000002DA   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000002DE   0x.... 0x....      LDR.W    R11,??DataTable8_34  ;; 0x40048030
   \   000002E2   0xF8CB 0x0000      STR      R0,[R11, #+0]
    224              //选择PCS0
    225              if(pcs0_pin == PTD11)
   \   000002E6   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000002EA   0x2867             CMP      R0,#+103
   \   000002EC   0xD106             BNE.N    ??LPLD_SPI_Init_30
    226              {
    227                PORTD->PCR[11] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   000002EE   0x.... 0x....      LDR.W    R0,??DataTable8_35  ;; 0x4004c02c
   \   000002F2   0xF44F 0x7B10      MOV      R11,#+576
   \   000002F6   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   000002FA   0xE005             B.N      ??LPLD_SPI_Init_31
    228              }
    229              else//pcs0_pin == PTB20
    230              {
    231                PORTB->PCR[20] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \                     ??LPLD_SPI_Init_30:
   \   000002FC   0x.... 0x....      LDR.W    R0,??DataTable8_36  ;; 0x4004a050
   \   00000300   0xF44F 0x7B10      MOV      R11,#+576
   \   00000304   0xF8C0 0xB000      STR      R11,[R0, #+0]
    232              }
    233              //选择PCS1
    234              if(pcs1_pin == PTD15)
   \                     ??LPLD_SPI_Init_31:
   \   00000308   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000030C   0x286B             CMP      R0,#+107
   \   0000030E   0xD105             BNE.N    ??LPLD_SPI_Init_32
    235              {
    236                PORTD->PCR[15]  = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000310   0x.... 0x....      LDR.W    R0,??DataTable8_37  ;; 0x4004c03c
   \   00000314   0xF44F 0x7B10      MOV      R11,#+576
   \   00000318   0xF8C0 0xB000      STR      R11,[R0, #+0]
    237              }
    238          
    239              //选择SCK
    240              if(sck_pin == PTD12)
   \                     ??LPLD_SPI_Init_32:
   \   0000031C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000320   0x2868             CMP      R0,#+104
   \   00000322   0xD106             BNE.N    ??LPLD_SPI_Init_33
    241              {
    242                PORTD->PCR[12] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable8_38  ;; 0x4004c030
   \   00000328   0xF44F 0x7B10      MOV      R11,#+576
   \   0000032C   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   00000330   0xE005             B.N      ??LPLD_SPI_Init_34
    243              }
    244              else //sck_pin == PTB21
    245              {
    246                PORTB->PCR[21] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SCK
   \                     ??LPLD_SPI_Init_33:
   \   00000332   0x.... 0x....      LDR.W    R0,??DataTable8_39  ;; 0x4004a054
   \   00000336   0xF44F 0x7B10      MOV      R11,#+576
   \   0000033A   0xF8C0 0xB000      STR      R11,[R0, #+0]
    247              }
    248              //选择MOSI
    249              if(mosi_pin == PTD13)
   \                     ??LPLD_SPI_Init_34:
   \   0000033E   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000342   0x2869             CMP      R0,#+105
   \   00000344   0xD106             BNE.N    ??LPLD_SPI_Init_35
    250              {
    251                PORTD->PCR[13] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \   00000346   0x.... 0x....      LDR.W    R0,??DataTable8_40  ;; 0x4004c034
   \   0000034A   0xF44F 0x7B10      MOV      R11,#+576
   \   0000034E   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   00000352   0xE005             B.N      ??LPLD_SPI_Init_36
    252              }
    253              else //mosi_pin == PTB22
    254              {
    255                PORTB->PCR[22] = 0 | PORT_PCR_MUX(2) | PORT_PCR_DSE_MASK;//SOUT
   \                     ??LPLD_SPI_Init_35:
   \   00000354   0x.... 0x....      LDR.W    R0,??DataTable8_41  ;; 0x4004a058
   \   00000358   0xF44F 0x7B10      MOV      R11,#+576
   \   0000035C   0xF8C0 0xB000      STR      R11,[R0, #+0]
    256              }
    257              //选择MISO
    258              if(miso_pin == PTD14)
   \                     ??LPLD_SPI_Init_36:
   \   00000360   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000364   0x286A             CMP      R0,#+106
   \   00000366   0xD106             BNE.N    ??LPLD_SPI_Init_37
    259              {
    260                PORTD->PCR[14] = 0 | PORT_PCR_MUX(2); //SIN
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable8_42  ;; 0x4004c038
   \   0000036C   0xF44F 0x7B00      MOV      R11,#+512
   \   00000370   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   00000374   0xE008             B.N      ??LPLD_SPI_Init_16
    261              }
    262              else //miso_pin == PTB23
    263              {
    264                PORTB->PCR[23] = 0 | PORT_PCR_MUX(2); //SIN
   \                     ??LPLD_SPI_Init_37:
   \   00000376   0x.... 0x....      LDR.W    R0,??DataTable8_13  ;; 0x4004a05c
   \   0000037A   0xF44F 0x7B00      MOV      R11,#+512
   \   0000037E   0xF8C0 0xB000      STR      R11,[R0, #+0]
   \   00000382   0xE001             B.N      ??LPLD_SPI_Init_16
    265              } 
    266            }
    267            else
    268              return 0;
   \                     ??LPLD_SPI_Init_29:
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0xE176             B.N      ??LPLD_SPI_Init_38
    269            //配置SPI MCR寄存器
    270            spix->MCR = 0 & (~SPI_MCR_MDIS_MASK)        
    271                          |SPI_MCR_HALT_MASK        
    272                          |SPI_MCR_PCSIS_MASK       
    273                          |SPI_MCR_CLR_TXF_MASK    
    274                          |SPI_MCR_CLR_RXF_MASK;  
   \                     ??LPLD_SPI_Init_16:
   \   00000388   0x.... 0x....      LDR.W    R0,??DataTable8_43  ;; 0x3f0c01
   \   0000038C   0x6008             STR      R0,[R1, #+0]
    275            //选择SPI 工作模式
    276            if(spi_mode == SPI_MODE_SLAVE)
   \   0000038E   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000392   0x2801             CMP      R0,#+1
   \   00000394   0xD104             BNE.N    ??LPLD_SPI_Init_39
    277            {
    278              spix->MCR &= ~SPI_MCR_MSTR_MASK;//从机模式  
   \   00000396   0x6808             LDR      R0,[R1, #+0]
   \   00000398   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   0000039A   0x0840             LSRS     R0,R0,#+1
   \   0000039C   0x6008             STR      R0,[R1, #+0]
   \   0000039E   0xE003             B.N      ??LPLD_SPI_Init_40
    279            }
    280            else
    281            {
    282              spix->MCR |= SPI_MCR_MSTR_MASK; //主机模式 
   \                     ??LPLD_SPI_Init_39:
   \   000003A0   0x6808             LDR      R0,[R1, #+0]
   \   000003A2   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000003A6   0x6008             STR      R0,[R1, #+0]
    283            }
    284            //选择使能tx FIFO
    285            if(txFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_40:
   \   000003A8   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   000003AC   0x2801             CMP      R0,#+1
   \   000003AE   0xD104             BNE.N    ??LPLD_SPI_Init_41
    286            {
    287              spix->MCR &= ~SPI_MCR_DIS_TXF_MASK; 
   \   000003B0   0x6808             LDR      R0,[R1, #+0]
   \   000003B2   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   000003B6   0x6008             STR      R0,[R1, #+0]
   \   000003B8   0xE003             B.N      ??LPLD_SPI_Init_42
    288            }
    289            else
    290            {
    291              spix->MCR |= SPI_MCR_DIS_TXF_MASK;//选择传统方式
   \                     ??LPLD_SPI_Init_41:
   \   000003BA   0x6808             LDR      R0,[R1, #+0]
   \   000003BC   0xF450 0x5000      ORRS     R0,R0,#0x2000
   \   000003C0   0x6008             STR      R0,[R1, #+0]
    292            }
    293            //选择使能Rx FIFO
    294            if(rxFIFO_enable == TRUE)
   \                     ??LPLD_SPI_Init_42:
   \   000003C2   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   000003C6   0x2801             CMP      R0,#+1
   \   000003C8   0xD104             BNE.N    ??LPLD_SPI_Init_43
    295            {
    296              spix->MCR &= ~SPI_MCR_DIS_RXF_MASK;
   \   000003CA   0x6808             LDR      R0,[R1, #+0]
   \   000003CC   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   000003D0   0x6008             STR      R0,[R1, #+0]
   \   000003D2   0xE003             B.N      ??LPLD_SPI_Init_44
    297            }
    298            else
    299            {
    300              spix->MCR |= SPI_MCR_DIS_RXF_MASK; //选择传统方式
   \                     ??LPLD_SPI_Init_43:
   \   000003D4   0x6808             LDR      R0,[R1, #+0]
   \   000003D6   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000003DA   0x6008             STR      R0,[R1, #+0]
    301            }
    302            //选择使能发送完成中断
    303            if(tx_complete_int == TRUE)
   \                     ??LPLD_SPI_Init_44:
   \   000003DC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003DE   0x2A01             CMP      R2,#+1
   \   000003E0   0xD104             BNE.N    ??LPLD_SPI_Init_45
    304            {
    305              spix->RSER |= SPI_RSER_TCF_RE_MASK; 
   \   000003E2   0x6B08             LDR      R0,[R1, #+48]
   \   000003E4   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   000003E8   0x6308             STR      R0,[R1, #+48]
   \   000003EA   0xE003             B.N      ??LPLD_SPI_Init_46
    306            }
    307            else
    308            { 
    309              spix->RSER &= ~SPI_RSER_TCF_RE_MASK;
   \                     ??LPLD_SPI_Init_45:
   \   000003EC   0x6B08             LDR      R0,[R1, #+48]
   \   000003EE   0x0040             LSLS     R0,R0,#+1        ;; ZeroExtS R0,R0,#+1,#+1
   \   000003F0   0x0840             LSRS     R0,R0,#+1
   \   000003F2   0x6308             STR      R0,[R1, #+48]
    310            }
    311            //选择使能发送队列结束中断
    312            if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_46:
   \   000003F4   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000003F6   0x2B01             CMP      R3,#+1
   \   000003F8   0xD104             BNE.N    ??LPLD_SPI_Init_47
    313            {
    314              spix->RSER |=SPI_RSER_EOQF_RE_MASK;
   \   000003FA   0x6B08             LDR      R0,[R1, #+48]
   \   000003FC   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000400   0x6308             STR      R0,[R1, #+48]
   \   00000402   0xE003             B.N      ??LPLD_SPI_Init_48
    315            }
    316            else
    317              spix->RSER &= ~SPI_RSER_EOQF_RE_MASK;
   \                     ??LPLD_SPI_Init_47:
   \   00000404   0x6B08             LDR      R0,[R1, #+48]
   \   00000406   0xF030 0x5080      BICS     R0,R0,#0x10000000
   \   0000040A   0x6308             STR      R0,[R1, #+48]
    318            //选择使能txFIFO为空中断
    319            if(txFIFO_underflow_int== TRUE)
   \                     ??LPLD_SPI_Init_48:
   \   0000040C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000040E   0x2C01             CMP      R4,#+1
   \   00000410   0xD104             BNE.N    ??LPLD_SPI_Init_49
    320            {
    321              spix->RSER |=SPI_RSER_TFUF_RE_MASK;
   \   00000412   0x6B08             LDR      R0,[R1, #+48]
   \   00000414   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000418   0x6308             STR      R0,[R1, #+48]
   \   0000041A   0xE003             B.N      ??LPLD_SPI_Init_50
    322            }
    323            else
    324              spix->RSER &= ~SPI_RSER_TFUF_RE_MASK;
   \                     ??LPLD_SPI_Init_49:
   \   0000041C   0x6B08             LDR      R0,[R1, #+48]
   \   0000041E   0xF030 0x6000      BICS     R0,R0,#0x8000000
   \   00000422   0x6308             STR      R0,[R1, #+48]
    325            //选择使能rxFIFO溢出中断
    326            if(rxFIFO_overflow_int== TRUE)
   \                     ??LPLD_SPI_Init_50:
   \   00000424   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000426   0x2D01             CMP      R5,#+1
   \   00000428   0xD104             BNE.N    ??LPLD_SPI_Init_51
    327            {
    328              spix->RSER |=SPI_RSER_RFOF_RE_MASK;
   \   0000042A   0x6B08             LDR      R0,[R1, #+48]
   \   0000042C   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000430   0x6308             STR      R0,[R1, #+48]
   \   00000432   0xE003             B.N      ??LPLD_SPI_Init_52
    329            }
    330            else
    331            {
    332              spix->RSER &= ~SPI_RSER_RFOF_RE_MASK;
   \                     ??LPLD_SPI_Init_51:
   \   00000434   0x6B08             LDR      R0,[R1, #+48]
   \   00000436   0xF430 0x2000      BICS     R0,R0,#0x80000
   \   0000043A   0x6308             STR      R0,[R1, #+48]
    333            }
    334            //选择使能txFIFO有数据进入队列中断或者DMA请求
    335            if(txFIFO_Fill_int== TRUE)
   \                     ??LPLD_SPI_Init_52:
   \   0000043C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000043E   0x2E01             CMP      R6,#+1
   \   00000440   0xD104             BNE.N    ??LPLD_SPI_Init_53
    336            {
    337              spix->RSER |=SPI_RSER_TFFF_RE_MASK;
   \   00000442   0x6B08             LDR      R0,[R1, #+48]
   \   00000444   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   00000448   0x6308             STR      R0,[R1, #+48]
   \   0000044A   0xE003             B.N      ??LPLD_SPI_Init_54
    338            }
    339            else
    340            {
    341              spix->RSER &= ~SPI_RSER_TFFF_RE_MASK;
   \                     ??LPLD_SPI_Init_53:
   \   0000044C   0x6B08             LDR      R0,[R1, #+48]
   \   0000044E   0xF030 0x7000      BICS     R0,R0,#0x2000000
   \   00000452   0x6308             STR      R0,[R1, #+48]
    342            }
    343            //选择使能rxFIFO非空中断或者DMA请求
    344            if(rxFIFO_Drain_int== TRUE)
   \                     ??LPLD_SPI_Init_54:
   \   00000454   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000456   0x2F01             CMP      R7,#+1
   \   00000458   0xD104             BNE.N    ??LPLD_SPI_Init_55
    345            {
    346              spix->RSER |=SPI_RSER_RFDF_RE_MASK;
   \   0000045A   0x6B08             LDR      R0,[R1, #+48]
   \   0000045C   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000460   0x6308             STR      R0,[R1, #+48]
   \   00000462   0xE003             B.N      ??LPLD_SPI_Init_56
    347            }
    348            else
    349            {
    350              spix->RSER &= ~SPI_RSER_RFDF_RE_MASK;
   \                     ??LPLD_SPI_Init_55:
   \   00000464   0x6B08             LDR      R0,[R1, #+48]
   \   00000466   0xF430 0x3000      BICS     R0,R0,#0x20000
   \   0000046A   0x6308             STR      R0,[R1, #+48]
    351            }
    352            //选择使能txFIFO中断或者DMA请求
    353            if(txFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_56:
   \   0000046C   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   00000470   0xF1BE 0x0F01      CMP      LR,#+1
   \   00000474   0xD104             BNE.N    ??LPLD_SPI_Init_57
    354            {
    355              spix->RSER |=SPI_RSER_TFFF_DIRS_MASK;
   \   00000476   0x6B08             LDR      R0,[R1, #+48]
   \   00000478   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   0000047C   0x6308             STR      R0,[R1, #+48]
   \   0000047E   0xE003             B.N      ??LPLD_SPI_Init_58
    356            }
    357            else
    358            {
    359              spix->RSER &= ~SPI_RSER_TFFF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_57:
   \   00000480   0x6B08             LDR      R0,[R1, #+48]
   \   00000482   0xF030 0x7080      BICS     R0,R0,#0x1000000
   \   00000486   0x6308             STR      R0,[R1, #+48]
    360            }
    361            //选择使能rxFIFO中断或者DMA请求
    362            if(rxFIFO_req == SPI_FIFO_DMAREQUEST)
   \                     ??LPLD_SPI_Init_58:
   \   00000488   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000048C   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000490   0xD104             BNE.N    ??LPLD_SPI_Init_59
    363            {
    364              spix->RSER |= SPI_RSER_RFDF_DIRS_MASK;
   \   00000492   0x6B08             LDR      R0,[R1, #+48]
   \   00000494   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000498   0x6308             STR      R0,[R1, #+48]
   \   0000049A   0xE003             B.N      ??LPLD_SPI_Init_60
    365            }
    366            else 
    367            {
    368              spix->RSER &= ~SPI_RSER_RFDF_DIRS_MASK;
   \                     ??LPLD_SPI_Init_59:
   \   0000049C   0x6B08             LDR      R0,[R1, #+48]
   \   0000049E   0xF430 0x3080      BICS     R0,R0,#0x10000
   \   000004A2   0x6308             STR      R0,[R1, #+48]
    369            }
    370            //添加中断回调函数
    371          
    372            if(spix == SPI0)
   \                     ??LPLD_SPI_Init_60:
   \   000004A4   0x.... 0x....      LDR.W    R0,??DataTable8_2  ;; 0x4002c000
   \   000004A8   0x4281             CMP      R1,R0
   \   000004AA   0xD13C             BNE.N    ??LPLD_SPI_Init_61
    373            {
    374              if(tx_complete_int == TRUE)
   \   000004AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004AE   0x2A01             CMP      R2,#+1
   \   000004B0   0xD105             BNE.N    ??LPLD_SPI_Init_62
    375              { SPI0_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   000004B2   0x.... 0x....      LDR.W    R0,??DataTable8_44
   \   000004B6   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \   000004BA   0xF8C0 0xB000      STR      R11,[R0, #+0]
    376              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_62:
   \   000004BE   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000004C0   0x2B01             CMP      R3,#+1
   \   000004C2   0xD105             BNE.N    ??LPLD_SPI_Init_63
    377              { SPI0_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   000004C4   0x.... 0x....      LDR.W    R0,??DataTable8_44
   \   000004C8   0xF8DD 0xB010      LDR      R11,[SP, #+16]
   \   000004CC   0xF8C0 0xB004      STR      R11,[R0, #+4]
    378              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_63:
   \   000004D0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000004D2   0x2C01             CMP      R4,#+1
   \   000004D4   0xD105             BNE.N    ??LPLD_SPI_Init_64
    379              { SPI0_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   000004D6   0x.... 0x....      LDR.W    R0,??DataTable8_44
   \   000004DA   0xF8DD 0xB00C      LDR      R11,[SP, #+12]
   \   000004DE   0xF8C0 0xB008      STR      R11,[R0, #+8]
    380              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_64:
   \   000004E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000004E4   0x2D01             CMP      R5,#+1
   \   000004E6   0xD103             BNE.N    ??LPLD_SPI_Init_65
    381              { SPI0_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   000004E8   0x.... 0x....      LDR.W    R0,??DataTable8_44
   \   000004EC   0xF8C0 0xC00C      STR      R12,[R0, #+12]
    382              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_65:
   \   000004F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000004F2   0x2E01             CMP      R6,#+1
   \   000004F4   0xD108             BNE.N    ??LPLD_SPI_Init_66
   \   000004F6   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000004FA   0xF1BE 0x0F00      CMP      LR,#+0
   \   000004FE   0xD103             BNE.N    ??LPLD_SPI_Init_66
    383              { SPI0_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000500   0x.... 0x....      LDR.W    R0,??DataTable8_44
   \   00000504   0xF8C0 0x9010      STR      R9,[R0, #+16]
    384              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_66:
   \   00000508   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000050A   0x2F01             CMP      R7,#+1
   \   0000050C   0xF040 0x8088      BNE.W    ??LPLD_SPI_Init_67
   \   00000510   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000514   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000518   0xF040 0x8082      BNE.W    ??LPLD_SPI_Init_67
    385              { SPI0_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   0000051C   0x.... 0x....      LDR.W    R0,??DataTable8_44
   \   00000520   0xF8C0 0xA014      STR      R10,[R0, #+20]
   \   00000524   0xE07C             B.N      ??LPLD_SPI_Init_67
    386            }
    387            else if (spix == SPI1)
   \                     ??LPLD_SPI_Init_61:
   \   00000526   0x.... 0x....      LDR.W    R0,??DataTable8_20  ;; 0x4002d000
   \   0000052A   0x4281             CMP      R1,R0
   \   0000052C   0xD13A             BNE.N    ??LPLD_SPI_Init_68
    388            {
    389              if(tx_complete_int == TRUE)
   \   0000052E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000530   0x2A01             CMP      R2,#+1
   \   00000532   0xD105             BNE.N    ??LPLD_SPI_Init_69
    390              { SPI1_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   00000534   0x.... 0x....      LDR.W    R0,??DataTable8_45
   \   00000538   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \   0000053C   0xF8C0 0xB000      STR      R11,[R0, #+0]
    391              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_69:
   \   00000540   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000542   0x2B01             CMP      R3,#+1
   \   00000544   0xD105             BNE.N    ??LPLD_SPI_Init_70
    392              { SPI1_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   00000546   0x.... 0x....      LDR.W    R0,??DataTable8_45
   \   0000054A   0xF8DD 0xB010      LDR      R11,[SP, #+16]
   \   0000054E   0xF8C0 0xB004      STR      R11,[R0, #+4]
    393              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_70:
   \   00000552   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000554   0x2C01             CMP      R4,#+1
   \   00000556   0xD105             BNE.N    ??LPLD_SPI_Init_71
    394              { SPI1_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   00000558   0x.... 0x....      LDR.W    R0,??DataTable8_45
   \   0000055C   0xF8DD 0xB00C      LDR      R11,[SP, #+12]
   \   00000560   0xF8C0 0xB008      STR      R11,[R0, #+8]
    395              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_71:
   \   00000564   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000566   0x2D01             CMP      R5,#+1
   \   00000568   0xD103             BNE.N    ??LPLD_SPI_Init_72
    396              { SPI1_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   0000056A   0x.... 0x....      LDR.W    R0,??DataTable8_45
   \   0000056E   0xF8C0 0xC00C      STR      R12,[R0, #+12]
    397              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_72:
   \   00000572   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000574   0x2E01             CMP      R6,#+1
   \   00000576   0xD108             BNE.N    ??LPLD_SPI_Init_73
   \   00000578   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   0000057C   0xF1BE 0x0F00      CMP      LR,#+0
   \   00000580   0xD103             BNE.N    ??LPLD_SPI_Init_73
    398              { SPI1_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000582   0x.... 0x....      LDR.W    R0,??DataTable8_45
   \   00000586   0xF8C0 0x9010      STR      R9,[R0, #+16]
    399              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_73:
   \   0000058A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000058C   0x2F01             CMP      R7,#+1
   \   0000058E   0xD147             BNE.N    ??LPLD_SPI_Init_67
   \   00000590   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000594   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000598   0xD142             BNE.N    ??LPLD_SPI_Init_67
    400              { SPI1_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   0000059A   0x.... 0x....      LDR.W    R0,??DataTable8_45
   \   0000059E   0xF8C0 0xA014      STR      R10,[R0, #+20]
   \   000005A2   0xE03D             B.N      ??LPLD_SPI_Init_67
    401            }
    402            else if (spix == SPI2)
   \                     ??LPLD_SPI_Init_68:
   \   000005A4   0x.... 0x....      LDR.W    R0,??DataTable8_33  ;; 0x400ac000
   \   000005A8   0x4281             CMP      R1,R0
   \   000005AA   0xD139             BNE.N    ??LPLD_SPI_Init_67
    403            {
    404              if(tx_complete_int == TRUE)
   \   000005AC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005AE   0x2A01             CMP      R2,#+1
   \   000005B0   0xD105             BNE.N    ??LPLD_SPI_Init_74
    405              { SPI2_ISR[SPI_TxComplete_Int] = TxComplete_isr; }
   \   000005B2   0x.... 0x....      LDR.W    R0,??DataTable8_46
   \   000005B6   0xF8DD 0xB014      LDR      R11,[SP, #+20]
   \   000005BA   0xF8C0 0xB000      STR      R11,[R0, #+0]
    406              if(QueueEnd_Request_int == TRUE)
   \                     ??LPLD_SPI_Init_74:
   \   000005BE   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   000005C0   0x2B01             CMP      R3,#+1
   \   000005C2   0xD105             BNE.N    ??LPLD_SPI_Init_75
    407              { SPI2_ISR[SPI_QueueEndReq_Int] = QueueEndReq_isr; }
   \   000005C4   0x.... 0x....      LDR.W    R0,??DataTable8_46
   \   000005C8   0xF8DD 0xB010      LDR      R11,[SP, #+16]
   \   000005CC   0xF8C0 0xB004      STR      R11,[R0, #+4]
    408              if(txFIFO_underflow_int == TRUE)
   \                     ??LPLD_SPI_Init_75:
   \   000005D0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000005D2   0x2C01             CMP      R4,#+1
   \   000005D4   0xD105             BNE.N    ??LPLD_SPI_Init_76
    409              { SPI2_ISR[SPI_TxFIFO_UnderflowInt] = UnderflowInt_isr; }
   \   000005D6   0x.... 0x....      LDR.W    R0,??DataTable8_46
   \   000005DA   0xF8DD 0xB00C      LDR      R11,[SP, #+12]
   \   000005DE   0xF8C0 0xB008      STR      R11,[R0, #+8]
    410              if(rxFIFO_overflow_int == TRUE)
   \                     ??LPLD_SPI_Init_76:
   \   000005E2   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000005E4   0x2D01             CMP      R5,#+1
   \   000005E6   0xD103             BNE.N    ??LPLD_SPI_Init_77
    411              { SPI2_ISR[SPI_RxFIFO_OverflowInt] = OverflowInt_isr; }
   \   000005E8   0x.... 0x....      LDR.W    R0,??DataTable8_46
   \   000005EC   0xF8C0 0xC00C      STR      R12,[R0, #+12]
    412              if(txFIFO_Fill_int == TRUE && txFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_77:
   \   000005F0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000005F2   0x2E01             CMP      R6,#+1
   \   000005F4   0xD108             BNE.N    ??LPLD_SPI_Init_78
   \   000005F6   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000005FA   0xF1BE 0x0F00      CMP      LR,#+0
   \   000005FE   0xD103             BNE.N    ??LPLD_SPI_Init_78
    413              { SPI2_ISR[SPI_TxFIFO_FillInt] = FillInt_isr; }
   \   00000600   0x.... 0x....      LDR.W    R0,??DataTable8_46
   \   00000604   0xF8C0 0x9010      STR      R9,[R0, #+16]
    414              if(rxFIFO_Drain_int == TRUE && rxFIFO_req == SPI_FIFO_INTREQUEST)
   \                     ??LPLD_SPI_Init_78:
   \   00000608   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000060A   0x2F01             CMP      R7,#+1
   \   0000060C   0xD108             BNE.N    ??LPLD_SPI_Init_67
   \   0000060E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000612   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000616   0xD103             BNE.N    ??LPLD_SPI_Init_67
    415              { SPI2_ISR[SPI_RxFIFO_DrainInt] = DrainInt_isr; }
   \   00000618   0x.... 0x....      LDR.W    R0,??DataTable8_46
   \   0000061C   0xF8C0 0xA014      STR      R10,[R0, #+20]
    416            }
    417            //配置SPI CTAR寄存器，设置SPI的总线时序
    418            spix->CTAR[0] = 0 & (~SPI_CTAR_LSBFE_MASK)
    419                                |SPI_CTAR_DBR_MASK  
    420                                |SPI_CTAR_PBR(0)           
    421                                |SPI_CTAR_FMSZ(7);        
   \                     ??LPLD_SPI_Init_67:
   \   00000620   0xF05F 0x4038      MOVS     R0,#-1207959552
   \   00000624   0x60C8             STR      R0,[R1, #+12]
    422                                 
    423            //设置SPI总线频率
    424            //SCK总线频率 = g_bus_clock/ SCK_DIV_x                                             
    425            spix->CTAR[0] |=SPI_CTAR_BR(sck_div);
   \   00000626   0x68C8             LDR      R0,[R1, #+12]
   \   00000628   0xF89D 0xB00B      LDRB     R11,[SP, #+11]
   \   0000062C   0xF01B 0x0B0F      ANDS     R11,R11,#0xF
   \   00000630   0xEA5B 0x0000      ORRS     R0,R11,R0
   \   00000634   0x60C8             STR      R0,[R1, #+12]
    426          
    427            //tCSC = (1/g_bus_clock) x PCSSCK x CSSCK
    428            //tCSC = 1/50,000,000 x PCSSCK x CSSCK
    429            spix->CTAR[0] |=SPI_CTAR_PCSSCK(1); 
   \   00000636   0x68C8             LDR      R0,[R1, #+12]
   \   00000638   0xF450 0x0080      ORRS     R0,R0,#0x400000
   \   0000063C   0x60C8             STR      R0,[R1, #+12]
    430            spix->CTAR[0] |=SPI_CTAR_CSSCK(1);  
   \   0000063E   0x68C8             LDR      R0,[R1, #+12]
   \   00000640   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000644   0x60C8             STR      R0,[R1, #+12]
    431            
    432            //tDT = (1/g_bus_clock) x PDT x DT
    433            spix->CTAR[0] |=SPI_CTAR_DT(1);
   \   00000646   0x68C8             LDR      R0,[R1, #+12]
   \   00000648   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   0000064C   0x60C8             STR      R0,[R1, #+12]
    434            spix->CTAR[0] |=SPI_CTAR_PDT(1);
   \   0000064E   0x68C8             LDR      R0,[R1, #+12]
   \   00000650   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   00000654   0x60C8             STR      R0,[R1, #+12]
    435            
    436            //Config the Delay of the last edge of SCK and the negation of PCS
    437            //tASC = (1/g_bus_clock) x PASC x ASC
    438            spix->CTAR[0] |=SPI_CTAR_PASC(1);
   \   00000656   0x68C8             LDR      R0,[R1, #+12]
   \   00000658   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \   0000065C   0x60C8             STR      R0,[R1, #+12]
    439            spix->CTAR[0] |=SPI_CTAR_ASC(1);
   \   0000065E   0x68C8             LDR      R0,[R1, #+12]
   \   00000660   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000664   0x60C8             STR      R0,[R1, #+12]
    440            //清除标志位
    441            spix->SR =  SPI_SR_RFDF_MASK   
    442                        |SPI_SR_RFOF_MASK
    443                        |SPI_SR_TFFF_MASK
    444                        |SPI_SR_TFUF_MASK
    445                        |SPI_SR_TCF_MASK
    446                        |SPI_SR_EOQF_MASK;
   \   00000666   0x.... 0x....      LDR.W    R0,??DataTable8_47  ;; 0x9a0a0000
   \   0000066A   0x62C8             STR      R0,[R1, #+44]
    447            //使能SPIx
    448            spix->MCR &=~SPI_MCR_HALT_MASK; 
   \   0000066C   0x6808             LDR      R0,[R1, #+0]
   \   0000066E   0x0840             LSRS     R0,R0,#+1
   \   00000670   0x0040             LSLS     R0,R0,#+1
   \   00000672   0x6008             STR      R0,[R1, #+0]
    449            
    450            return 1;
   \   00000674   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Init_38:
   \   00000676   0xB007             ADD      SP,SP,#+28
   \   00000678   0xE8BD 0x0FF0      POP      {R4-R11}
   \   0000067C   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    451          }
    452          
    453          /*
    454           * LPLD_SPI_Deinit
    455           * SPI反初始化函数,在该函数中将SPI设置成为暂停模式，关闭SPI总线时钟，
    456           * 关闭SPI外设中断
    457           * 
    458           * 参数:
    459           *    spi_init_structure--SPI初始化结构体，
    460           *                        具体定义见SPI_InitTypeDef
    461           *
    462           * 输出:
    463           *    0--配置错误
    464           *    1--配置成功
    465           */

   \                                 In section .text, align 2, keep-with-next
    466          uint8 LPLD_SPI_Deinit(SPI_InitTypeDef spi_init_structure)
    467          {
   \                     LPLD_SPI_Deinit:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    468            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9C02             LDR      R4,[SP, #+8]
    469            spix->MCR |= SPI_MCR_HALT_MASK; //
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000C   0x6020             STR      R0,[R4, #+0]
    470            if(spix == SPI0)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable8_2  ;; 0x4002c000
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD10B             BNE.N    ??LPLD_SPI_Deinit_0
    471            {
    472              disable_irq(SPI0_IRQn);
   \   00000016   0x201A             MOVS     R0,#+26
   \   00000018   0x.... 0x....      BL       NVIC_DisableIRQ
    473              SIM->SCGC6 &= ~SIM_SCGC6_DSPI0_MASK;
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000002A   0x6008             STR      R0,[R1, #+0]
   \   0000002C   0xE021             B.N      ??LPLD_SPI_Deinit_1
    474            }
    475            else if(spix == SPI1)
   \                     ??LPLD_SPI_Deinit_0:
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable8_20  ;; 0x4002d000
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD10B             BNE.N    ??LPLD_SPI_Deinit_2
    476            {
    477              disable_irq(SPI1_IRQn);
   \   00000036   0x201B             MOVS     R0,#+27
   \   00000038   0x.... 0x....      BL       NVIC_DisableIRQ
    478              SIM->SCGC6 &= ~SIM_SCGC6_SPI1_MASK;
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable8_3  ;; 0x4004803c
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF430 0x5000      BICS     R0,R0,#0x2000
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable8_3  ;; 0x4004803c
   \   0000004A   0x6008             STR      R0,[R1, #+0]
   \   0000004C   0xE011             B.N      ??LPLD_SPI_Deinit_1
    479            }
    480            else if(spix == SPI2)
   \                     ??LPLD_SPI_Deinit_2:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable8_33  ;; 0x400ac000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD10B             BNE.N    ??LPLD_SPI_Deinit_3
    481            {
    482              disable_irq(SPI2_IRQn);
   \   00000056   0x201C             MOVS     R0,#+28
   \   00000058   0x.... 0x....      BL       NVIC_DisableIRQ
    483              SIM->SCGC3 &= ~SIM_SCGC3_SPI2_MASK;
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable8_34  ;; 0x40048030
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable8_34  ;; 0x40048030
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0xE001             B.N      ??LPLD_SPI_Deinit_1
    484            }
    485            else
    486              return 0;
   \                     ??LPLD_SPI_Deinit_3:
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xE000             B.N      ??LPLD_SPI_Deinit_4
    487            return 1;
   \                     ??LPLD_SPI_Deinit_1:
   \   00000072   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_Deinit_4:
   \   00000074   0xBC10             POP      {R4}
   \   00000076   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    488          }
    489          
    490          /*
    491           * LPLD_SPI_EnableIrq
    492           * 使能SPI外设中断
    493           * 
    494           * 参数:
    495           *    spi_init_structure--SPI初始化结构体，
    496           *                        具体定义见SPI_InitTypeDef
    497           *
    498           * 输出:
    499           *    0--配置错误
    500           *    1--配置成功
    501           */

   \                                 In section .text, align 2, keep-with-next
    502          uint8 LPLD_SPI_EnableIrq(SPI_InitTypeDef spi_init_structure)
    503          {
   \                     LPLD_SPI_EnableIrq:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    504            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9C02             LDR      R4,[SP, #+8]
    505            if(spix == SPI0)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable8_2  ;; 0x4002c000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_0
    506            {
    507              enable_irq(SPI0_IRQn);
   \   0000000E   0x201A             MOVS     R0,#+26
   \   00000010   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000014   0xE011             B.N      ??LPLD_SPI_EnableIrq_1
    508            }
    509            else if(spix == SPI1)
   \                     ??LPLD_SPI_EnableIrq_0:
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_20  ;; 0x4002d000
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_2
    510            {
    511              enable_irq(SPI1_IRQn);
   \   0000001E   0x201B             MOVS     R0,#+27
   \   00000020   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000024   0xE009             B.N      ??LPLD_SPI_EnableIrq_1
    512            }
    513            else if(spix == SPI2)
   \                     ??LPLD_SPI_EnableIrq_2:
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable8_33  ;; 0x400ac000
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD103             BNE.N    ??LPLD_SPI_EnableIrq_3
    514            {
    515              enable_irq(SPI2_IRQn);
   \   0000002E   0x201C             MOVS     R0,#+28
   \   00000030   0x.... 0x....      BL       NVIC_EnableIRQ
   \   00000034   0xE001             B.N      ??LPLD_SPI_EnableIrq_1
    516            }
    517            else
    518              return 0;
   \                     ??LPLD_SPI_EnableIrq_3:
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE000             B.N      ??LPLD_SPI_EnableIrq_4
    519          
    520            return 1;
   \                     ??LPLD_SPI_EnableIrq_1:
   \   0000003A   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_EnableIrq_4:
   \   0000003C   0xBC10             POP      {R4}
   \   0000003E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    521          }
    522          
    523          /*
    524           * LPLD_SPI_EnableIrq
    525           * 禁止SPI外设中断
    526           * 
    527           * 参数:
    528           *    spi_init_structure--SPI初始化结构体，
    529           *                        具体定义见SPI_InitTypeDef
    530           *
    531           * 输出:
    532           *    0--配置错误
    533           *    1--配置成功
    534           */

   \                                 In section .text, align 2, keep-with-next
    535          uint8 LPLD_SPI_DisableIrq(SPI_InitTypeDef spi_init_structure)
    536          {
   \                     LPLD_SPI_DisableIrq:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    537            SPI_Type * spix = spi_init_structure.SPI_SPIx;
   \   00000004   0x9C02             LDR      R4,[SP, #+8]
    538            if(spix == SPI0)
   \   00000006   0x....             LDR.N    R0,??DataTable8_2  ;; 0x4002c000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_0
    539            {
    540              disable_irq(SPI0_IRQn);
   \   0000000C   0x201A             MOVS     R0,#+26
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000012   0xE010             B.N      ??LPLD_SPI_DisableIrq_1
    541            }
    542            else if(spix == SPI1)
   \                     ??LPLD_SPI_DisableIrq_0:
   \   00000014   0x....             LDR.N    R0,??DataTable8_20  ;; 0x4002d000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_2
    543            {
    544              disable_irq(SPI1_IRQn);
   \   0000001A   0x201B             MOVS     R0,#+27
   \   0000001C   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000020   0xE009             B.N      ??LPLD_SPI_DisableIrq_1
    545            }
    546            else if(spix == SPI2)
   \                     ??LPLD_SPI_DisableIrq_2:
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable8_33  ;; 0x400ac000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD103             BNE.N    ??LPLD_SPI_DisableIrq_3
    547            {
    548              disable_irq(SPI2_IRQn);
   \   0000002A   0x201C             MOVS     R0,#+28
   \   0000002C   0x.... 0x....      BL       NVIC_DisableIRQ
   \   00000030   0xE001             B.N      ??LPLD_SPI_DisableIrq_1
    549            }
    550            else
    551              return 0;
   \                     ??LPLD_SPI_DisableIrq_3:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B.N      ??LPLD_SPI_DisableIrq_4
    552            return 1;
   \                     ??LPLD_SPI_DisableIrq_1:
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??LPLD_SPI_DisableIrq_4:
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    553          }
    554          
    555          /*
    556           * LPLD_SPI_Master_WriteRead
    557           * K60主机SPI向从机写数据，并读取从机数据
    558           * 
    559           * 参数:
    560           *    spix--SPI选择
    561           *      |__SPI0 -选择SPI0模块
    562           *      |__SPI1 -选择SPI1模块
    563           *      |__SPI2 -选择SPI2模块
    564           *    data--要发送数据
    565           *      |__单位为一个字节，8位
    566           *    pcsx--CS片选端口号
    567           *      |__SPI_PCS0 -0号片选(SPI0、SPI1、SPI2含有)
    568           *      |__SPI_PCS1 -1号片选(SPI0、SPI1、SPI2含有)
    569           *      |__SPI_PCS2 -2号片选(SPI0、SPI1含有)
    570           *      |__SPI_PCS3 -3号片选(SPI0、SPI1含有)
    571           *      |__SPI_PCS4 -4号片选(SPI0含有)
    572           *      |__SPI_PCS5 -5号片选(SPI0含有)
    573           *    pcs_state--一帧数据传输完成后CS的状态
    574           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    575           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    576           * 输出:
    577           *    读取从机8位的数据
    578           */

   \                                 In section .text, align 2, keep-with-next
    579          uint8 LPLD_SPI_Master_WriteRead(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    580          {
   \                     LPLD_SPI_Master_WriteRead:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0004             MOVS     R4,R0
    581            uint8 temp;
    582            
    583            spix->PUSHR  = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT))&SPI_PUSHR_CONT_MASK)
    584                         |SPI_PUSHR_CTAS(0)
    585                         |SPI_PUSHR_PCS(pcsx)
    586                         |data;                 
   \   00000004   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000006   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000008   0x0415             LSLS     R5,R2,#+16
   \   0000000A   0xF415 0x157C      ANDS     R5,R5,#0x3F0000
   \   0000000E   0xEA55 0x75C3      ORRS     R5,R5,R3, LSL #+31
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0x430D             ORRS     R5,R1,R5
   \   00000016   0x6365             STR      R5,[R4, #+52]
    587            
    588            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_WriteRead_0:
   \   00000018   0x6AE5             LDR      R5,[R4, #+44]
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_0
    589            spix->SR |= SPI_SR_TCF_MASK ;               
   \   0000001E   0x6AE5             LDR      R5,[R4, #+44]
   \   00000020   0xF055 0x4500      ORRS     R5,R5,#0x80000000
   \   00000024   0x62E5             STR      R5,[R4, #+44]
    590            
    591            while(!(spix->SR & SPI_SR_RFDF_MASK)); 
   \                     ??LPLD_SPI_Master_WriteRead_1:
   \   00000026   0x6AE5             LDR      R5,[R4, #+44]
   \   00000028   0x03AD             LSLS     R5,R5,#+14
   \   0000002A   0xD5FC             BPL.N    ??LPLD_SPI_Master_WriteRead_1
    592            temp = (uint8)(spix->POPR & 0xff);           
   \   0000002C   0x6BA5             LDR      R5,[R4, #+56]
   \   0000002E   0x0028             MOVS     R0,R5
    593            spix->SR |= SPI_SR_RFDF_MASK;                
   \   00000030   0x6AE5             LDR      R5,[R4, #+44]
   \   00000032   0xF455 0x3500      ORRS     R5,R5,#0x20000
   \   00000036   0x62E5             STR      R5,[R4, #+44]
    594            return temp;
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0xBC30             POP      {R4,R5}
   \   0000003C   0x4770             BX       LR               ;; return
    595            
    596          }
    597          
    598          /*
    599           * LPLD_SPI_Master_Read
    600           * K60主机读取从机数据
    601           * 
    602           * 参数:
    603           *    spix--SPI选择
    604           *      |__SPI0 -选择SPI0模块
    605           *      |__SPI1 -选择SPI1模块
    606           *      |__SPI2 -选择SPI2模块
    607           * 输出:
    608           *    读取从机8位的数据
    609           */

   \                                 In section .text, align 2, keep-with-next
    610          uint8 LPLD_SPI_Master_Read(SPI_Type *spix)
    611          {
   \                     LPLD_SPI_Master_Read:
   \   00000000   0x0001             MOVS     R1,R0
    612            uint8 temp;
    613          
    614            while(!(spix->SR & SPI_SR_RFDF_MASK)); //=1 RIFO is not empty
   \                     ??LPLD_SPI_Master_Read_0:
   \   00000002   0x6ACA             LDR      R2,[R1, #+44]
   \   00000004   0x0392             LSLS     R2,R2,#+14
   \   00000006   0xD5FC             BPL.N    ??LPLD_SPI_Master_Read_0
    615            temp=(uint8)spix->POPR;
   \   00000008   0x6B8A             LDR      R2,[R1, #+56]
   \   0000000A   0x0010             MOVS     R0,R2
    616            spix->SR |=SPI_SR_RFDF_MASK;
   \   0000000C   0x6ACA             LDR      R2,[R1, #+44]
   \   0000000E   0xF452 0x3200      ORRS     R2,R2,#0x20000
   \   00000012   0x62CA             STR      R2,[R1, #+44]
    617          
    618            return temp;
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    619          }
    620          /*
    621           * LPLD_SPI_Master_Write
    622           * K60主机SPI向从机写数据
    623           * 
    624           * 参数:
    625           *    spix--SPI选择
    626           *      |__SPI0 -选择SPI0模块
    627           *      |__SPI1 -选择SPI1模块
    628           *      |__SPI2 -选择SPI2模块
    629           *    data--要发送数据
    630           *      |__单位为一个字节，8位
    631           *    pcsx--CS片选端口号
    632           *      |__SPI_PCS0  -0号片选(SPI0、SPI1、SPI2含有)
    633           *      |__SPI_PCS1  -1号片选(SPI0、SPI1、SPI2含有)
    634           *      |__SPI_PCS2  -2号片选(SPI0、SPI1含有)
    635           *      |__SPI_PCS3  -3号片选(SPI0、SPI1含有)
    636           *      |__SPI_PCS4  -4号片选(SPI0含有)
    637           *      |__SPI_PCS5  -5号片选(SPI0含有)
    638           *    pcs_state--一帧数据传输完成后CS的状态
    639           *      |__SPI_PCS_ASSERTED -保持片选有效,PCS信号保持为低电平
    640           *      |__SPI_PCS_INACTIVE -片选无效,PCS信号变为高电平
    641           */

   \                                 In section .text, align 2, keep-with-next
    642          void LPLD_SPI_Master_Write(SPI_Type *spix,uint8 data,uint8 pcsx,uint8 pcs_state)
    643          {  
   \                     LPLD_SPI_Master_Write:
   \   00000000   0xB410             PUSH     {R4}
    644            
    645            spix->PUSHR = (((uint32_t)(((uint32_t)(pcs_state))<<SPI_PUSHR_CONT_SHIFT)) & SPI_PUSHR_CONT_MASK)
    646                         |SPI_PUSHR_CTAS(0)
    647                         |SPI_PUSHR_PCS(pcsx)
    648                         |data; 
   \   00000002   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000004   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   0x0414             LSLS     R4,R2,#+16
   \   00000008   0xF414 0x147C      ANDS     R4,R4,#0x3F0000
   \   0000000C   0xEA54 0x74C3      ORRS     R4,R4,R3, LSL #+31
   \   00000010   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000012   0x430C             ORRS     R4,R1,R4
   \   00000014   0x6344             STR      R4,[R0, #+52]
    649          
    650            while(!(spix->SR & SPI_SR_TCF_MASK));
   \                     ??LPLD_SPI_Master_Write_0:
   \   00000016   0x6AC4             LDR      R4,[R0, #+44]
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD5FC             BPL.N    ??LPLD_SPI_Master_Write_0
    651            spix->SR |= SPI_SR_TCF_MASK ;            
   \   0000001C   0x6AC4             LDR      R4,[R0, #+44]
   \   0000001E   0xF054 0x4400      ORRS     R4,R4,#0x80000000
   \   00000022   0x62C4             STR      R4,[R0, #+44]
    652          }
   \   00000024   0xBC10             POP      {R4}
   \   00000026   0x4770             BX       LR               ;; return
    653          
    654          

   \                                 In section .text, align 2, keep-with-next
    655          void SPI0_IRQHandler(void)
    656          {
   \                     SPI0_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    657          #if (UCOS_II > 0u)
    658            OS_CPU_SR  cpu_sr = 0u;
    659            OS_ENTER_CRITICAL(); 
    660            OSIntEnter();
    661            OS_EXIT_CRITICAL();
    662          #endif
    663            if( SPI0->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI0_IRQHandler_0
    664            {
    665              SPI0_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_44
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    666              SPI0->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI0_IRQHandler_1
    667            }
    668            else if( SPI0->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI0_IRQHandler_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI0_IRQHandler_2
    669            {
    670              SPI0_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_44
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    671              SPI0->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI0_IRQHandler_1
    672            }
    673            else if( SPI0->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI0_IRQHandler_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI0_IRQHandler_3
    674            {
    675              SPI0_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_44
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    676              SPI0->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI0_IRQHandler_1
    677            }
    678            else if( SPI0->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI0_IRQHandler_3:
   \   00000056   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI0_IRQHandler_4
    679            {  
    680              SPI0_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_44
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    681              SPI0->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI0_IRQHandler_1
    682            }
    683            else if( SPI0->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI0_IRQHandler_4:
   \   00000072   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI0_IRQHandler_5
    684            {   
    685              SPI0_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_44
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    686              SPI0->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI0_IRQHandler_1
    687            }
    688            else if( SPI0->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI0_IRQHandler_5:
   \   0000008E   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI0_IRQHandler_1
    689            {
    690              SPI0_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_44
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    691              SPI0->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_48  ;; 0x4002c02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_48  ;; 0x4002c02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    692            }
    693          #if (UCOS_II > 0u)
    694            OSIntExit();          
    695          #endif
    696          }
   \                     ??SPI0_IRQHandler_1:
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    697          
    698          

   \                                 In section .text, align 2, keep-with-next
    699          void SPI1_IRQHandler(void)
    700          {
   \                     SPI1_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    701          #if (UCOS_II > 0u)
    702            OS_CPU_SR  cpu_sr = 0u;
    703            OS_ENTER_CRITICAL(); 
    704            OSIntEnter();
    705            OS_EXIT_CRITICAL();
    706          #endif
    707            if( SPI1->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI1_IRQHandler_0
    708            {
    709              SPI1_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_45
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    710              SPI1->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI1_IRQHandler_1
    711            }
    712            else if( SPI1->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI1_IRQHandler_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI1_IRQHandler_2
    713            {
    714              SPI1_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_45
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    715              SPI1->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI1_IRQHandler_1
    716            }
    717            else if( SPI1->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI1_IRQHandler_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI1_IRQHandler_3
    718            {
    719              SPI1_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_45
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    720              SPI1->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI1_IRQHandler_1
    721            }
    722            else if( SPI1->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI1_IRQHandler_3:
   \   00000056   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI1_IRQHandler_4
    723            {  
    724              SPI1_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_45
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    725              SPI1->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI1_IRQHandler_1
    726            }
    727            else if( SPI1->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI1_IRQHandler_4:
   \   00000072   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI1_IRQHandler_5
    728            {   
    729              SPI1_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_45
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    730              SPI1->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI1_IRQHandler_1
    731            }
    732            else if( SPI1->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI1_IRQHandler_5:
   \   0000008E   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI1_IRQHandler_1
    733            {
    734              SPI1_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_45
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    735              SPI1->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_49  ;; 0x4002d02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_49  ;; 0x4002d02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    736            }
    737          #if (UCOS_II > 0u)
    738            OSIntExit();         
    739          #endif
    740          }
   \                     ??SPI1_IRQHandler_1:
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return
    741          
    742          

   \                                 In section .text, align 2, keep-with-next
    743          void SPI2_IRQHandler(void)
    744          {
   \                     SPI2_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    745          #if (UCOS_II > 0u)
    746            OS_CPU_SR  cpu_sr = 0u;
    747            OS_ENTER_CRITICAL(); 
    748            OSIntEnter();
    749            OS_EXIT_CRITICAL();
    750          #endif
    751            if( SPI2->SR & SPI_SR_TCF_MASK)
   \   00000002   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD509             BPL.N    ??SPI2_IRQHandler_0
    752            {
    753              SPI2_ISR[SPI_TxComplete_Int]();
   \   0000000A   0x....             LDR.N    R0,??DataTable8_46
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x4780             BLX      R0
    754              SPI2->SR |= SPI_SR_TCF_MASK;
   \   00000010   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x4000      ORRS     R0,R0,#0x80000000
   \   00000018   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE044             B.N      ??SPI2_IRQHandler_1
    755            }
    756            else if( SPI2->SR & SPI_SR_EOQF_MASK)
   \                     ??SPI2_IRQHandler_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x00C0             LSLS     R0,R0,#+3
   \   00000024   0xD509             BPL.N    ??SPI2_IRQHandler_2
    757            {
    758              SPI2_ISR[SPI_QueueEndReq_Int]();
   \   00000026   0x....             LDR.N    R0,??DataTable8_46
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0x4780             BLX      R0
    759              SPI2->SR |= SPI_SR_EOQF_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000034   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   00000036   0x6008             STR      R0,[R1, #+0]
   \   00000038   0xE036             B.N      ??SPI2_IRQHandler_1
    760            }
    761            else if( SPI2->SR & SPI_SR_TFUF_MASK)
   \                     ??SPI2_IRQHandler_2:
   \   0000003A   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x0100             LSLS     R0,R0,#+4
   \   00000040   0xD509             BPL.N    ??SPI2_IRQHandler_3
    762            {
    763              SPI2_ISR[SPI_TxFIFO_UnderflowInt]();
   \   00000042   0x....             LDR.N    R0,??DataTable8_46
   \   00000044   0x6880             LDR      R0,[R0, #+8]
   \   00000046   0x4780             BLX      R0
    764              SPI2->SR |= SPI_SR_TFUF_MASK;
   \   00000048   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000050   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   00000052   0x6008             STR      R0,[R1, #+0]
   \   00000054   0xE028             B.N      ??SPI2_IRQHandler_1
    765            }
    766            else if( SPI2->SR & SPI_SR_TFFF_MASK)
   \                     ??SPI2_IRQHandler_3:
   \   00000056   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0180             LSLS     R0,R0,#+6
   \   0000005C   0xD509             BPL.N    ??SPI2_IRQHandler_4
    767            {  
    768              SPI2_ISR[SPI_TxFIFO_FillInt]();    
   \   0000005E   0x....             LDR.N    R0,??DataTable8_46
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x4780             BLX      R0
    769              SPI2->SR |= SPI_SR_TFFF_MASK;
   \   00000064   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF050 0x7000      ORRS     R0,R0,#0x2000000
   \   0000006C   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000006E   0x6008             STR      R0,[R1, #+0]
   \   00000070   0xE01A             B.N      ??SPI2_IRQHandler_1
    770            }
    771            else if( SPI2->SR & SPI_SR_RFOF_MASK)
   \                     ??SPI2_IRQHandler_4:
   \   00000072   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x0300             LSLS     R0,R0,#+12
   \   00000078   0xD509             BPL.N    ??SPI2_IRQHandler_5
    772            {   
    773              SPI2_ISR[SPI_RxFIFO_OverflowInt]();
   \   0000007A   0x....             LDR.N    R0,??DataTable8_46
   \   0000007C   0x68C0             LDR      R0,[R0, #+12]
   \   0000007E   0x4780             BLX      R0
    774              SPI2->SR |= SPI_SR_RFOF_MASK;
   \   00000080   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000088   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE00C             B.N      ??SPI2_IRQHandler_1
    775            }
    776            else if( SPI2->SR & SPI_SR_RFDF_MASK)
   \                     ??SPI2_IRQHandler_5:
   \   0000008E   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x0380             LSLS     R0,R0,#+14
   \   00000094   0xD508             BPL.N    ??SPI2_IRQHandler_1
    777            {
    778              SPI2_ISR[SPI_RxFIFO_DrainInt]();
   \   00000096   0x....             LDR.N    R0,??DataTable8_46
   \   00000098   0x6940             LDR      R0,[R0, #+20]
   \   0000009A   0x4780             BLX      R0
    779              SPI2->SR |= SPI_SR_RFDF_MASK;
   \   0000009C   0x....             LDR.N    R0,??DataTable8_50  ;; 0x400ac02c
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   000000A4   0x....             LDR.N    R1,??DataTable8_50  ;; 0x400ac02c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    780            }
    781          #if (UCOS_II > 0u)
    782            OSIntExit();          
    783          #endif
    784          }
   \                     ??SPI2_IRQHandler_1:
   \   000000A8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x4002C000         DC32     0x4002c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x40049038         DC32     0x40049038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x4004C010         DC32     0x4004c010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x4004B008         DC32     0x4004b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x4004C014         DC32     0x4004c014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x4004B004         DC32     0x4004b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x4004C018         DC32     0x4004c018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x4004B000         DC32     0x4004b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x4004B014         DC32     0x4004b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x4004B018         DC32     0x4004b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   0x4004B01C         DC32     0x4004b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   0x4004A028         DC32     0x4004a028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   0x4004A024         DC32     0x4004a024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   0x4004D014         DC32     0x4004d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   0x4004D018         DC32     0x4004d018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   0x4004A02C         DC32     0x4004a02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   0x4004D008         DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   0x4004A040         DC32     0x4004a040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   0x4004A044         DC32     0x4004a044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_32:
   \   00000000   0x4004D00C         DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_33:
   \   00000000   0x400AC000         DC32     0x400ac000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_34:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_35:
   \   00000000   0x4004C02C         DC32     0x4004c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_36:
   \   00000000   0x4004A050         DC32     0x4004a050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_37:
   \   00000000   0x4004C03C         DC32     0x4004c03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_38:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_39:
   \   00000000   0x4004A054         DC32     0x4004a054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_40:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_41:
   \   00000000   0x4004A058         DC32     0x4004a058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_42:
   \   00000000   0x4004C038         DC32     0x4004c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_43:
   \   00000000   0x003F0C01         DC32     0x3f0c01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_44:
   \   00000000   0x........         DC32     SPI0_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_45:
   \   00000000   0x........         DC32     SPI1_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_46:
   \   00000000   0x........         DC32     SPI2_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_47:
   \   00000000   0x9A0A0000         DC32     0x9a0a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_48:
   \   00000000   0x4002C02C         DC32     0x4002c02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_49:
   \   00000000   0x4002D02C         DC32     0x4002d02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_50:
   \   00000000   0x400AC02C         DC32     0x400ac02c
    785          
    786          
    787          
    788          
    789          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  LPLD_SPI_Deinit
             24 -> NVIC_DisableIRQ
       24  LPLD_SPI_DisableIrq
             24 -> NVIC_DisableIRQ
       24  LPLD_SPI_EnableIrq
             24 -> NVIC_EnableIRQ
       80  LPLD_SPI_Init
        0  LPLD_SPI_Master_Read
        4  LPLD_SPI_Master_Write
        8  LPLD_SPI_Master_WriteRead
        4  NVIC_DisableIRQ
        4  NVIC_EnableIRQ
        8  SPI0_IRQHandler
              8 -- Indirect call
        8  SPI1_IRQHandler
              8 -- Indirect call
        8  SPI2_IRQHandler
              8 -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_19
       4  ??DataTable8_2
       4  ??DataTable8_20
       4  ??DataTable8_21
       4  ??DataTable8_22
       4  ??DataTable8_23
       4  ??DataTable8_24
       4  ??DataTable8_25
       4  ??DataTable8_26
       4  ??DataTable8_27
       4  ??DataTable8_28
       4  ??DataTable8_29
       4  ??DataTable8_3
       4  ??DataTable8_30
       4  ??DataTable8_31
       4  ??DataTable8_32
       4  ??DataTable8_33
       4  ??DataTable8_34
       4  ??DataTable8_35
       4  ??DataTable8_36
       4  ??DataTable8_37
       4  ??DataTable8_38
       4  ??DataTable8_39
       4  ??DataTable8_4
       4  ??DataTable8_40
       4  ??DataTable8_41
       4  ??DataTable8_42
       4  ??DataTable8_43
       4  ??DataTable8_44
       4  ??DataTable8_45
       4  ??DataTable8_46
       4  ??DataTable8_47
       4  ??DataTable8_48
       4  ??DataTable8_49
       4  ??DataTable8_5
       4  ??DataTable8_50
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     122  LPLD_SPI_Deinit
      62  LPLD_SPI_DisableIrq
      66  LPLD_SPI_EnableIrq
    1664  LPLD_SPI_Init
      24  LPLD_SPI_Master_Read
      40  LPLD_SPI_Master_Write
      62  LPLD_SPI_Master_WriteRead
      26  NVIC_DisableIRQ
      26  NVIC_EnableIRQ
     170  SPI0_IRQHandler
      24  SPI0_ISR
     170  SPI1_IRQHandler
      24  SPI1_ISR
     170  SPI2_IRQHandler
      24  SPI2_ISR

 
    72 bytes in section .bss
 2 806 bytes in section .text
 
 2 806 bytes of CODE memory
    72 bytes of DATA memory

Errors: none
Warnings: none
