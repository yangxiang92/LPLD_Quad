###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:19 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\buzzer.c                                              #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\buzzer.c -D LPLD_K60 -lCN                             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\buzzer.lst                                      #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\buzzer.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\buzzer.c
      1          /****************************************************************************** 
      2           *       buzzer.c ----- The code of buzzer          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  buzzer.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/3/22 15:20:56                                                       *
     10           ******************************************************************************/
     11          #include "buzzer.h"
     12          

   \                                 In section .bss, align 1
     13          uint8 g_buzzer_mode = 0;
   \                     g_buzzer_mode:
   \   00000000                      DS8 1
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void InitBuzzer(void)
     16          {
   \                     InitBuzzer:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     17              GPIO_InitTypeDef buzzer_init_struct = {0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2114             MOVS     R1,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     18          
     19              buzzer_init_struct.GPIO_PTx = BUZZER_PORT;
   \   0000000C   0x....             LDR.N    R0,??DataTable6  ;; 0x400ff040
   \   0000000E   0x9001             STR      R0,[SP, #+4]
     20              buzzer_init_struct.GPIO_Pins = BUZZER_GPIO_PIN;
   \   00000010   0x2009             MOVS     R0,#+9
   \   00000012   0x.... 0x....      BL       PinNum2GpioPin
   \   00000016   0x9002             STR      R0,[SP, #+8]
     21              buzzer_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0010      STRB     R0,[SP, #+16]
     22              buzzer_init_struct.GPIO_Output = OUTPUT_L;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0011      STRB     R0,[SP, #+17]
     23              LPLD_GPIO_Init(buzzer_init_struct);
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0xB084             SUB      SP,SP,#+16
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x2214             MOVS     R2,#+20
   \   0000002C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000030   0xBC0F             POP      {R0-R3}
   \   00000032   0x.... 0x....      BL       LPLD_GPIO_Init
     24          
     25              InitBuzzerTimer();
   \   00000036   0x.... 0x....      BL       InitBuzzerTimer
     26          }
   \   0000003A   0xB007             ADD      SP,SP,#+28
   \   0000003C   0xBD00             POP      {PC}             ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void InitBuzzerTimer(void)
     29          {
   \                     InitBuzzerTimer:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     30              PIT_InitTypeDef buzzer_timer_init_struct = {BUZZER_TIMER_PITX};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x....             LDR.N    R1,??DataTable6_1
   \   00000008   0x2214             MOVS     R2,#+20
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
     31          
     32              buzzer_timer_init_struct.PIT_Pitx = BUZZER_TIMER_PITX;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xF88D 0x0004      STRB     R0,[SP, #+4]
     33              buzzer_timer_init_struct.PIT_PeriodS = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9004             STR      R0,[SP, #+16]
     34              buzzer_timer_init_struct.PIT_PeriodMs = BUZZER_TIMER_PERIOD_MS;
   \   00000018   0x2032             MOVS     R0,#+50
   \   0000001A   0x9003             STR      R0,[SP, #+12]
     35              buzzer_timer_init_struct.PIT_PeriodUs = 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9002             STR      R0,[SP, #+8]
     36              buzzer_timer_init_struct.PIT_Isr = BuzzerTimerIsr;
   \   00000020   0x.... 0x....      ADR.W    R0,BuzzerTimerIsr
   \   00000024   0x9005             STR      R0,[SP, #+20]
     37          
     38              LPLD_PIT_Init(buzzer_timer_init_struct);
   \   00000026   0xA901             ADD      R1,SP,#+4
   \   00000028   0xB084             SUB      SP,SP,#+16
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x2214             MOVS     R2,#+20
   \   0000002E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000032   0xBC0F             POP      {R0-R3}
   \   00000034   0x.... 0x....      BL       LPLD_PIT_Init
     39              LPLD_PIT_EnableIrq(buzzer_timer_init_struct);
   \   00000038   0xA901             ADD      R1,SP,#+4
   \   0000003A   0xB084             SUB      SP,SP,#+16
   \   0000003C   0x4668             MOV      R0,SP
   \   0000003E   0x2214             MOVS     R2,#+20
   \   00000040   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000044   0xBC0F             POP      {R0-R3}
   \   00000046   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     40          }
   \   0000004A   0xB007             ADD      SP,SP,#+28
   \   0000004C   0xBD00             POP      {PC}             ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void TurnOnBuzzer(void)
     43          {
   \                     TurnOnBuzzer:
   \   00000000   0xB580             PUSH     {R7,LR}
     44              if(g_sQuadSystemFlag.sys_setting.use_buzzer || g_sQuadSystemFlag.switch_setting_unvalid)
   \   00000002   0x....             LDR.N    R0,??DataTable6_2
   \   00000004   0x7A80             LDRB     R0,[R0, #+10]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD103             BNE.N    ??TurnOnBuzzer_0
   \   0000000A   0x....             LDR.N    R0,??DataTable6_2
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD002             BEQ.N    ??TurnOnBuzzer_1
     45              {
     46                  SetBuzzerOnOff(1);
   \                     ??TurnOnBuzzer_0:
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       SetBuzzerOnOff
     47              }
     48          }
   \                     ??TurnOnBuzzer_1:
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void TurnOffBuzzer(void)
     51          {
   \                     TurnOffBuzzer:
   \   00000000   0xB580             PUSH     {R7,LR}
     52              SetBuzzerOnOff(0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       SetBuzzerOnOff
     53          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          void SetBuzzerOnOff(uint8 state)
     56          {
     57              BUZZER_OUTPUT = state;
   \                     SetBuzzerOnOff:
   \   00000000   0x....             LDR.N    R1,??DataTable6_3  ;; 0x43fe0824
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x6008             STR      R0,[R1, #+0]
     58          }
   \   00000006   0x4770             BX       LR               ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void ToggleBuzzer(void)
     61          {
   \                     ToggleBuzzer:
   \   00000000   0xB580             PUSH     {R7,LR}
     62              LPLD_GPIO_Toggle_b(BUZZER_PORT, BUZZER_PIN_NUM);
   \   00000002   0x2109             MOVS     R1,#+9
   \   00000004   0x....             LDR.N    R0,??DataTable6  ;; 0x400ff040
   \   00000006   0x.... 0x....      BL       LPLD_GPIO_Toggle_b
     63          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void SetBuzzerMode(uint8 buzzer_mode)
     66          {
     67              g_buzzer_mode = buzzer_mode;
   \                     SetBuzzerMode:
   \   00000000   0x....             LDR.N    R1,??DataTable6_4
   \   00000002   0x7008             STRB     R0,[R1, #+0]
     68          }
   \   00000004   0x4770             BX       LR               ;; return
     69          

   \                                 In section .text, align 4, keep-with-next
     70          void BuzzerTimerIsr(void)
     71          {
   \                     BuzzerTimerIsr:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     72              static uint32 buzzer_timer_cnt = 0;
     73              static uint8 buzzer_mode_now = 0;
     74              int16 buzzer_on_time = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     75              int16 buzzer_off_time = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     76          
     77              if(buzzer_mode_now != g_buzzer_mode)
   \   00000006   0x....             LDR.N    R0,??DataTable6_5
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable6_4
   \   0000000C   0x7809             LDRB     R1,[R1, #+0]
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD006             BEQ.N    ??BuzzerTimerIsr_0
     78              {
     79                  buzzer_mode_now = g_buzzer_mode;
   \   00000012   0x....             LDR.N    R0,??DataTable6_5
   \   00000014   0x....             LDR.N    R1,??DataTable6_4
   \   00000016   0x7809             LDRB     R1,[R1, #+0]
   \   00000018   0x7001             STRB     R1,[R0, #+0]
     80                  buzzer_timer_cnt = 0;
   \   0000001A   0x....             LDR.N    R0,??DataTable6_6
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     81              }
     82          
     83              buzzer_timer_cnt ++;
   \                     ??BuzzerTimerIsr_0:
   \   00000020   0x....             LDR.N    R0,??DataTable6_6
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x....             LDR.N    R1,??DataTable6_6
   \   00000028   0x6008             STR      R0,[R1, #+0]
     84          
     85              switch(buzzer_mode_now)
   \   0000002A   0x....             LDR.N    R0,??DataTable6_5
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD002             BEQ.N    ??BuzzerTimerIsr_1
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD005             BEQ.N    ??BuzzerTimerIsr_2
   \   00000036   0xE009             B.N      ??BuzzerTimerIsr_3
     86              {
     87                  case 0: buzzer_on_time = 0;
   \                     ??BuzzerTimerIsr_1:
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0004             MOVS     R4,R0
     88                          buzzer_off_time = 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x0005             MOVS     R5,R0
     89                          break;
   \   00000040   0xE00C             B.N      ??BuzzerTimerIsr_4
     90                  case 1: buzzer_on_time = 1;
   \                     ??BuzzerTimerIsr_2:
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x0004             MOVS     R4,R0
     91                          buzzer_off_time = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x0005             MOVS     R5,R0
     92                          break;
   \   0000004A   0xE007             B.N      ??BuzzerTimerIsr_4
     93                  default:buzzer_on_time = buzzer_mode_now - 1;
   \                     ??BuzzerTimerIsr_3:
   \   0000004C   0x....             LDR.N    R0,??DataTable6_5
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x1E40             SUBS     R0,R0,#+1
   \   00000052   0x0004             MOVS     R4,R0
     94                          buzzer_off_time = buzzer_mode_now - 1;
   \   00000054   0x....             LDR.N    R0,??DataTable6_5
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x1E40             SUBS     R0,R0,#+1
   \   0000005A   0x0005             MOVS     R5,R0
     95                          break;
     96              }
     97          
     98              if(buzzer_timer_cnt <= buzzer_on_time)
   \                     ??BuzzerTimerIsr_4:
   \   0000005C   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   0000005E   0x....             LDR.N    R0,??DataTable6_6
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD302             BCC.N    ??BuzzerTimerIsr_5
     99              {
    100                  TurnOnBuzzer();
   \   00000066   0x.... 0x....      BL       TurnOnBuzzer
   \   0000006A   0xE00C             B.N      ??BuzzerTimerIsr_6
    101              }
    102              else if(buzzer_timer_cnt <= (buzzer_on_time + buzzer_off_time))
   \                     ??BuzzerTimerIsr_5:
   \   0000006C   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000006E   0xFA05 0xF084      SXTAH    R0,R5,R4
   \   00000072   0x....             LDR.N    R1,??DataTable6_6
   \   00000074   0x6809             LDR      R1,[R1, #+0]
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD302             BCC.N    ??BuzzerTimerIsr_7
    103              {
    104                  TurnOffBuzzer();
   \   0000007A   0x.... 0x....      BL       TurnOffBuzzer
   \   0000007E   0xE002             B.N      ??BuzzerTimerIsr_6
    105              }
    106              else
    107              {
    108                  //buzzer_mode_now = g_buzzer_mode;         // g_buzzer_mode is like a buffer 
    109                  buzzer_timer_cnt = 0;
   \                     ??BuzzerTimerIsr_7:
   \   00000080   0x....             LDR.N    R0,??DataTable6_6
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x6001             STR      R1,[R0, #+0]
    110              }
    111          }
   \                     ??BuzzerTimerIsr_6:
   \   00000086   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .bss, align 4
   \                     ??buzzer_timer_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??buzzer_mode_now:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     `?<Constant {2}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     g_sQuadSystemFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x43FE0824         DC32     0x43fe0824

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     g_buzzer_mode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     ??buzzer_mode_now

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     ??buzzer_timer_cnt

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {2}>`:
   \   00000000   0x02 0x00          DC8 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  BuzzerTimerIsr
             16 -> TurnOffBuzzer
             16 -> TurnOnBuzzer
       48  InitBuzzer
             32 -> InitBuzzerTimer
             32 -> LPLD_GPIO_Init
             32 -> PinNum2GpioPin
             32 -> __aeabi_memclr4
             48 -> __aeabi_memcpy4
       48  InitBuzzerTimer
             32 -> LPLD_PIT_EnableIrq
             32 -> LPLD_PIT_Init
             32 -> __aeabi_memcpy4
             48 -> __aeabi_memcpy4
        0  SetBuzzerMode
        0  SetBuzzerOnOff
        8  ToggleBuzzer
              8 -> LPLD_GPIO_Toggle_b
        8  TurnOffBuzzer
              8 -> SetBuzzerOnOff
        8  TurnOnBuzzer
              8 -> SetBuzzerOnOff


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant {(GPIO_Type *)0}>
      20  ?<Constant {2}>
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
     136  BuzzerTimerIsr
      62  InitBuzzer
      78  InitBuzzerTimer
       6  SetBuzzerMode
       8  SetBuzzerOnOff
      12  ToggleBuzzer
      10  TurnOffBuzzer
      26  TurnOnBuzzer
       1  buzzer_mode_now
       4  buzzer_timer_cnt
       1  g_buzzer_mode

 
   6 bytes in section .bss
  40 bytes in section .rodata
 366 bytes in section .text
 
 366 bytes of CODE  memory
  40 bytes of CONST memory
   6 bytes of DATA  memory

Errors: none
Warnings: none
