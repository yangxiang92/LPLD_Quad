###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     12/Apr/2014  10:06:42 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\modu #
#                    le\eMPL\inv_mpu_dmp_motion_driver.c                      #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\modu #
#                    le\eMPL\inv_mpu_dmp_motion_driver.c -D LPLD_K60 -lCN     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ #
#                    iar\..\source\app\Communicate\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\..\source\module\eMPL\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\source\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qua #
#                    d_V2\iar\..\source\lib\LPLD\HW\ -I                       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\LPLD\DEV\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD #
#                    _Quad_V2\iar\..\source\lib\uCOS-II\Ports\ -I             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\uCOS-II\Source\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V2\iar\..\source\lib\FatFs\ -I               #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpace\ #
#                    LPLD_Quad_V2\iar\..\source\lib\USB\common\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\source\lib\USB\descriptor\ -I          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\USB\class\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\source\lib\MyLib\ -On -I "D:\Program    #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\CMSIS\Include\" -D ARM_MATH_CM4                  #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\FLASH_M #
#                    INE\List\inv_mpu_dmp_motion_driver.lst                   #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\FLASH_M #
#                    INE\Obj\inv_mpu_dmp_motion_driver.o                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\module\eMPL\inv_mpu_dmp_motion_driver.c
      1          /*
      2           $License:
      3              Copyright (C) 2011-2012 InvenSense Corporation, All Rights Reserved.
      4              See included License.txt for License information.
      5           $
      6           */
      7          /**
      8           *  @addtogroup  DRIVERS Sensor Driver Layer
      9           *  @brief       Hardware drivers to communicate with sensors via I2C.
     10           *
     11           *  @{
     12           *      @file       inv_mpu_dmp_motion_driver.c
     13           *      @brief      DMP image and interface functions.
     14           *      @details    All functions are preceded by the dmp_ prefix to
     15           *                  differentiate among MPL and general driver function calls.
     16           */
     17          #define _STDLIB_H
     18          #include <stdint.h>
     19          #include <stdlib.h>
     20          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x0032             MOVS     R2,R6
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x002A             MOVS     R2,R5
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       __aeabi_memset
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0xBD70             POP      {R4-R6,PC}       ;; return
     21          #include <math.h>
     22          #include "dmp.h"
     23          #include "inv_mpu.h"
     24          #include "inv_mpu_dmp_motion_driver.h"
     25          #include "dmpKey.h"
     26          #include "dmpmap.h"
     27          
     28          #define  MOTION_DRIVER_TARGET_MSP430
     29          /* The following functions must be defined for this platform:
     30           * i2c_write(unsigned char slave_addr, unsigned char reg_addr,
     31           *      unsigned char length, unsigned char const *data)
     32           * i2c_read(unsigned char slave_addr, unsigned char reg_addr,
     33           *      unsigned char length, unsigned char *data)
     34           * delay_ms(unsigned long num_ms)
     35           * get_ms(unsigned long *count)
     36           */
     37          #if defined MOTION_DRIVER_TARGET_MSP430
     38          //#include "msp430.h"
     39          //#include "msp430_clock.h"
     40          #define delay_ms    delay_ms
     41          #define get_ms      get_ms
     42          #define log_i(...)     do {} while (0)
     43          #define log_e(...)     do {} while (0)
     44          
     45          #elif defined EMPL_TARGET_MSP430
     46          #include "msp430.h"
     47          #include "msp430_clock.h"
     48          #include "log.h"
     49          #define delay_ms    msp430_delay_ms
     50          #define get_ms      msp430_get_clock_ms
     51          #define log_i       MPL_LOGI
     52          #define log_e       MPL_LOGE
     53          
     54          #elif defined EMPL_TARGET_UC3L0
     55          /* Instead of using the standard TWI driver from the ASF library, we're using
     56           * a TWI driver that follows the slave address + register address convention.
     57           */
     58          #include "delay.h"
     59          #include "sysclk.h"
     60          #include "log.h"
     61          #include "uc3l0_clock.h"
     62          /* delay_ms is a function already defined in ASF. */
     63          #define get_ms  uc3l0_get_clock_ms
     64          #define log_i       MPL_LOGI
     65          #define log_e       MPL_LOGE
     66          
     67          #else
     68          //#error  Gyro driver is missing the system layer implementations.
     69          #endif
     70          
     71          /* These defines are copied from dmpDefaultMPU6050.c in the general MPL
     72           * releases. These defines may change for each DMP image, so be sure to modify
     73           * these values when switching to a new image.
     74           */
     75          #define CFG_LP_QUAT             (2712)
     76          #define END_ORIENT_TEMP         (1866)
     77          #define CFG_27                  (2742)
     78          #define CFG_20                  (2224)
     79          #define CFG_23                  (2745)
     80          #define CFG_FIFO_ON_EVENT       (2690)
     81          #define END_PREDICTION_UPDATE   (1761)
     82          #define CGNOTICE_INTR           (2620)
     83          #define X_GRT_Y_TMP             (1358)
     84          #define CFG_DR_INT              (1029)
     85          #define CFG_AUTH                (1035)
     86          #define UPDATE_PROP_ROT         (1835)
     87          #define END_COMPARE_Y_X_TMP2    (1455)
     88          #define SKIP_X_GRT_Y_TMP        (1359)
     89          #define SKIP_END_COMPARE        (1435)
     90          #define FCFG_3                  (1088)
     91          #define FCFG_2                  (1066)
     92          #define FCFG_1                  (1062)
     93          #define END_COMPARE_Y_X_TMP3    (1434)
     94          #define FCFG_7                  (1073)
     95          #define FCFG_6                  (1106)
     96          #define FLAT_STATE_END          (1713)
     97          #define SWING_END_4             (1616)
     98          #define SWING_END_2             (1565)
     99          #define SWING_END_3             (1587)
    100          #define SWING_END_1             (1550)
    101          #define CFG_8                   (2718)
    102          #define CFG_15                  (2727)
    103          #define CFG_16                  (2746)
    104          #define CFG_EXT_GYRO_BIAS       (1189)
    105          #define END_COMPARE_Y_X_TMP     (1407)
    106          #define DO_NOT_UPDATE_PROP_ROT  (1839)
    107          #define CFG_7                   (1205)
    108          #define FLAT_STATE_END_TEMP     (1683)
    109          #define END_COMPARE_Y_X         (1484)
    110          #define SKIP_SWING_END_1        (1551)
    111          #define SKIP_SWING_END_3        (1588)
    112          #define SKIP_SWING_END_2        (1566)
    113          #define TILTG75_START           (1672)
    114          #define CFG_6                   (2753)
    115          #define TILTL75_END             (1669)
    116          #define END_ORIENT              (1884)
    117          #define CFG_FLICK_IN            (2573)
    118          #define TILTL75_START           (1643)
    119          #define CFG_MOTION_BIAS         (1208)
    120          #define X_GRT_Y                 (1408)
    121          #define TEMPLABEL               (2324)
    122          #define CFG_ANDROID_ORIENT_INT  (1853)
    123          #define CFG_GYRO_RAW_DATA       (2722)
    124          #define X_GRT_Y_TMP2            (1379)
    125          
    126          #define D_0_22                  (22+512)
    127          #define D_0_24                  (24+512)
    128          
    129          #define D_0_36                  (36)
    130          #define D_0_52                  (52)
    131          #define D_0_96                  (96)
    132          #define D_0_104                 (104)
    133          #define D_0_108                 (108)
    134          #define D_0_163                 (163)
    135          #define D_0_188                 (188)
    136          #define D_0_192                 (192)
    137          #define D_0_224                 (224)
    138          #define D_0_228                 (228)
    139          #define D_0_232                 (232)
    140          #define D_0_236                 (236)
    141          
    142          #define D_1_2                   (256 + 2)
    143          #define D_1_4                   (256 + 4)
    144          #define D_1_8                   (256 + 8)
    145          #define D_1_10                  (256 + 10)
    146          #define D_1_24                  (256 + 24)
    147          #define D_1_28                  (256 + 28)
    148          #define D_1_36                  (256 + 36)
    149          #define D_1_40                  (256 + 40)
    150          #define D_1_44                  (256 + 44)
    151          #define D_1_72                  (256 + 72)
    152          #define D_1_74                  (256 + 74)
    153          #define D_1_79                  (256 + 79)
    154          #define D_1_88                  (256 + 88)
    155          #define D_1_90                  (256 + 90)
    156          #define D_1_92                  (256 + 92)
    157          #define D_1_96                  (256 + 96)
    158          #define D_1_98                  (256 + 98)
    159          #define D_1_106                 (256 + 106)
    160          #define D_1_108                 (256 + 108)
    161          #define D_1_112                 (256 + 112)
    162          #define D_1_128                 (256 + 144)
    163          #define D_1_152                 (256 + 12)
    164          #define D_1_160                 (256 + 160)
    165          #define D_1_176                 (256 + 176)
    166          #define D_1_178                 (256 + 178)
    167          #define D_1_218                 (256 + 218)
    168          #define D_1_232                 (256 + 232)
    169          #define D_1_236                 (256 + 236)
    170          #define D_1_240                 (256 + 240)
    171          #define D_1_244                 (256 + 244)
    172          #define D_1_250                 (256 + 250)
    173          #define D_1_252                 (256 + 252)
    174          #define D_2_12                  (512 + 12)
    175          #define D_2_96                  (512 + 96)
    176          #define D_2_108                 (512 + 108)
    177          #define D_2_208                 (512 + 208)
    178          #define D_2_224                 (512 + 224)
    179          #define D_2_236                 (512 + 236)
    180          #define D_2_244                 (512 + 244)
    181          #define D_2_248                 (512 + 248)
    182          #define D_2_252                 (512 + 252)
    183          
    184          #define CPASS_BIAS_X            (35 * 16 + 4)
    185          #define CPASS_BIAS_Y            (35 * 16 + 8)
    186          #define CPASS_BIAS_Z            (35 * 16 + 12)
    187          #define CPASS_MTX_00            (36 * 16)
    188          #define CPASS_MTX_01            (36 * 16 + 4)
    189          #define CPASS_MTX_02            (36 * 16 + 8)
    190          #define CPASS_MTX_10            (36 * 16 + 12)
    191          #define CPASS_MTX_11            (37 * 16)
    192          #define CPASS_MTX_12            (37 * 16 + 4)
    193          #define CPASS_MTX_20            (37 * 16 + 8)
    194          #define CPASS_MTX_21            (37 * 16 + 12)
    195          #define CPASS_MTX_22            (43 * 16 + 12)
    196          #define D_EXT_GYRO_BIAS_X       (61 * 16)
    197          #define D_EXT_GYRO_BIAS_Y       (61 * 16) + 4
    198          #define D_EXT_GYRO_BIAS_Z       (61 * 16) + 8
    199          #define D_ACT0                  (40 * 16)
    200          #define D_ACSX                  (40 * 16 + 4)
    201          #define D_ACSY                  (40 * 16 + 8)
    202          #define D_ACSZ                  (40 * 16 + 12)
    203          
    204          #define FLICK_MSG               (45 * 16 + 4)
    205          #define FLICK_COUNTER           (45 * 16 + 8)
    206          #define FLICK_LOWER             (45 * 16 + 12)
    207          #define FLICK_UPPER             (46 * 16 + 12)
    208          
    209          #define D_AUTH_OUT              (992)
    210          #define D_AUTH_IN               (996)
    211          #define D_AUTH_A                (1000)
    212          #define D_AUTH_B                (1004)
    213          
    214          #define D_PEDSTD_BP_B           (768 + 0x1C)
    215          #define D_PEDSTD_HP_A           (768 + 0x78)
    216          #define D_PEDSTD_HP_B           (768 + 0x7C)
    217          #define D_PEDSTD_BP_A4          (768 + 0x40)
    218          #define D_PEDSTD_BP_A3          (768 + 0x44)
    219          #define D_PEDSTD_BP_A2          (768 + 0x48)
    220          #define D_PEDSTD_BP_A1          (768 + 0x4C)
    221          #define D_PEDSTD_INT_THRSH      (768 + 0x68)
    222          #define D_PEDSTD_CLIP           (768 + 0x6C)
    223          #define D_PEDSTD_SB             (768 + 0x28)
    224          #define D_PEDSTD_SB_TIME        (768 + 0x2C)
    225          #define D_PEDSTD_PEAKTHRSH      (768 + 0x98)
    226          #define D_PEDSTD_TIML           (768 + 0x2A)
    227          #define D_PEDSTD_TIMH           (768 + 0x2E)
    228          #define D_PEDSTD_PEAK           (768 + 0X94)
    229          #define D_PEDSTD_STEPCTR        (768 + 0x60)
    230          #define D_PEDSTD_TIMECTR        (964)
    231          #define D_PEDSTD_DECI           (768 + 0xA0)
    232          
    233          #define D_HOST_NO_MOT           (976)
    234          #define D_ACCEL_BIAS            (660)
    235          
    236          #define D_ORIENT_GAP            (76)
    237          
    238          #define D_TILT0_H               (48)
    239          #define D_TILT0_L               (50)
    240          #define D_TILT1_H               (52)
    241          #define D_TILT1_L               (54)
    242          #define D_TILT2_H               (56)
    243          #define D_TILT2_L               (58)
    244          #define D_TILT3_H               (60)
    245          #define D_TILT3_L               (62)
    246          
    247          #define DMP_CODE_SIZE           (3062)
    248          

   \                                 In section .rodata, align 4
    249          static const unsigned char dmp_memory[DMP_CODE_SIZE] = {
   \                     dmp_memory:
   \   00000000   0x00 0x00          DC8 0, 0, 112, 0, 0, 0, 0, 36, 0, 0, 0, 2, 0, 3, 0, 0, 0, 101, 0, 84
   \              0x70 0x00    
   \              0x00 0x00    
   \              0x00 0x24    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x03    
   \              0x00 0x00    
   \              0x00 0x65    
   \              0x00 0x54    
   \   00000014   0xFF 0xEF          DC8 255, 239, 0, 0, 250, 128, 0, 11, 18, 130, 0, 1, 3, 12, 48, 195, 14
   \              0x00 0x00    
   \              0xFA 0x80    
   \              0x00 0x0B    
   \              0x12 0x82    
   \              0x00 0x01    
   \              0x03 0x0C    
   \              0x30 0xC3    
   \              0x0E         
   \   00000025   0x8C 0x8C          DC8 140, 140, 233, 20, 213, 64, 2, 19, 113, 15, 142, 56, 131, 248, 131
   \              0xE9 0x14    
   \              0xD5 0x40    
   \              0x02 0x13    
   \              0x71 0x0F    
   \              0x8E 0x38    
   \              0x83 0xF8    
   \              0x83         
   \   00000034   0x30 0x00          DC8 48, 0, 248, 131, 37, 142, 248, 131, 48, 0, 248, 131, 255, 255, 255
   \              0xF8 0x83    
   \              0x25 0x8E    
   \              0xF8 0x83    
   \              0x30 0x00    
   \              0xF8 0x83    
   \              0xFF 0xFF    
   \              0xFF         
   \   00000043   0xFF 0x0F          DC8 255, 15, 254, 169, 214, 36, 0, 4, 0, 26, 130, 121, 161, 0, 0, 0, 60
   \              0xFE 0xA9    
   \              0xD6 0x24    
   \              0x00 0x04    
   \              0x00 0x1A    
   \              0x82 0x79    
   \              0xA1 0x00    
   \              0x00 0x00    
   \              0x3C         
   \   00000054   0xFF 0xFF          DC8 255, 255, 0, 0, 0, 16, 0, 0, 56, 131, 111, 162, 0, 62, 3, 48, 64, 0
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x00 0x00    
   \              0x38 0x83    
   \              0x6F 0xA2    
   \              0x00 0x3E    
   \              0x03 0x30    
   \              0x40 0x00    
   \   00000066   0x00 0x00          DC8 0, 0, 2, 202, 227, 9, 62, 128, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 64, 0
   \              0x02 0xCA    
   \              0xE3 0x09    
   \              0x3E 0x80    
   \              0x00 0x00    
   \              0x20 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x00    
   \   0000007A   0x00 0x00          DC8 0, 0, 96, 0, 0, 0, 0, 12, 0, 0, 0, 12, 24, 110, 0, 0, 6, 146, 10
   \              0x60 0x00    
   \              0x00 0x00    
   \              0x00 0x0C    
   \              0x00 0x00    
   \              0x00 0x0C    
   \              0x18 0x6E    
   \              0x00 0x00    
   \              0x06 0x92    
   \              0x0A         
   \   0000008D   0x16 0xC0          DC8 22, 192, 223, 255, 255, 2, 86, 253, 140, 211, 119, 255, 225, 196
   \              0xDF 0xFF    
   \              0xFF 0x02    
   \              0x56 0xFD    
   \              0x8C 0xD3    
   \              0x77 0xFF    
   \              0xE1 0xC4    
   \   0000009B   0x96 0xE0          DC8 150, 224, 197, 190, 170, 0, 0, 0, 0, 255, 255, 11, 43, 0, 0, 22, 87
   \              0xC5 0xBE    
   \              0xAA 0x00    
   \              0x00 0x00    
   \              0x00 0xFF    
   \              0xFF 0x0B    
   \              0x2B 0x00    
   \              0x00 0x16    
   \              0x57         
   \   000000AC   0x00 0x00          DC8 0, 0, 3, 89, 64, 0, 0, 0, 0, 0, 29, 250, 0, 2, 108, 29, 0, 0, 0, 0
   \              0x03 0x59    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1D 0xFA    
   \              0x00 0x02    
   \              0x6C 0x1D    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C0   0x3F 0xFF          DC8 63, 255, 223, 235, 0, 62, 179, 182, 0, 13, 34, 120, 0, 0, 47, 60, 0
   \              0xDF 0xEB    
   \              0x00 0x3E    
   \              0xB3 0xB6    
   \              0x00 0x0D    
   \              0x22 0x78    
   \              0x00 0x00    
   \              0x2F 0x3C    
   \              0x00         
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 25, 66, 181, 0, 0, 57, 162, 0, 0, 179, 101, 217, 14
   \              0x00 0x00    
   \              0x19 0x42    
   \              0xB5 0x00    
   \              0x00 0x39    
   \              0xA2 0x00    
   \              0x00 0xB3    
   \              0x65 0xD9    
   \              0x0E         
   \   000000E2   0x9F 0xC9          DC8 159, 201, 29, 207, 76, 52, 48, 0, 0, 0, 80, 0, 0, 0, 59, 182, 122
   \              0x1D 0xCF    
   \              0x4C 0x34    
   \              0x30 0x00    
   \              0x00 0x00    
   \              0x50 0x00    
   \              0x00 0x00    
   \              0x3B 0xB6    
   \              0x7A         
   \   000000F3   0xE8 0x00          DC8 232, 0, 100, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0
   \              0x64 0x00    
   \              0x00 0x00    
   \              0xC8 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x00         
   \   00000106   0xFA 0x92          DC8 250, 146, 16, 0, 34, 94, 0, 13, 34, 159, 0, 1, 0, 0, 0, 50, 0, 0
   \              0x10 0x00    
   \              0x22 0x5E    
   \              0x00 0x0D    
   \              0x22 0x9F    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x32    
   \              0x00 0x00    
   \   00000118   0xFF 0x46          DC8 255, 70, 0, 0, 99, 212, 0, 0, 16, 0, 0, 0, 4, 214, 0, 0, 4, 204, 0
   \              0x00 0x00    
   \              0x63 0xD4    
   \              0x00 0x00    
   \              0x10 0x00    
   \              0x00 0x00    
   \              0x04 0xD6    
   \              0x00 0x00    
   \              0x04 0xCC    
   \              0x00         
   \   0000012B   0x00 0x04          DC8 0, 4, 204, 0, 0, 0, 0, 16, 114, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xCC 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x72 0x00    
   \              0x00 0x00    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000140   0x00 0x06          DC8 0, 6, 0, 2, 0, 5, 0, 7, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x02    
   \              0x00 0x05    
   \              0x00 0x07    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x64    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000156   0x00 0x05          DC8 0, 5, 0, 5, 0, 100, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64
   \              0x00 0x05    
   \              0x00 0x64    
   \              0x00 0x20    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40         
   \   0000016B   0x00 0x00          DC8 0, 0, 0, 3, 0, 0, 0, 0, 50, 248, 152, 0, 0, 255, 101, 0, 0, 131, 15
   \              0x00 0x03    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x32 0xF8    
   \              0x98 0x00    
   \              0x00 0xFF    
   \              0x65 0x00    
   \              0x00 0x83    
   \              0x0F         
   \   0000017E   0x00 0x00          DC8 0, 0, 255, 155, 252, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xFF 0x9B    
   \              0xFC 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000193   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000001AA   0x00 0x00          DC8 0, 0, 0, 0, 16, 0, 64, 0, 0, 0, 0, 0, 0, 6, 0, 0, 178, 106, 0, 2, 0
   \              0x00 0x00    
   \              0x10 0x00    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x06    
   \              0x00 0x00    
   \              0xB2 0x6A    
   \              0x00 0x02    
   \              0x00         
   \   000001BF   0x00 0x00          DC8 0, 0, 1, 251, 131, 0, 104, 0, 0, 0, 217, 252, 0, 124, 241, 255, 131
   \              0x01 0xFB    
   \              0x83 0x00    
   \              0x68 0x00    
   \              0x00 0x00    
   \              0xD9 0xFC    
   \              0x00 0x7C    
   \              0xF1 0xFF    
   \              0x83         
   \   000001D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 101, 0, 0, 0, 100, 3, 232, 0, 100, 0, 40, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x65    
   \              0x00 0x00    
   \              0x00 0x64    
   \              0x03 0xE8    
   \              0x00 0x64    
   \              0x00 0x28    
   \              0x00 0x00    
   \              0x00         
   \   000001E3   0x25 0x00          DC8 37, 0, 0, 0, 0, 22, 160, 0, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 47, 0
   \              0x00 0x00    
   \              0x00 0x16    
   \              0xA0 0x00    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x00 0x00    
   \              0x00 0x10    
   \              0x00 0x00    
   \              0x2F 0x00    
   \   000001F7   0x00 0x00          DC8 0, 0, 0, 1, 244, 0, 0, 16, 0, 0, 40, 0, 0, 255, 255, 69, 129, 255
   \              0x00 0x01    
   \              0xF4 0x00    
   \              0x00 0x10    
   \              0x00 0x00    
   \              0x28 0x00    
   \              0x00 0xFF    
   \              0xFF 0x45    
   \              0x81 0xFF    
   \   00000209   0xFF 0xFA          DC8 255, 250, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 5, 0, 5, 186, 198
   \              0x72 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x44 0x00    
   \              0x05 0x00    
   \              0x05 0xBA    
   \              0xC6         
   \   0000021C   0x00 0x47          DC8 0, 71, 120, 162, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 20, 0
   \              0x78 0xA2    
   \              0x00 0x00    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x06 0x00    
   \              0x00 0x00    
   \              0x00 0x14    
   \              0x00         
   \   00000231   0x00 0x25          DC8 0, 37, 77, 0, 47, 112, 109, 0, 0, 5, 174, 0, 12, 2, 208, 0, 0, 0, 0
   \              0x4D 0x00    
   \              0x2F 0x70    
   \              0x6D 0x00    
   \              0x00 0x05    
   \              0xAE 0x00    
   \              0x0C 0x02    
   \              0xD0 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000244   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x1B    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000025A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x64    
   \              0x00 0x00    
   \              0x00 0x08    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000270   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000287   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000029E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000002B5   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x1B 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002CB   0x00 0x00          DC8 0, 0, 14, 0, 14, 0, 0, 10, 199, 0, 4, 0, 0, 0, 0, 0, 50, 255, 255
   \              0x0E 0x00    
   \              0x0E 0x00    
   \              0x00 0x0A    
   \              0xC7 0x00    
   \              0x04 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x32 0xFF    
   \              0xFF         
   \   000002DE   0xFF 0x9C          DC8 255, 156, 0, 0, 11, 43, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 100, 255
   \              0x00 0x00    
   \              0x0B 0x2B    
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x00 0x00    
   \              0x00 0x01    
   \              0x00 0x00    
   \              0x00 0x64    
   \              0xFF         
   \   000002F1   0xE5 0x00          DC8 229, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x00    
   \              0x00 0x00    
   \   00000307   0x00 0x00          DC8 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 128, 0, 0, 1, 128, 0, 0, 1, 128, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x80    
   \              0x00 0x00    
   \              0x01 0x80    
   \              0x00 0x00    
   \              0x01 0x80    
   \              0x00         
   \   0000031C   0x00 0x24          DC8 0, 36, 38, 211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 16, 0, 150, 0, 60
   \              0x26 0xD3    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x06    
   \              0x00 0x10    
   \              0x00 0x96    
   \              0x00 0x3C    
   \   00000330   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 10, 78, 104
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x0C 0x0A    
   \              0x4E 0x68    
   \   00000344   0xCD 0xCF          DC8 205, 207, 119, 9, 80, 22, 103, 89, 198, 25, 206, 130, 0, 0, 0, 0, 0
   \              0x77 0x09    
   \              0x50 0x16    
   \              0x67 0x59    
   \              0xC6 0x19    
   \              0xCE 0x82    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000355   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 215
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x17    
   \              0xD7         
   \   0000036A   0x84 0x00          DC8 132, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 199, 147, 143, 157, 30
   \              0x03 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xC7 0x93    
   \              0x8F 0x9D    
   \              0x1E         
   \   0000037D   0x1B 0x1C          DC8 27, 28, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x19 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000393   0x00 0x00          DC8 0, 0, 0, 0, 0, 2, 3, 24, 133, 0, 0, 64, 0, 0, 0, 0, 3, 0, 0, 0, 3
   \              0x00 0x00    
   \              0x00 0x02    
   \              0x03 0x18    
   \              0x85 0x00    
   \              0x00 0x40    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x03 0x00    
   \              0x00 0x00    
   \              0x03         
   \   000003A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x40 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003BE   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   000003D5   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 125, 223, 126
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x67    
   \              0x7D 0xDF    
   \              0x7E         
   \   000003E8   0x72 0x90          DC8 114, 144, 46, 85, 76, 246, 230, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x2E 0x55    
   \              0x4C 0xF6    
   \              0xE6 0x88    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003FA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 216, 220, 180, 184, 176, 216, 185, 171, 243, 248
   \              0x00 0x00    
   \              0x00 0x00    
   \              0xD8 0xDC    
   \              0xB4 0xB8    
   \              0xB0 0xD8    
   \              0xB9 0xAB    
   \              0xF3 0xF8    
   \   0000040A   0xFA 0xB3          DC8 250, 179, 183, 187, 142, 158, 174, 241, 50, 245, 27, 241, 180, 184
   \              0xB7 0xBB    
   \              0x8E 0x9E    
   \              0xAE 0xF1    
   \              0x32 0xF5    
   \              0x1B 0xF1    
   \              0xB4 0xB8    
   \   00000418   0xB0 0x80          DC8 176, 128, 151, 241, 169, 223, 223, 223, 170, 223, 223, 223, 242
   \              0x97 0xF1    
   \              0xA9 0xDF    
   \              0xDF 0xDF    
   \              0xAA 0xDF    
   \              0xDF 0xDF    
   \              0xF2         
   \   00000425   0xAA 0xC5          DC8 170, 197, 205, 199, 169, 12, 201, 44, 151, 241, 169, 137, 38, 70
   \              0xCD 0xC7    
   \              0xA9 0x0C    
   \              0xC9 0x2C    
   \              0x97 0xF1    
   \              0xA9 0x89    
   \              0x26 0x46    
   \   00000433   0x66 0xB2          DC8 102, 178, 137, 153, 169, 45, 85, 125, 176, 176, 138, 168, 150, 54
   \              0x89 0x99    
   \              0xA9 0x2D    
   \              0x55 0x7D    
   \              0xB0 0xB0    
   \              0x8A 0xA8    
   \              0x96 0x36    
   \   00000441   0x56 0x76          DC8 86, 118, 241, 186, 163, 180, 178, 128, 192, 184, 168, 151, 17, 178
   \              0xF1 0xBA    
   \              0xA3 0xB4    
   \              0xB2 0x80    
   \              0xC0 0xB8    
   \              0xA8 0x97    
   \              0x11 0xB2    
   \   0000044F   0x83 0x98          DC8 131, 152, 186, 163, 240, 36, 8, 68, 16, 100, 24, 178, 185, 180, 152
   \              0xBA 0xA3    
   \              0xF0 0x24    
   \              0x08 0x44    
   \              0x10 0x64    
   \              0x18 0xB2    
   \              0xB9 0xB4    
   \              0x98         
   \   0000045E   0x83 0xF1          DC8 131, 241, 163, 41, 85, 125, 186, 181, 177, 163, 131, 147, 240, 0
   \              0xA3 0x29    
   \              0x55 0x7D    
   \              0xBA 0xB5    
   \              0xB1 0xA3    
   \              0x83 0x93    
   \              0xF0 0x00    
   \   0000046C   0x28 0x50          DC8 40, 80, 245, 178, 182, 170, 131, 147, 40, 84, 124, 241, 185, 163
   \              0xF5 0xB2    
   \              0xB6 0xAA    
   \              0x83 0x93    
   \              0x28 0x54    
   \              0x7C 0xF1    
   \              0xB9 0xA3    
   \   0000047A   0x82 0x93          DC8 130, 147, 97, 186, 162, 218, 222, 223, 219, 129, 154, 185, 174, 245
   \              0x61 0xBA    
   \              0xA2 0xDA    
   \              0xDE 0xDF    
   \              0xDB 0x81    
   \              0x9A 0xB9    
   \              0xAE 0xF5    
   \   00000488   0x60 0x68          DC8 96, 104, 112, 241, 218, 186, 162, 223, 217, 186, 162, 250, 185, 163
   \              0x70 0xF1    
   \              0xDA 0xBA    
   \              0xA2 0xDF    
   \              0xD9 0xBA    
   \              0xA2 0xFA    
   \              0xB9 0xA3    
   \   00000496   0x82 0x92          DC8 130, 146, 219, 49, 186, 162, 217, 186, 162, 248, 223, 133, 164, 208
   \              0xDB 0x31    
   \              0xBA 0xA2    
   \              0xD9 0xBA    
   \              0xA2 0xF8    
   \              0xDF 0x85    
   \              0xA4 0xD0    
   \   000004A4   0xC1 0xBB          DC8 193, 187, 173, 131, 194, 197, 199, 184, 162, 223, 223, 223, 186
   \              0xAD 0x83    
   \              0xC2 0xC5    
   \              0xC7 0xB8    
   \              0xA2 0xDF    
   \              0xDF 0xDF    
   \              0xBA         
   \   000004B1   0xA0 0xDF          DC8 160, 223, 223, 223, 216, 216, 241, 184, 170, 179, 141, 180, 152, 13
   \              0xDF 0xDF    
   \              0xD8 0xD8    
   \              0xF1 0xB8    
   \              0xAA 0xB3    
   \              0x8D 0xB4    
   \              0x98 0x0D    
   \   000004BF   0x35 0x5D          DC8 53, 93, 178, 182, 186, 175, 140, 150, 25, 143, 159, 167, 14, 22, 30
   \              0xB2 0xB6    
   \              0xBA 0xAF    
   \              0x8C 0x96    
   \              0x19 0x8F    
   \              0x9F 0xA7    
   \              0x0E 0x16    
   \              0x1E         
   \   000004CE   0xB4 0x9A          DC8 180, 154, 184, 170, 135, 44, 84, 124, 186, 164, 176, 138, 182, 145
   \              0xB8 0xAA    
   \              0x87 0x2C    
   \              0x54 0x7C    
   \              0xBA 0xA4    
   \              0xB0 0x8A    
   \              0xB6 0x91    
   \   000004DC   0x32 0x56          DC8 50, 86, 118, 178, 132, 148, 164, 200, 8, 205, 216, 184, 180, 176
   \              0x76 0xB2    
   \              0x84 0x94    
   \              0xA4 0xC8    
   \              0x08 0xCD    
   \              0xD8 0xB8    
   \              0xB4 0xB0    
   \   000004EA   0xF1 0x99          DC8 241, 153, 130, 168, 45, 85, 125, 152, 168, 14, 22, 30, 162, 44, 84
   \              0x82 0xA8    
   \              0x2D 0x55    
   \              0x7D 0x98    
   \              0xA8 0x0E    
   \              0x16 0x1E    
   \              0xA2 0x2C    
   \              0x54         
   \   000004F9   0x7C 0x92          DC8 124, 146, 164, 240, 44, 80, 120, 241, 132, 168, 152, 196, 205, 252
   \              0xA4 0xF0    
   \              0x2C 0x50    
   \              0x78 0xF1    
   \              0x84 0xA8    
   \              0x98 0xC4    
   \              0xCD 0xFC    
   \   00000507   0xD8 0x0D          DC8 216, 13, 219, 168, 252, 45, 243, 217, 186, 166, 248, 218, 186, 166
   \              0xDB 0xA8    
   \              0xFC 0x2D    
   \              0xF3 0xD9    
   \              0xBA 0xA6    
   \              0xF8 0xDA    
   \              0xBA 0xA6    
   \   00000515   0xDE 0xD8          DC8 222, 216, 186, 178, 182, 134, 150, 166, 208, 243, 200, 65, 218, 166
   \              0xBA 0xB2    
   \              0xB6 0x86    
   \              0x96 0xA6    
   \              0xD0 0xF3    
   \              0xC8 0x41    
   \              0xDA 0xA6    
   \   00000523   0xC8 0xF8          DC8 200, 248, 216, 176, 180, 184, 130, 168, 146, 245, 44, 84, 136, 152
   \              0xD8 0xB0    
   \              0xB4 0xB8    
   \              0x82 0xA8    
   \              0x92 0xF5    
   \              0x2C 0x54    
   \              0x88 0x98    
   \   00000531   0xF1 0x35          DC8 241, 53, 217, 244, 24, 216, 241, 162, 208, 248, 249, 168, 132, 217
   \              0xD9 0xF4    
   \              0x18 0xD8    
   \              0xF1 0xA2    
   \              0xD0 0xF8    
   \              0xF9 0xA8    
   \              0x84 0xD9    
   \   0000053F   0xC7 0xDF          DC8 199, 223, 248, 248, 131, 197, 218, 223, 105, 223, 131, 193, 216
   \              0xF8 0xF8    
   \              0x83 0xC5    
   \              0xDA 0xDF    
   \              0x69 0xDF    
   \              0x83 0xC1    
   \              0xD8         
   \   0000054C   0xF4 0x01          DC8 244, 1, 20, 241, 168, 130, 78, 168, 132, 243, 17, 209, 130, 245
   \              0x14 0xF1    
   \              0xA8 0x82    
   \              0x4E 0xA8    
   \              0x84 0xF3    
   \              0x11 0xD1    
   \              0x82 0xF5    
   \   0000055A   0xD9 0x92          DC8 217, 146, 40, 151, 136, 241, 9, 244, 28, 28, 216, 132, 168, 243
   \              0x28 0x97    
   \              0x88 0xF1    
   \              0x09 0xF4    
   \              0x1C 0x1C    
   \              0xD8 0x84    
   \              0xA8 0xF3    
   \   00000568   0xC0 0xF9          DC8 192, 249, 209, 217, 151, 130, 241, 41, 244, 13, 216, 243, 249, 249
   \              0xD1 0xD9    
   \              0x97 0x82    
   \              0xF1 0x29    
   \              0xF4 0x0D    
   \              0xD8 0xF3    
   \              0xF9 0xF9    
   \   00000576   0xD1 0xD9          DC8 209, 217, 130, 244, 194, 3, 216, 222, 223, 26, 216, 241, 162, 250
   \              0x82 0xF4    
   \              0xC2 0x03    
   \              0xD8 0xDE    
   \              0xDF 0x1A    
   \              0xD8 0xF1    
   \              0xA2 0xFA    
   \   00000584   0xF9 0xA8          DC8 249, 168, 132, 152, 217, 199, 223, 248, 248, 248, 131, 199, 218
   \              0x84 0x98    
   \              0xD9 0xC7    
   \              0xDF 0xF8    
   \              0xF8 0xF8    
   \              0x83 0xC7    
   \              0xDA         
   \   00000591   0xDF 0x69          DC8 223, 105, 223, 248, 131, 195, 216, 244, 1, 20, 241, 152, 168, 130
   \              0xDF 0xF8    
   \              0x83 0xC3    
   \              0xD8 0xF4    
   \              0x01 0x14    
   \              0xF1 0x98    
   \              0xA8 0x82    
   \   0000059F   0x2E 0xA8          DC8 46, 168, 132, 243, 17, 209, 130, 245, 217, 146, 80, 151, 136, 241
   \              0x84 0xF3    
   \              0x11 0xD1    
   \              0x82 0xF5    
   \              0xD9 0x92    
   \              0x50 0x97    
   \              0x88 0xF1    
   \   000005AD   0x09 0xF4          DC8 9, 244, 28, 216, 132, 168, 243, 192, 248, 249, 209, 217, 151, 130
   \              0x1C 0xD8    
   \              0x84 0xA8    
   \              0xF3 0xC0    
   \              0xF8 0xF9    
   \              0xD1 0xD9    
   \              0x97 0x82    
   \   000005BB   0xF1 0x49          DC8 241, 73, 244, 13, 216, 243, 249, 249, 209, 217, 130, 244, 196, 3
   \              0xF4 0x0D    
   \              0xD8 0xF3    
   \              0xF9 0xF9    
   \              0xD1 0xD9    
   \              0x82 0xF4    
   \              0xC4 0x03    
   \   000005C9   0xD8 0xDE          DC8 216, 222, 223, 216, 241, 173, 136, 152, 204, 168, 9, 249, 217, 130
   \              0xDF 0xD8    
   \              0xF1 0xAD    
   \              0x88 0x98    
   \              0xCC 0xA8    
   \              0x09 0xF9    
   \              0xD9 0x82    
   \   000005D7   0x92 0xA8          DC8 146, 168, 245, 124, 241, 136, 58, 207, 148, 74, 110, 152, 219, 105
   \              0xF5 0x7C    
   \              0xF1 0x88    
   \              0x3A 0xCF    
   \              0x94 0x4A    
   \              0x6E 0x98    
   \              0xDB 0x69    
   \   000005E5   0x31 0xDA          DC8 49, 218, 173, 242, 222, 249, 216, 135, 149, 168, 242, 33, 209, 218
   \              0xAD 0xF2    
   \              0xDE 0xF9    
   \              0xD8 0x87    
   \              0x95 0xA8    
   \              0xF2 0x21    
   \              0xD1 0xDA    
   \   000005F3   0xA5 0xF9          DC8 165, 249, 244, 23, 217, 241, 174, 142, 208, 192, 195, 174, 130, 198
   \              0xF4 0x17    
   \              0xD9 0xF1    
   \              0xAE 0x8E    
   \              0xD0 0xC0    
   \              0xC3 0xAE    
   \              0x82 0xC6    
   \   00000601   0x84 0xC3          DC8 132, 195, 168, 133, 149, 200, 165, 136, 242, 192, 241, 244, 1, 14
   \              0xA8 0x85    
   \              0x95 0xC8    
   \              0xA5 0x88    
   \              0xF2 0xC0    
   \              0xF1 0xF4    
   \              0x01 0x0E    
   \   0000060F   0xF1 0x8E          DC8 241, 142, 158, 168, 198, 62, 86, 245, 84, 241, 136, 114, 244, 1, 21
   \              0x9E 0xA8    
   \              0xC6 0x3E    
   \              0x56 0xF5    
   \              0x54 0xF1    
   \              0x88 0x72    
   \              0xF4 0x01    
   \              0x15         
   \   0000061E   0xF1 0x98          DC8 241, 152, 69, 133, 110, 245, 142, 158, 4, 136, 241, 66, 152, 90
   \              0x45 0x85    
   \              0x6E 0xF5    
   \              0x8E 0x9E    
   \              0x04 0x88    
   \              0xF1 0x42    
   \              0x98 0x5A    
   \   0000062C   0x8E 0x9E          DC8 142, 158, 6, 136, 105, 244, 1, 28, 241, 152, 30, 17, 8, 208, 245, 4
   \              0x06 0x88    
   \              0x69 0xF4    
   \              0x01 0x1C    
   \              0xF1 0x98    
   \              0x1E 0x11    
   \              0x08 0xD0    
   \              0xF5 0x04    
   \   0000063C   0xF1 0x1E          DC8 241, 30, 151, 2, 2, 152, 54, 37, 219, 249, 217, 133, 165, 243, 193
   \              0x97 0x02    
   \              0x02 0x98    
   \              0x36 0x25    
   \              0xDB 0xF9    
   \              0xD9 0x85    
   \              0xA5 0xF3    
   \              0xC1         
   \   0000064B   0xDA 0x85          DC8 218, 133, 165, 243, 223, 216, 133, 149, 168, 243, 9, 218, 165, 250
   \              0xA5 0xF3    
   \              0xDF 0xD8    
   \              0x85 0x95    
   \              0xA8 0xF3    
   \              0x09 0xDA    
   \              0xA5 0xFA    
   \   00000659   0xD8 0x82          DC8 216, 130, 146, 168, 245, 120, 241, 136, 26, 132, 159, 38, 136, 152
   \              0x92 0xA8    
   \              0xF5 0x78    
   \              0xF1 0x88    
   \              0x1A 0x84    
   \              0x9F 0x26    
   \              0x88 0x98    
   \   00000667   0x21 0xDA          DC8 33, 218, 244, 29, 243, 216, 135, 159, 57, 209, 175, 217, 223, 223
   \              0xF4 0x1D    
   \              0xF3 0xD8    
   \              0x87 0x9F    
   \              0x39 0xD1    
   \              0xAF 0xD9    
   \              0xDF 0xDF    
   \   00000675   0xFB 0xF9          DC8 251, 249, 244, 12, 243, 216, 250, 208, 248, 218, 249, 249, 208, 223
   \              0xF4 0x0C    
   \              0xF3 0xD8    
   \              0xFA 0xD0    
   \              0xF8 0xDA    
   \              0xF9 0xF9    
   \              0xD0 0xDF    
   \   00000683   0xD9 0xF9          DC8 217, 249, 216, 244, 11, 216, 243, 135, 159, 57, 209, 175, 217, 223
   \              0xD8 0xF4    
   \              0x0B 0xD8    
   \              0xF3 0x87    
   \              0x9F 0x39    
   \              0xD1 0xAF    
   \              0xD9 0xDF    
   \   00000691   0xDF 0xF4          DC8 223, 244, 29, 243, 216, 250, 252, 168, 105, 249, 249, 175, 208, 218
   \              0x1D 0xF3    
   \              0xD8 0xFA    
   \              0xFC 0xA8    
   \              0x69 0xF9    
   \              0xF9 0xAF    
   \              0xD0 0xDA    
   \   0000069F   0xDE 0xFA          DC8 222, 250, 217, 248, 143, 159, 168, 241, 204, 243, 152, 219, 69, 217
   \              0xD9 0xF8    
   \              0x8F 0x9F    
   \              0xA8 0xF1    
   \              0xCC 0xF3    
   \              0x98 0xDB    
   \              0x45 0xD9    
   \   000006AD   0xAF 0xDF          DC8 175, 223, 208, 248, 216, 241, 143, 159, 168, 202, 243, 136, 9, 218
   \              0xD0 0xF8    
   \              0xD8 0xF1    
   \              0x8F 0x9F    
   \              0xA8 0xCA    
   \              0xF3 0x88    
   \              0x09 0xDA    
   \   000006BB   0xAF 0x8F          DC8 175, 143, 203, 248, 216, 242, 173, 151, 141, 12, 217, 165, 223, 249
   \              0xCB 0xF8    
   \              0xD8 0xF2    
   \              0xAD 0x97    
   \              0x8D 0x0C    
   \              0xD9 0xA5    
   \              0xDF 0xF9    
   \   000006C9   0xBA 0xA6          DC8 186, 166, 243, 250, 244, 18, 242, 216, 149, 13, 209, 217, 186, 166
   \              0xF3 0xFA    
   \              0xF4 0x12    
   \              0xF2 0xD8    
   \              0x95 0x0D    
   \              0xD1 0xD9    
   \              0xBA 0xA6    
   \   000006D7   0xF3 0xFA          DC8 243, 250, 218, 165, 242, 193, 186, 166, 243, 223, 216, 241, 186
   \              0xDA 0xA5    
   \              0xF2 0xC1    
   \              0xBA 0xA6    
   \              0xF3 0xDF    
   \              0xD8 0xF1    
   \              0xBA         
   \   000006E4   0xB2 0xB6          DC8 178, 182, 134, 150, 166, 208, 202, 243, 73, 218, 166, 203, 248, 216
   \              0x86 0x96    
   \              0xA6 0xD0    
   \              0xCA 0xF3    
   \              0x49 0xDA    
   \              0xA6 0xCB    
   \              0xF8 0xD8    
   \   000006F2   0xB0 0xB4          DC8 176, 180, 184, 216, 173, 132, 242, 192, 223, 241, 143, 203, 195
   \              0xB8 0xD8    
   \              0xAD 0x84    
   \              0xF2 0xC0    
   \              0xDF 0xF1    
   \              0x8F 0xCB    
   \              0xC3         
   \   000006FF   0xA8 0xB2          DC8 168, 178, 182, 134, 150, 200, 193, 203, 195, 243, 176, 180, 136
   \              0xB6 0x86    
   \              0x96 0xC8    
   \              0xC1 0xCB    
   \              0xC3 0xF3    
   \              0xB0 0xB4    
   \              0x88         
   \   0000070C   0x98 0xA8          DC8 152, 168, 33, 219, 113, 141, 157, 113, 133, 149, 33, 217, 173, 242
   \              0x21 0xDB    
   \              0x71 0x8D    
   \              0x9D 0x71    
   \              0x85 0x95    
   \              0x21 0xD9    
   \              0xAD 0xF2    
   \   0000071A   0xFA 0xD8          DC8 250, 216, 133, 151, 168, 40, 217, 244, 8, 216, 242, 141, 41, 218
   \              0x85 0x97    
   \              0xA8 0x28    
   \              0xD9 0xF4    
   \              0x08 0xD8    
   \              0xF2 0x8D    
   \              0x29 0xDA    
   \   00000728   0xF4 0x05          DC8 244, 5, 217, 242, 133, 164, 194, 242, 216, 168, 141, 148, 1, 209
   \              0xD9 0xF2    
   \              0x85 0xA4    
   \              0xC2 0xF2    
   \              0xD8 0xA8    
   \              0x8D 0x94    
   \              0x01 0xD1    
   \   00000736   0xD9 0xF4          DC8 217, 244, 17, 242, 216, 135, 33, 216, 244, 10, 216, 242, 132, 152
   \              0x11 0xF2    
   \              0xD8 0x87    
   \              0x21 0xD8    
   \              0xF4 0x0A    
   \              0xD8 0xF2    
   \              0x84 0x98    
   \   00000744   0xA8 0xC8          DC8 168, 200, 1, 209, 217, 244, 17, 216, 243, 164, 200, 187, 175, 208
   \              0x01 0xD1    
   \              0xD9 0xF4    
   \              0x11 0xD8    
   \              0xF3 0xA4    
   \              0xC8 0xBB    
   \              0xAF 0xD0    
   \   00000752   0xF2 0xDE          DC8 242, 222, 248, 248, 248, 248, 248, 248, 248, 248, 216, 241, 184
   \              0xF8 0xF8    
   \              0xF8 0xF8    
   \              0xF8 0xF8    
   \              0xF8 0xF8    
   \              0xD8 0xF1    
   \              0xB8         
   \   0000075F   0xF6 0xB5          DC8 246, 181, 185, 176, 138, 149, 163, 222, 60, 163, 217, 248, 216, 92
   \              0xB9 0xB0    
   \              0x8A 0x95    
   \              0xA3 0xDE    
   \              0x3C 0xA3    
   \              0xD9 0xF8    
   \              0xD8 0x5C    
   \   0000076D   0xA3 0xD9          DC8 163, 217, 248, 216, 124, 163, 217, 248, 216, 248, 249, 209, 165
   \              0xF8 0xD8    
   \              0x7C 0xA3    
   \              0xD9 0xF8    
   \              0xD8 0xF8    
   \              0xF9 0xD1    
   \              0xA5         
   \   0000077A   0xD9 0xDF          DC8 217, 223, 218, 250, 216, 177, 133, 48, 247, 217, 222, 216, 248, 48
   \              0xDA 0xFA    
   \              0xD8 0xB1    
   \              0x85 0x30    
   \              0xF7 0xD9    
   \              0xDE 0xD8    
   \              0xF8 0x30    
   \   00000788   0xAD 0xDA          DC8 173, 218, 222, 216, 242, 180, 140, 153, 163, 45, 85, 125, 160, 131
   \              0xDE 0xD8    
   \              0xF2 0xB4    
   \              0x8C 0x99    
   \              0xA3 0x2D    
   \              0x55 0x7D    
   \              0xA0 0x83    
   \   00000796   0xDF 0xDF          DC8 223, 223, 223, 181, 145, 160, 246, 41, 217, 251, 216, 160, 252, 41
   \              0xDF 0xB5    
   \              0x91 0xA0    
   \              0xF6 0x29    
   \              0xD9 0xFB    
   \              0xD8 0xA0    
   \              0xFC 0x29    
   \   000007A4   0xD9 0xFA          DC8 217, 250, 216, 160, 208, 81, 217, 248, 216, 252, 81, 217, 249, 216
   \              0xD8 0xA0    
   \              0xD0 0x51    
   \              0xD9 0xF8    
   \              0xD8 0xFC    
   \              0x51 0xD9    
   \              0xF9 0xD8    
   \   000007B2   0x79 0xD9          DC8 121, 217, 251, 216, 160, 208, 252, 121, 217, 250, 216, 161, 249
   \              0xFB 0xD8    
   \              0xA0 0xD0    
   \              0xFC 0x79    
   \              0xD9 0xFA    
   \              0xD8 0xA1    
   \              0xF9         
   \   000007BF   0xF9 0xF9          DC8 249, 249, 249, 249, 160, 218, 223, 223, 223, 216, 161, 248, 248
   \              0xF9 0xF9    
   \              0xA0 0xDA    
   \              0xDF 0xDF    
   \              0xDF 0xD8    
   \              0xA1 0xF8    
   \              0xF8         
   \   000007CC   0xF8 0xF8          DC8 248, 248, 248, 172, 222, 248, 173, 222, 131, 147, 172, 44, 84, 124
   \              0xF8 0xAC    
   \              0xDE 0xF8    
   \              0xAD 0xDE    
   \              0x83 0x93    
   \              0xAC 0x2C    
   \              0x54 0x7C    
   \   000007DA   0xF1 0xA8          DC8 241, 168, 223, 223, 223, 246, 157, 44, 218, 160, 223, 217, 250, 219
   \              0xDF 0xDF    
   \              0xDF 0xF6    
   \              0x9D 0x2C    
   \              0xDA 0xA0    
   \              0xDF 0xD9    
   \              0xFA 0xDB    
   \   000007E8   0x2D 0xF8          DC8 45, 248, 216, 168, 80, 218, 160, 208, 222, 217, 208, 248, 248, 248
   \              0xD8 0xA8    
   \              0x50 0xDA    
   \              0xA0 0xD0    
   \              0xDE 0xD9    
   \              0xD0 0xF8    
   \              0xF8 0xF8    
   \   000007F6   0xDB 0x55          DC8 219, 85, 248, 216, 168, 120, 218, 160, 208, 223, 217, 208, 250, 248
   \              0xF8 0xD8    
   \              0xA8 0x78    
   \              0xDA 0xA0    
   \              0xD0 0xDF    
   \              0xD9 0xD0    
   \              0xFA 0xF8    
   \   00000804   0xF8 0xF8          DC8 248, 248, 248, 219, 125, 248, 216, 156, 168, 140, 245, 48, 219, 56
   \              0xF8 0xDB    
   \              0x7D 0xF8    
   \              0xD8 0x9C    
   \              0xA8 0x8C    
   \              0xF5 0x30    
   \              0xDB 0x38    
   \   00000812   0xD9 0xD0          DC8 217, 208, 222, 223, 160, 208, 222, 223, 216, 168, 72, 219, 88, 217
   \              0xDE 0xDF    
   \              0xA0 0xD0    
   \              0xDE 0xDF    
   \              0xD8 0xA8    
   \              0x48 0xDB    
   \              0x58 0xD9    
   \   00000820   0xDF 0xD0          DC8 223, 208, 222, 160, 223, 208, 222, 216, 168, 104, 219, 112, 217
   \              0xDE 0xA0    
   \              0xDF 0xD0    
   \              0xDE 0xD8    
   \              0xA8 0x68    
   \              0xDB 0x70    
   \              0xD9         
   \   0000082D   0xDF 0xDF          DC8 223, 223, 160, 223, 223, 216, 241, 168, 136, 144, 44, 84, 124, 152
   \              0xA0 0xDF    
   \              0xDF 0xD8    
   \              0xF1 0xA8    
   \              0x88 0x90    
   \              0x2C 0x54    
   \              0x7C 0x98    
   \   0000083B   0xA8 0xD0          DC8 168, 208, 92, 56, 209, 218, 242, 174, 140, 223, 249, 216, 176, 135
   \              0x5C 0x38    
   \              0xD1 0xDA    
   \              0xF2 0xAE    
   \              0x8C 0xDF    
   \              0xF9 0xD8    
   \              0xB0 0x87    
   \   00000849   0xA8 0xC1          DC8 168, 193, 193, 177, 136, 168, 198, 249, 249, 218, 54, 216, 168, 249
   \              0xC1 0xB1    
   \              0x88 0xA8    
   \              0xC6 0xF9    
   \              0xF9 0xDA    
   \              0x36 0xD8    
   \              0xA8 0xF9    
   \   00000857   0xDA 0x36          DC8 218, 54, 216, 168, 249, 218, 54, 216, 168, 249, 218, 54, 216, 168
   \              0xD8 0xA8    
   \              0xF9 0xDA    
   \              0x36 0xD8    
   \              0xA8 0xF9    
   \              0xDA 0x36    
   \              0xD8 0xA8    
   \   00000865   0xF9 0xDA          DC8 249, 218, 54, 216, 247, 141, 157, 173, 248, 24, 218, 242, 174, 223
   \              0x36 0xD8    
   \              0xF7 0x8D    
   \              0x9D 0xAD    
   \              0xF8 0x18    
   \              0xDA 0xF2    
   \              0xAE 0xDF    
   \   00000873   0xD8 0xF7          DC8 216, 247, 173, 250, 48, 217, 164, 222, 249, 216, 242, 174, 222, 250
   \              0xAD 0xFA    
   \              0x30 0xD9    
   \              0xA4 0xDE    
   \              0xF9 0xD8    
   \              0xF2 0xAE    
   \              0xDE 0xFA    
   \   00000881   0xF9 0x83          DC8 249, 131, 167, 217, 195, 197, 199, 241, 136, 155, 167, 122, 173
   \              0xA7 0xD9    
   \              0xC3 0xC5    
   \              0xC7 0xF1    
   \              0x88 0x9B    
   \              0xA7 0x7A    
   \              0xAD         
   \   0000088E   0xF7 0xDE          DC8 247, 222, 223, 164, 248, 132, 148, 8, 167, 151, 243, 0, 174, 242
   \              0xDF 0xA4    
   \              0xF8 0x84    
   \              0x94 0x08    
   \              0xA7 0x97    
   \              0xF3 0x00    
   \              0xAE 0xF2    
   \   0000089C   0x98 0x19          DC8 152, 25, 164, 136, 198, 163, 148, 136, 246, 50, 223, 242, 131, 147
   \              0xA4 0x88    
   \              0xC6 0xA3    
   \              0x94 0x88    
   \              0xF6 0x32    
   \              0xDF 0xF2    
   \              0x83 0x93    
   \   000008AA   0xDB 0x09          DC8 219, 9, 217, 242, 170, 223, 216, 216, 174, 248, 249, 209, 218, 243
   \              0xD9 0xF2    
   \              0xAA 0xDF    
   \              0xD8 0xD8    
   \              0xAE 0xF8    
   \              0xF9 0xD1    
   \              0xDA 0xF3    
   \   000008B8   0xA4 0xDE          DC8 164, 222, 167, 241, 136, 155, 122, 216, 243, 132, 148, 174, 25, 249
   \              0xA7 0xF1    
   \              0x88 0x9B    
   \              0x7A 0xD8    
   \              0xF3 0x84    
   \              0x94 0xAE    
   \              0x19 0xF9    
   \   000008C6   0xDA 0xAA          DC8 218, 170, 241, 223, 216, 168, 129, 192, 195, 197, 199, 163, 146
   \              0xF1 0xDF    
   \              0xD8 0xA8    
   \              0x81 0xC0    
   \              0xC3 0xC5    
   \              0xC7 0xA3    
   \              0x92         
   \   000008D3   0x83 0xF6          DC8 131, 246, 40, 173, 222, 217, 248, 216, 163, 80, 173, 217, 248, 216
   \              0x28 0xAD    
   \              0xDE 0xD9    
   \              0xF8 0xD8    
   \              0xA3 0x50    
   \              0xAD 0xD9    
   \              0xF8 0xD8    
   \   000008E1   0xA3 0x78          DC8 163, 120, 173, 217, 248, 216, 248, 249, 209, 161, 218, 222, 195
   \              0xAD 0xD9    
   \              0xF8 0xD8    
   \              0xF8 0xF9    
   \              0xD1 0xA1    
   \              0xDA 0xDE    
   \              0xC3         
   \   000008EE   0xC5 0xC7          DC8 197, 199, 216, 161, 129, 148, 248, 24, 242, 176, 137, 172, 195, 197
   \              0xD8 0xA1    
   \              0x81 0x94    
   \              0xF8 0x18    
   \              0xF2 0xB0    
   \              0x89 0xAC    
   \              0xC3 0xC5    
   \   000008FC   0xC7 0xF1          DC8 199, 241, 216, 184, 180, 176, 151, 134, 168, 49, 155, 6, 153, 7
   \              0xD8 0xB8    
   \              0xB4 0xB0    
   \              0x97 0x86    
   \              0xA8 0x31    
   \              0x9B 0x06    
   \              0x99 0x07    
   \   0000090A   0xAB 0x97          DC8 171, 151, 40, 136, 155, 240, 12, 32, 20, 64, 176, 180, 184, 240
   \              0x28 0x88    
   \              0x9B 0xF0    
   \              0x0C 0x20    
   \              0x14 0x40    
   \              0xB0 0xB4    
   \              0xB8 0xF0    
   \   00000918   0xA8 0x8A          DC8 168, 138, 154, 40, 80, 120, 183, 155, 168, 41, 81, 121, 36, 112, 89
   \              0x9A 0x28    
   \              0x50 0x78    
   \              0xB7 0x9B    
   \              0xA8 0x29    
   \              0x51 0x79    
   \              0x24 0x70    
   \              0x59         
   \   00000927   0x44 0x69          DC8 68, 105, 56, 100, 72, 49, 241, 187, 171, 136, 0, 44, 84, 124, 240
   \              0x38 0x64    
   \              0x48 0x31    
   \              0xF1 0xBB    
   \              0xAB 0x88    
   \              0x00 0x2C    
   \              0x54 0x7C    
   \              0xF0         
   \   00000936   0xB3 0x8B          DC8 179, 139, 184, 168, 4, 40, 80, 120, 241, 176, 136, 180, 151, 38
   \              0xB8 0xA8    
   \              0x04 0x28    
   \              0x50 0x78    
   \              0xF1 0xB0    
   \              0x88 0xB4    
   \              0x97 0x26    
   \   00000944   0xA8 0x59          DC8 168, 89, 152, 187, 171, 179, 139, 2, 38, 70, 102, 176, 184, 240
   \              0x98 0xBB    
   \              0xAB 0xB3    
   \              0x8B 0x02    
   \              0x26 0x46    
   \              0x66 0xB0    
   \              0xB8 0xF0    
   \   00000952   0x8A 0x9C          DC8 138, 156, 168, 41, 81, 121, 139, 41, 81, 121, 138, 36, 112, 89, 139
   \              0xA8 0x29    
   \              0x51 0x79    
   \              0x8B 0x29    
   \              0x51 0x79    
   \              0x8A 0x24    
   \              0x70 0x59    
   \              0x8B         
   \   00000961   0x20 0x58          DC8 32, 88, 113, 138, 68, 105, 56, 139, 57, 64, 104, 138, 100, 72, 49
   \              0x71 0x8A    
   \              0x44 0x69    
   \              0x38 0x8B    
   \              0x39 0x40    
   \              0x68 0x8A    
   \              0x64 0x48    
   \              0x31         
   \   00000970   0x8B 0x30          DC8 139, 48, 73, 96, 136, 241, 172, 0, 44, 84, 124, 240, 140, 168, 4
   \              0x49 0x60    
   \              0x88 0xF1    
   \              0xAC 0x00    
   \              0x2C 0x54    
   \              0x7C 0xF0    
   \              0x8C 0xA8    
   \              0x04         
   \   0000097F   0x28 0x50          DC8 40, 80, 120, 241, 136, 151, 38, 168, 89, 152, 172, 140, 2, 38, 70
   \              0x78 0xF1    
   \              0x88 0x97    
   \              0x26 0xA8    
   \              0x59 0x98    
   \              0xAC 0x8C    
   \              0x02 0x26    
   \              0x46         
   \   0000098E   0x66 0xF0          DC8 102, 240, 137, 156, 168, 41, 81, 121, 36, 112, 89, 68, 105, 56, 100
   \              0x89 0x9C    
   \              0xA8 0x29    
   \              0x51 0x79    
   \              0x24 0x70    
   \              0x59 0x44    
   \              0x69 0x38    
   \              0x64         
   \   0000099D   0x48 0x31          DC8 72, 49, 169, 136, 9, 32, 89, 112, 171, 17, 56, 64, 105, 168, 25, 49
   \              0xA9 0x88    
   \              0x09 0x20    
   \              0x59 0x70    
   \              0xAB 0x11    
   \              0x38 0x40    
   \              0x69 0xA8    
   \              0x19 0x31    
   \   000009AD   0x48 0x60          DC8 72, 96, 140, 168, 60, 65, 92, 32, 124, 0, 241, 135, 152, 25, 134
   \              0x8C 0xA8    
   \              0x3C 0x41    
   \              0x5C 0x20    
   \              0x7C 0x00    
   \              0xF1 0x87    
   \              0x98 0x19    
   \              0x86         
   \   000009BC   0xA8 0x6E          DC8 168, 110, 118, 126, 169, 153, 136, 45, 85, 125, 216, 177, 181, 185
   \              0x76 0x7E    
   \              0xA9 0x99    
   \              0x88 0x2D    
   \              0x55 0x7D    
   \              0xD8 0xB1    
   \              0xB5 0xB9    
   \   000009CA   0xA3 0xDF          DC8 163, 223, 223, 223, 174, 208, 223, 170, 208, 222, 242, 171, 248
   \              0xDF 0xDF    
   \              0xAE 0xD0    
   \              0xDF 0xAA    
   \              0xD0 0xDE    
   \              0xF2 0xAB    
   \              0xF8         
   \   000009D7   0xF9 0xD9          DC8 249, 217, 176, 135, 196, 170, 241, 223, 223, 187, 175, 223, 223
   \              0xB0 0x87    
   \              0xC4 0xAA    
   \              0xF1 0xDF    
   \              0xDF 0xBB    
   \              0xAF 0xDF    
   \              0xDF         
   \   000009E4   0xB9 0xD8          DC8 185, 216, 177, 241, 163, 151, 142, 96, 223, 176, 132, 242, 200, 248
   \              0xB1 0xF1    
   \              0xA3 0x97    
   \              0x8E 0x60    
   \              0xDF 0xB0    
   \              0x84 0xF2    
   \              0xC8 0xF8    
   \   000009F2   0xF9 0xD9          DC8 249, 217, 222, 216, 147, 133, 241, 74, 177, 131, 163, 8, 181, 131
   \              0xDE 0xD8    
   \              0x93 0x85    
   \              0xF1 0x4A    
   \              0xB1 0x83    
   \              0xA3 0x08    
   \              0xB5 0x83    
   \   00000A00   0x9A 0x08          DC8 154, 8, 16, 183, 159, 16, 216, 241, 176, 186, 174, 176, 138, 194
   \              0x10 0xB7    
   \              0x9F 0x10    
   \              0xD8 0xF1    
   \              0xB0 0xBA    
   \              0xAE 0xB0    
   \              0x8A 0xC2    
   \   00000A0E   0xB2 0xB6          DC8 178, 182, 142, 158, 241, 251, 217, 244, 29, 216, 249, 217, 12, 241
   \              0x8E 0x9E    
   \              0xF1 0xFB    
   \              0xD9 0xF4    
   \              0x1D 0xD8    
   \              0xF9 0xD9    
   \              0x0C 0xF1    
   \   00000A1C   0xD8 0xF8          DC8 216, 248, 248, 173, 97, 217, 174, 251, 216, 244, 12, 241, 216, 248
   \              0xF8 0xAD    
   \              0x61 0xD9    
   \              0xAE 0xFB    
   \              0xD8 0xF4    
   \              0x0C 0xF1    
   \              0xD8 0xF8    
   \   00000A2A   0xF8 0xAD          DC8 248, 173, 25, 217, 174, 251, 223, 216, 244, 22, 241, 216, 248, 173
   \              0x19 0xD9    
   \              0xAE 0xFB    
   \              0xDF 0xD8    
   \              0xF4 0x16    
   \              0xF1 0xD8    
   \              0xF8 0xAD    
   \   00000A38   0x8D 0x61          DC8 141, 97, 217, 244, 244, 172, 245, 156, 156, 141, 223, 43, 186, 182
   \              0xD9 0xF4    
   \              0xF4 0xAC    
   \              0xF5 0x9C    
   \              0x9C 0x8D    
   \              0xDF 0x2B    
   \              0xBA 0xB6    
   \   00000A46   0xAE 0xFA          DC8 174, 250, 248, 244, 11, 216, 241, 174, 208, 248, 173, 81, 218, 174
   \              0xF8 0xF4    
   \              0x0B 0xD8    
   \              0xF1 0xAE    
   \              0xD0 0xF8    
   \              0xAD 0x51    
   \              0xDA 0xAE    
   \   00000A54   0xFA 0xF8          DC8 250, 248, 241, 216, 185, 177, 182, 163, 131, 156, 8, 185, 177, 131
   \              0xF1 0xD8    
   \              0xB9 0xB1    
   \              0xB6 0xA3    
   \              0x83 0x9C    
   \              0x08 0xB9    
   \              0xB1 0x83    
   \   00000A62   0x9A 0xB5          DC8 154, 181, 170, 192, 253, 48, 131, 183, 159, 16, 181, 139, 147, 242
   \              0xAA 0xC0    
   \              0xFD 0x30    
   \              0x83 0xB7    
   \              0x9F 0x10    
   \              0xB5 0x8B    
   \              0x93 0xF2    
   \   00000A70   0x02 0x02          DC8 2, 2, 209, 171, 218, 222, 216, 241, 176, 128, 186, 171, 192, 195
   \              0xD1 0xAB    
   \              0xDA 0xDE    
   \              0xD8 0xF1    
   \              0xB0 0x80    
   \              0xBA 0xAB    
   \              0xC0 0xC3    
   \   00000A7E   0xB2 0x84          DC8 178, 132, 193, 195, 216, 177, 185, 243, 139, 163, 145, 182, 9, 180
   \              0xC1 0xC3    
   \              0xD8 0xB1    
   \              0xB9 0xF3    
   \              0x8B 0xA3    
   \              0x91 0xB6    
   \              0x09 0xB4    
   \   00000A8C   0xD9 0xAB          DC8 217, 171, 222, 176, 135, 156, 185, 163, 221, 241, 179, 139, 139
   \              0xDE 0xB0    
   \              0x87 0x9C    
   \              0xB9 0xA3    
   \              0xDD 0xF1    
   \              0xB3 0x8B    
   \              0x8B         
   \   00000A99   0x8B 0x8B          DC8 139, 139, 139, 176, 135, 163, 163, 163, 163, 178, 139, 182, 155
   \              0x8B 0xB0    
   \              0x87 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xB2    
   \              0x8B 0xB6    
   \              0x9B         
   \   00000AA6   0xF2 0xA3          DC8 242, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 241, 176
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xF1    
   \              0xB0         
   \   00000AB3   0x87 0xB5          DC8 135, 181, 154, 163, 243, 155, 163, 163, 220, 186, 172, 223, 185
   \              0x9A 0xA3    
   \              0xF3 0x9B    
   \              0xA3 0xA3    
   \              0xDC 0xBA    
   \              0xAC 0xDF    
   \              0xB9         
   \   00000AC0   0xA3 0xA3          DC8 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3 0xA3    
   \              0xA3         
   \   00000ACD   0xA3 0xA3          DC8 163, 163, 163, 216, 216, 216, 187, 179, 183, 241, 170, 249, 218
   \              0xA3 0xD8    
   \              0xD8 0xD8    
   \              0xBB 0xB3    
   \              0xB7 0xF1    
   \              0xAA 0xF9    
   \              0xDA         
   \   00000ADA   0xFF 0xD9          DC8 255, 217, 128, 154, 170, 40, 180, 128, 152, 167, 32, 183, 151, 135
   \              0x80 0x9A    
   \              0xAA 0x28    
   \              0xB4 0x80    
   \              0x98 0xA7    
   \              0x20 0xB7    
   \              0x97 0x87    
   \   00000AE8   0xA8 0x66          DC8 168, 102, 136, 240, 121, 81, 241, 144, 44, 135, 12, 167, 129, 151
   \              0x88 0xF0    
   \              0x79 0x51    
   \              0xF1 0x90    
   \              0x2C 0x87    
   \              0x0C 0xA7    
   \              0x81 0x97    
   \   00000AF6   0x62 0x93          DC8 98, 147, 240, 113, 113, 96, 133, 148, 1, 41, 81, 121, 144, 165, 241
   \              0xF0 0x71    
   \              0x71 0x60    
   \              0x85 0x94    
   \              0x01 0x29    
   \              0x51 0x79    
   \              0x90 0xA5    
   \              0xF1         
   \   00000B05   0x28 0x4C          DC8 40, 76, 108, 135, 12, 149, 24, 133, 120, 163, 131, 144, 40, 76, 108
   \              0x6C 0x87    
   \              0x0C 0x95    
   \              0x18 0x85    
   \              0x78 0xA3    
   \              0x83 0x90    
   \              0x28 0x4C    
   \              0x6C         
   \   00000B14   0x88 0x6C          DC8 136, 108, 216, 243, 162, 130, 0, 242, 16, 168, 146, 25, 128, 162
   \              0xD8 0xF3    
   \              0xA2 0x82    
   \              0x00 0xF2    
   \              0x10 0xA8    
   \              0x92 0x19    
   \              0x80 0xA2    
   \   00000B22   0xF2 0xD9          DC8 242, 217, 38, 216, 241, 136, 168, 77, 217, 72, 216, 150, 168, 57
   \              0x26 0xD8    
   \              0xF1 0x88    
   \              0xA8 0x4D    
   \              0xD9 0x48    
   \              0xD8 0x96    
   \              0xA8 0x39    
   \   00000B30   0x80 0xD9          DC8 128, 217, 60, 216, 149, 128, 168, 57, 166, 134, 152, 217, 44, 218
   \              0x3C 0xD8    
   \              0x95 0x80    
   \              0xA8 0x39    
   \              0xA6 0x86    
   \              0x98 0xD9    
   \              0x2C 0xDA    
   \   00000B3E   0x87 0xA7          DC8 135, 167, 44, 216, 168, 137, 149, 25, 169, 128, 217, 56, 216, 168
   \              0x2C 0xD8    
   \              0xA8 0x89    
   \              0x95 0x19    
   \              0xA9 0x80    
   \              0xD9 0x38    
   \              0xD8 0xA8    
   \   00000B4C   0x89 0x39          DC8 137, 57, 169, 128, 218, 60, 216, 168, 46, 168, 57, 144, 217, 12
   \              0xA9 0x80    
   \              0xDA 0x3C    
   \              0xD8 0xA8    
   \              0x2E 0xA8    
   \              0x39 0x90    
   \              0xD9 0x0C    
   \   00000B5A   0xD8 0xA8          DC8 216, 168, 149, 49, 152, 217, 12, 216, 168, 9, 217, 255, 216, 1, 218
   \              0x95 0x31    
   \              0x98 0xD9    
   \              0x0C 0xD8    
   \              0xA8 0x09    
   \              0xD9 0xFF    
   \              0xD8 0x01    
   \              0xDA         
   \   00000B69   0xFF 0xD8          DC8 255, 216, 149, 57, 169, 218, 38, 255, 216, 144, 168, 13, 137, 153
   \              0x95 0x39    
   \              0xA9 0xDA    
   \              0x26 0xFF    
   \              0xD8 0x90    
   \              0xA8 0x0D    
   \              0x89 0x99    
   \   00000B77   0xA8 0x10          DC8 168, 16, 128, 152, 33, 218, 46, 216, 137, 153, 168, 49, 128, 218
   \              0x80 0x98    
   \              0x21 0xDA    
   \              0x2E 0xD8    
   \              0x89 0x99    
   \              0xA8 0x31    
   \              0x80 0xDA    
   \   00000B85   0x2E 0xD8          DC8 46, 216, 168, 134, 150, 49, 128, 218, 46, 216, 168, 135, 49, 128
   \              0xA8 0x86    
   \              0x96 0x31    
   \              0x80 0xDA    
   \              0x2E 0xD8    
   \              0xA8 0x87    
   \              0x31 0x80    
   \   00000B93   0xDA 0x2E          DC8 218, 46, 216, 168, 130, 146, 243, 65, 128, 241, 217, 46, 216, 168
   \              0xD8 0xA8    
   \              0x82 0x92    
   \              0xF3 0x41    
   \              0x80 0xF1    
   \              0xD9 0x2E    
   \              0xD8 0xA8    
   \   00000BA1   0x82 0xF3          DC8 130, 243, 25, 128, 241, 217, 46, 216, 130, 172, 243, 192, 162, 128
   \              0x19 0x80    
   \              0xF1 0xD9    
   \              0x2E 0xD8    
   \              0x82 0xAC    
   \              0xF3 0xC0    
   \              0xA2 0x80    
   \   00000BAF   0x22 0xF1          DC8 34, 241, 166, 46, 167, 46, 169, 34, 152, 168, 41, 218, 172, 222
   \              0xA6 0x2E    
   \              0xA7 0x2E    
   \              0xA9 0x22    
   \              0x98 0xA8    
   \              0x29 0xDA    
   \              0xAC 0xDE    
   \   00000BBD   0xFF 0xD8          DC8 255, 216, 162, 242, 42, 241, 169, 46, 130, 146, 168, 242, 49, 128
   \              0xA2 0xF2    
   \              0x2A 0xF1    
   \              0xA9 0x2E    
   \              0x82 0x92    
   \              0xA8 0xF2    
   \              0x31 0x80    
   \   00000BCB   0xA6 0x96          DC8 166, 150, 241, 217, 0, 172, 140, 156, 12, 48, 172, 222, 208, 222
   \              0xF1 0xD9    
   \              0x00 0xAC    
   \              0x8C 0x9C    
   \              0x0C 0x30    
   \              0xAC 0xDE    
   \              0xD0 0xDE    
   \   00000BD9   0xFF 0xD8          DC8 255, 216, 140, 156, 172, 208, 16, 172, 222, 128, 146, 162, 242, 76
   \              0x8C 0x9C    
   \              0xAC 0xD0    
   \              0x10 0xAC    
   \              0xDE 0x80    
   \              0x92 0xA2    
   \              0xF2 0x4C    
   \   00000BE7   0x82 0xA8          DC8 130, 168, 241, 202, 242, 53, 241, 150, 136, 166, 217, 0, 216, 241
   \              0xF1 0xCA    
   \              0xF2 0x35    
   \              0xF1 0x96    
   \              0x88 0xA6    
   \              0xD9 0x00    
   \              0xD8 0xF1    
   \   00000BF5   0xFF 0x00          DC8 255, 0, 0
   \              0x00         
    250              /* bank # 0 */
    251              0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
    252              0x00, 0x65, 0x00, 0x54, 0xff, 0xef, 0x00, 0x00, 0xfa, 0x80, 0x00, 0x0b, 0x12, 0x82, 0x00, 0x01,
    253              0x03, 0x0c, 0x30, 0xc3, 0x0e, 0x8c, 0x8c, 0xe9, 0x14, 0xd5, 0x40, 0x02, 0x13, 0x71, 0x0f, 0x8e,
    254              0x38, 0x83, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83, 0x25, 0x8e, 0xf8, 0x83, 0x30, 0x00, 0xf8, 0x83,
    255              0xff, 0xff, 0xff, 0xff, 0x0f, 0xfe, 0xa9, 0xd6, 0x24, 0x00, 0x04, 0x00, 0x1a, 0x82, 0x79, 0xa1,
    256              0x00, 0x00, 0x00, 0x3c, 0xff, 0xff, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x38, 0x83, 0x6f, 0xa2,
    257              0x00, 0x3e, 0x03, 0x30, 0x40, 0x00, 0x00, 0x00, 0x02, 0xca, 0xe3, 0x09, 0x3e, 0x80, 0x00, 0x00,
    258              0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
    259              0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x6e, 0x00, 0x00, 0x06, 0x92, 0x0a, 0x16, 0xc0, 0xdf,
    260              0xff, 0xff, 0x02, 0x56, 0xfd, 0x8c, 0xd3, 0x77, 0xff, 0xe1, 0xc4, 0x96, 0xe0, 0xc5, 0xbe, 0xaa,
    261              0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x2b, 0x00, 0x00, 0x16, 0x57, 0x00, 0x00, 0x03, 0x59,
    262              0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xfa, 0x00, 0x02, 0x6c, 0x1d, 0x00, 0x00, 0x00, 0x00,
    263              0x3f, 0xff, 0xdf, 0xeb, 0x00, 0x3e, 0xb3, 0xb6, 0x00, 0x0d, 0x22, 0x78, 0x00, 0x00, 0x2f, 0x3c,
    264              0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0xb5, 0x00, 0x00, 0x39, 0xa2, 0x00, 0x00, 0xb3, 0x65,
    265              0xd9, 0x0e, 0x9f, 0xc9, 0x1d, 0xcf, 0x4c, 0x34, 0x30, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
    266              0x3b, 0xb6, 0x7a, 0xe8, 0x00, 0x64, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    267              /* bank # 1 */
    268              0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0xfa, 0x92, 0x10, 0x00, 0x22, 0x5e, 0x00, 0x0d, 0x22, 0x9f,
    269              0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0xff, 0x46, 0x00, 0x00, 0x63, 0xd4, 0x00, 0x00,
    270              0x10, 0x00, 0x00, 0x00, 0x04, 0xd6, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00, 0x04, 0xcc, 0x00, 0x00,
    271              0x00, 0x00, 0x10, 0x72, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    272              0x00, 0x06, 0x00, 0x02, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00,
    273              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x64, 0x00, 0x20, 0x00, 0x00,
    274              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00,
    275              0x00, 0x00, 0x00, 0x32, 0xf8, 0x98, 0x00, 0x00, 0xff, 0x65, 0x00, 0x00, 0x83, 0x0f, 0x00, 0x00,
    276              0xff, 0x9b, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    277              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    278              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    279              0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xb2, 0x6a, 0x00, 0x02, 0x00, 0x00,
    280              0x00, 0x01, 0xfb, 0x83, 0x00, 0x68, 0x00, 0x00, 0x00, 0xd9, 0xfc, 0x00, 0x7c, 0xf1, 0xff, 0x83,
    281              0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x64, 0x03, 0xe8, 0x00, 0x64, 0x00, 0x28,
    282              0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
    283              0x00, 0x00, 0x10, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf4, 0x00, 0x00, 0x10, 0x00,
    284              /* bank # 2 */
    285              0x00, 0x28, 0x00, 0x00, 0xff, 0xff, 0x45, 0x81, 0xff, 0xff, 0xfa, 0x72, 0x00, 0x00, 0x00, 0x00,
    286              0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x05, 0x00, 0x05, 0xba, 0xc6, 0x00, 0x47, 0x78, 0xa2,
    287              0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x14,
    288              0x00, 0x00, 0x25, 0x4d, 0x00, 0x2f, 0x70, 0x6d, 0x00, 0x00, 0x05, 0xae, 0x00, 0x0c, 0x02, 0xd0,
    289              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    290              0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    291              0x00, 0x64, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    292              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    293              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    294              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    295              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    296              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    297              0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e,
    298              0x00, 0x00, 0x0a, 0xc7, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0xff, 0xff, 0xff, 0x9c,
    299              0x00, 0x00, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x64,
    300              0xff, 0xe5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    301              /* bank # 3 */
    302              0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    303              0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x24, 0x26, 0xd3,
    304              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x96, 0x00, 0x3c,
    305              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    306              0x0c, 0x0a, 0x4e, 0x68, 0xcd, 0xcf, 0x77, 0x09, 0x50, 0x16, 0x67, 0x59, 0xc6, 0x19, 0xce, 0x82,
    307              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    308              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xd7, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00,
    309              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x93, 0x8f, 0x9d, 0x1e, 0x1b, 0x1c, 0x19,
    310              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    311              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x18, 0x85, 0x00, 0x00, 0x40, 0x00,
    312              0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    313              0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    314              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    315              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    316              0x00, 0x00, 0x00, 0x00, 0x67, 0x7d, 0xdf, 0x7e, 0x72, 0x90, 0x2e, 0x55, 0x4c, 0xf6, 0xe6, 0x88,
    317              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    318          
    319              /* bank # 4 */
    320              0xd8, 0xdc, 0xb4, 0xb8, 0xb0, 0xd8, 0xb9, 0xab, 0xf3, 0xf8, 0xfa, 0xb3, 0xb7, 0xbb, 0x8e, 0x9e,
    321              0xae, 0xf1, 0x32, 0xf5, 0x1b, 0xf1, 0xb4, 0xb8, 0xb0, 0x80, 0x97, 0xf1, 0xa9, 0xdf, 0xdf, 0xdf,
    322              0xaa, 0xdf, 0xdf, 0xdf, 0xf2, 0xaa, 0xc5, 0xcd, 0xc7, 0xa9, 0x0c, 0xc9, 0x2c, 0x97, 0xf1, 0xa9,
    323              0x89, 0x26, 0x46, 0x66, 0xb2, 0x89, 0x99, 0xa9, 0x2d, 0x55, 0x7d, 0xb0, 0xb0, 0x8a, 0xa8, 0x96,
    324              0x36, 0x56, 0x76, 0xf1, 0xba, 0xa3, 0xb4, 0xb2, 0x80, 0xc0, 0xb8, 0xa8, 0x97, 0x11, 0xb2, 0x83,
    325              0x98, 0xba, 0xa3, 0xf0, 0x24, 0x08, 0x44, 0x10, 0x64, 0x18, 0xb2, 0xb9, 0xb4, 0x98, 0x83, 0xf1,
    326              0xa3, 0x29, 0x55, 0x7d, 0xba, 0xb5, 0xb1, 0xa3, 0x83, 0x93, 0xf0, 0x00, 0x28, 0x50, 0xf5, 0xb2,
    327              0xb6, 0xaa, 0x83, 0x93, 0x28, 0x54, 0x7c, 0xf1, 0xb9, 0xa3, 0x82, 0x93, 0x61, 0xba, 0xa2, 0xda,
    328              0xde, 0xdf, 0xdb, 0x81, 0x9a, 0xb9, 0xae, 0xf5, 0x60, 0x68, 0x70, 0xf1, 0xda, 0xba, 0xa2, 0xdf,
    329              0xd9, 0xba, 0xa2, 0xfa, 0xb9, 0xa3, 0x82, 0x92, 0xdb, 0x31, 0xba, 0xa2, 0xd9, 0xba, 0xa2, 0xf8,
    330              0xdf, 0x85, 0xa4, 0xd0, 0xc1, 0xbb, 0xad, 0x83, 0xc2, 0xc5, 0xc7, 0xb8, 0xa2, 0xdf, 0xdf, 0xdf,
    331              0xba, 0xa0, 0xdf, 0xdf, 0xdf, 0xd8, 0xd8, 0xf1, 0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35,
    332              0x5d, 0xb2, 0xb6, 0xba, 0xaf, 0x8c, 0x96, 0x19, 0x8f, 0x9f, 0xa7, 0x0e, 0x16, 0x1e, 0xb4, 0x9a,
    333              0xb8, 0xaa, 0x87, 0x2c, 0x54, 0x7c, 0xba, 0xa4, 0xb0, 0x8a, 0xb6, 0x91, 0x32, 0x56, 0x76, 0xb2,
    334              0x84, 0x94, 0xa4, 0xc8, 0x08, 0xcd, 0xd8, 0xb8, 0xb4, 0xb0, 0xf1, 0x99, 0x82, 0xa8, 0x2d, 0x55,
    335              0x7d, 0x98, 0xa8, 0x0e, 0x16, 0x1e, 0xa2, 0x2c, 0x54, 0x7c, 0x92, 0xa4, 0xf0, 0x2c, 0x50, 0x78,
    336              /* bank # 5 */
    337              0xf1, 0x84, 0xa8, 0x98, 0xc4, 0xcd, 0xfc, 0xd8, 0x0d, 0xdb, 0xa8, 0xfc, 0x2d, 0xf3, 0xd9, 0xba,
    338              0xa6, 0xf8, 0xda, 0xba, 0xa6, 0xde, 0xd8, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xf3, 0xc8,
    339              0x41, 0xda, 0xa6, 0xc8, 0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0x82, 0xa8, 0x92, 0xf5, 0x2c, 0x54, 0x88,
    340              0x98, 0xf1, 0x35, 0xd9, 0xf4, 0x18, 0xd8, 0xf1, 0xa2, 0xd0, 0xf8, 0xf9, 0xa8, 0x84, 0xd9, 0xc7,
    341              0xdf, 0xf8, 0xf8, 0x83, 0xc5, 0xda, 0xdf, 0x69, 0xdf, 0x83, 0xc1, 0xd8, 0xf4, 0x01, 0x14, 0xf1,
    342              0xa8, 0x82, 0x4e, 0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x28, 0x97, 0x88, 0xf1,
    343              0x09, 0xf4, 0x1c, 0x1c, 0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x29,
    344              0xf4, 0x0d, 0xd8, 0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc2, 0x03, 0xd8, 0xde, 0xdf, 0x1a,
    345              0xd8, 0xf1, 0xa2, 0xfa, 0xf9, 0xa8, 0x84, 0x98, 0xd9, 0xc7, 0xdf, 0xf8, 0xf8, 0xf8, 0x83, 0xc7,
    346              0xda, 0xdf, 0x69, 0xdf, 0xf8, 0x83, 0xc3, 0xd8, 0xf4, 0x01, 0x14, 0xf1, 0x98, 0xa8, 0x82, 0x2e,
    347              0xa8, 0x84, 0xf3, 0x11, 0xd1, 0x82, 0xf5, 0xd9, 0x92, 0x50, 0x97, 0x88, 0xf1, 0x09, 0xf4, 0x1c,
    348              0xd8, 0x84, 0xa8, 0xf3, 0xc0, 0xf8, 0xf9, 0xd1, 0xd9, 0x97, 0x82, 0xf1, 0x49, 0xf4, 0x0d, 0xd8,
    349              0xf3, 0xf9, 0xf9, 0xd1, 0xd9, 0x82, 0xf4, 0xc4, 0x03, 0xd8, 0xde, 0xdf, 0xd8, 0xf1, 0xad, 0x88,
    350              0x98, 0xcc, 0xa8, 0x09, 0xf9, 0xd9, 0x82, 0x92, 0xa8, 0xf5, 0x7c, 0xf1, 0x88, 0x3a, 0xcf, 0x94,
    351              0x4a, 0x6e, 0x98, 0xdb, 0x69, 0x31, 0xda, 0xad, 0xf2, 0xde, 0xf9, 0xd8, 0x87, 0x95, 0xa8, 0xf2,
    352              0x21, 0xd1, 0xda, 0xa5, 0xf9, 0xf4, 0x17, 0xd9, 0xf1, 0xae, 0x8e, 0xd0, 0xc0, 0xc3, 0xae, 0x82,
    353              /* bank # 6 */
    354              0xc6, 0x84, 0xc3, 0xa8, 0x85, 0x95, 0xc8, 0xa5, 0x88, 0xf2, 0xc0, 0xf1, 0xf4, 0x01, 0x0e, 0xf1,
    355              0x8e, 0x9e, 0xa8, 0xc6, 0x3e, 0x56, 0xf5, 0x54, 0xf1, 0x88, 0x72, 0xf4, 0x01, 0x15, 0xf1, 0x98,
    356              0x45, 0x85, 0x6e, 0xf5, 0x8e, 0x9e, 0x04, 0x88, 0xf1, 0x42, 0x98, 0x5a, 0x8e, 0x9e, 0x06, 0x88,
    357              0x69, 0xf4, 0x01, 0x1c, 0xf1, 0x98, 0x1e, 0x11, 0x08, 0xd0, 0xf5, 0x04, 0xf1, 0x1e, 0x97, 0x02,
    358              0x02, 0x98, 0x36, 0x25, 0xdb, 0xf9, 0xd9, 0x85, 0xa5, 0xf3, 0xc1, 0xda, 0x85, 0xa5, 0xf3, 0xdf,
    359              0xd8, 0x85, 0x95, 0xa8, 0xf3, 0x09, 0xda, 0xa5, 0xfa, 0xd8, 0x82, 0x92, 0xa8, 0xf5, 0x78, 0xf1,
    360              0x88, 0x1a, 0x84, 0x9f, 0x26, 0x88, 0x98, 0x21, 0xda, 0xf4, 0x1d, 0xf3, 0xd8, 0x87, 0x9f, 0x39,
    361              0xd1, 0xaf, 0xd9, 0xdf, 0xdf, 0xfb, 0xf9, 0xf4, 0x0c, 0xf3, 0xd8, 0xfa, 0xd0, 0xf8, 0xda, 0xf9,
    362              0xf9, 0xd0, 0xdf, 0xd9, 0xf9, 0xd8, 0xf4, 0x0b, 0xd8, 0xf3, 0x87, 0x9f, 0x39, 0xd1, 0xaf, 0xd9,
    363              0xdf, 0xdf, 0xf4, 0x1d, 0xf3, 0xd8, 0xfa, 0xfc, 0xa8, 0x69, 0xf9, 0xf9, 0xaf, 0xd0, 0xda, 0xde,
    364              0xfa, 0xd9, 0xf8, 0x8f, 0x9f, 0xa8, 0xf1, 0xcc, 0xf3, 0x98, 0xdb, 0x45, 0xd9, 0xaf, 0xdf, 0xd0,
    365              0xf8, 0xd8, 0xf1, 0x8f, 0x9f, 0xa8, 0xca, 0xf3, 0x88, 0x09, 0xda, 0xaf, 0x8f, 0xcb, 0xf8, 0xd8,
    366              0xf2, 0xad, 0x97, 0x8d, 0x0c, 0xd9, 0xa5, 0xdf, 0xf9, 0xba, 0xa6, 0xf3, 0xfa, 0xf4, 0x12, 0xf2,
    367              0xd8, 0x95, 0x0d, 0xd1, 0xd9, 0xba, 0xa6, 0xf3, 0xfa, 0xda, 0xa5, 0xf2, 0xc1, 0xba, 0xa6, 0xf3,
    368              0xdf, 0xd8, 0xf1, 0xba, 0xb2, 0xb6, 0x86, 0x96, 0xa6, 0xd0, 0xca, 0xf3, 0x49, 0xda, 0xa6, 0xcb,
    369              0xf8, 0xd8, 0xb0, 0xb4, 0xb8, 0xd8, 0xad, 0x84, 0xf2, 0xc0, 0xdf, 0xf1, 0x8f, 0xcb, 0xc3, 0xa8,
    370              /* bank # 7 */
    371              0xb2, 0xb6, 0x86, 0x96, 0xc8, 0xc1, 0xcb, 0xc3, 0xf3, 0xb0, 0xb4, 0x88, 0x98, 0xa8, 0x21, 0xdb,
    372              0x71, 0x8d, 0x9d, 0x71, 0x85, 0x95, 0x21, 0xd9, 0xad, 0xf2, 0xfa, 0xd8, 0x85, 0x97, 0xa8, 0x28,
    373              0xd9, 0xf4, 0x08, 0xd8, 0xf2, 0x8d, 0x29, 0xda, 0xf4, 0x05, 0xd9, 0xf2, 0x85, 0xa4, 0xc2, 0xf2,
    374              0xd8, 0xa8, 0x8d, 0x94, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xf2, 0xd8, 0x87, 0x21, 0xd8, 0xf4, 0x0a,
    375              0xd8, 0xf2, 0x84, 0x98, 0xa8, 0xc8, 0x01, 0xd1, 0xd9, 0xf4, 0x11, 0xd8, 0xf3, 0xa4, 0xc8, 0xbb,
    376              0xaf, 0xd0, 0xf2, 0xde, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xd8, 0xf1, 0xb8, 0xf6,
    377              0xb5, 0xb9, 0xb0, 0x8a, 0x95, 0xa3, 0xde, 0x3c, 0xa3, 0xd9, 0xf8, 0xd8, 0x5c, 0xa3, 0xd9, 0xf8,
    378              0xd8, 0x7c, 0xa3, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa5, 0xd9, 0xdf, 0xda, 0xfa, 0xd8, 0xb1,
    379              0x85, 0x30, 0xf7, 0xd9, 0xde, 0xd8, 0xf8, 0x30, 0xad, 0xda, 0xde, 0xd8, 0xf2, 0xb4, 0x8c, 0x99,
    380              0xa3, 0x2d, 0x55, 0x7d, 0xa0, 0x83, 0xdf, 0xdf, 0xdf, 0xb5, 0x91, 0xa0, 0xf6, 0x29, 0xd9, 0xfb,
    381              0xd8, 0xa0, 0xfc, 0x29, 0xd9, 0xfa, 0xd8, 0xa0, 0xd0, 0x51, 0xd9, 0xf8, 0xd8, 0xfc, 0x51, 0xd9,
    382              0xf9, 0xd8, 0x79, 0xd9, 0xfb, 0xd8, 0xa0, 0xd0, 0xfc, 0x79, 0xd9, 0xfa, 0xd8, 0xa1, 0xf9, 0xf9,
    383              0xf9, 0xf9, 0xf9, 0xa0, 0xda, 0xdf, 0xdf, 0xdf, 0xd8, 0xa1, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xac,
    384              0xde, 0xf8, 0xad, 0xde, 0x83, 0x93, 0xac, 0x2c, 0x54, 0x7c, 0xf1, 0xa8, 0xdf, 0xdf, 0xdf, 0xf6,
    385              0x9d, 0x2c, 0xda, 0xa0, 0xdf, 0xd9, 0xfa, 0xdb, 0x2d, 0xf8, 0xd8, 0xa8, 0x50, 0xda, 0xa0, 0xd0,
    386              0xde, 0xd9, 0xd0, 0xf8, 0xf8, 0xf8, 0xdb, 0x55, 0xf8, 0xd8, 0xa8, 0x78, 0xda, 0xa0, 0xd0, 0xdf,
    387              /* bank # 8 */
    388              0xd9, 0xd0, 0xfa, 0xf8, 0xf8, 0xf8, 0xf8, 0xdb, 0x7d, 0xf8, 0xd8, 0x9c, 0xa8, 0x8c, 0xf5, 0x30,
    389              0xdb, 0x38, 0xd9, 0xd0, 0xde, 0xdf, 0xa0, 0xd0, 0xde, 0xdf, 0xd8, 0xa8, 0x48, 0xdb, 0x58, 0xd9,
    390              0xdf, 0xd0, 0xde, 0xa0, 0xdf, 0xd0, 0xde, 0xd8, 0xa8, 0x68, 0xdb, 0x70, 0xd9, 0xdf, 0xdf, 0xa0,
    391              0xdf, 0xdf, 0xd8, 0xf1, 0xa8, 0x88, 0x90, 0x2c, 0x54, 0x7c, 0x98, 0xa8, 0xd0, 0x5c, 0x38, 0xd1,
    392              0xda, 0xf2, 0xae, 0x8c, 0xdf, 0xf9, 0xd8, 0xb0, 0x87, 0xa8, 0xc1, 0xc1, 0xb1, 0x88, 0xa8, 0xc6,
    393              0xf9, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xa8,
    394              0xf9, 0xda, 0x36, 0xd8, 0xa8, 0xf9, 0xda, 0x36, 0xd8, 0xf7, 0x8d, 0x9d, 0xad, 0xf8, 0x18, 0xda,
    395              0xf2, 0xae, 0xdf, 0xd8, 0xf7, 0xad, 0xfa, 0x30, 0xd9, 0xa4, 0xde, 0xf9, 0xd8, 0xf2, 0xae, 0xde,
    396              0xfa, 0xf9, 0x83, 0xa7, 0xd9, 0xc3, 0xc5, 0xc7, 0xf1, 0x88, 0x9b, 0xa7, 0x7a, 0xad, 0xf7, 0xde,
    397              0xdf, 0xa4, 0xf8, 0x84, 0x94, 0x08, 0xa7, 0x97, 0xf3, 0x00, 0xae, 0xf2, 0x98, 0x19, 0xa4, 0x88,
    398              0xc6, 0xa3, 0x94, 0x88, 0xf6, 0x32, 0xdf, 0xf2, 0x83, 0x93, 0xdb, 0x09, 0xd9, 0xf2, 0xaa, 0xdf,
    399              0xd8, 0xd8, 0xae, 0xf8, 0xf9, 0xd1, 0xda, 0xf3, 0xa4, 0xde, 0xa7, 0xf1, 0x88, 0x9b, 0x7a, 0xd8,
    400              0xf3, 0x84, 0x94, 0xae, 0x19, 0xf9, 0xda, 0xaa, 0xf1, 0xdf, 0xd8, 0xa8, 0x81, 0xc0, 0xc3, 0xc5,
    401              0xc7, 0xa3, 0x92, 0x83, 0xf6, 0x28, 0xad, 0xde, 0xd9, 0xf8, 0xd8, 0xa3, 0x50, 0xad, 0xd9, 0xf8,
    402              0xd8, 0xa3, 0x78, 0xad, 0xd9, 0xf8, 0xd8, 0xf8, 0xf9, 0xd1, 0xa1, 0xda, 0xde, 0xc3, 0xc5, 0xc7,
    403              0xd8, 0xa1, 0x81, 0x94, 0xf8, 0x18, 0xf2, 0xb0, 0x89, 0xac, 0xc3, 0xc5, 0xc7, 0xf1, 0xd8, 0xb8,
    404              /* bank # 9 */
    405              0xb4, 0xb0, 0x97, 0x86, 0xa8, 0x31, 0x9b, 0x06, 0x99, 0x07, 0xab, 0x97, 0x28, 0x88, 0x9b, 0xf0,
    406              0x0c, 0x20, 0x14, 0x40, 0xb0, 0xb4, 0xb8, 0xf0, 0xa8, 0x8a, 0x9a, 0x28, 0x50, 0x78, 0xb7, 0x9b,
    407              0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xf1, 0xbb, 0xab,
    408              0x88, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0xb3, 0x8b, 0xb8, 0xa8, 0x04, 0x28, 0x50, 0x78, 0xf1, 0xb0,
    409              0x88, 0xb4, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xbb, 0xab, 0xb3, 0x8b, 0x02, 0x26, 0x46, 0x66, 0xb0,
    410              0xb8, 0xf0, 0x8a, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x8b, 0x29, 0x51, 0x79, 0x8a, 0x24, 0x70, 0x59,
    411              0x8b, 0x20, 0x58, 0x71, 0x8a, 0x44, 0x69, 0x38, 0x8b, 0x39, 0x40, 0x68, 0x8a, 0x64, 0x48, 0x31,
    412              0x8b, 0x30, 0x49, 0x60, 0x88, 0xf1, 0xac, 0x00, 0x2c, 0x54, 0x7c, 0xf0, 0x8c, 0xa8, 0x04, 0x28,
    413              0x50, 0x78, 0xf1, 0x88, 0x97, 0x26, 0xa8, 0x59, 0x98, 0xac, 0x8c, 0x02, 0x26, 0x46, 0x66, 0xf0,
    414              0x89, 0x9c, 0xa8, 0x29, 0x51, 0x79, 0x24, 0x70, 0x59, 0x44, 0x69, 0x38, 0x64, 0x48, 0x31, 0xa9,
    415              0x88, 0x09, 0x20, 0x59, 0x70, 0xab, 0x11, 0x38, 0x40, 0x69, 0xa8, 0x19, 0x31, 0x48, 0x60, 0x8c,
    416              0xa8, 0x3c, 0x41, 0x5c, 0x20, 0x7c, 0x00, 0xf1, 0x87, 0x98, 0x19, 0x86, 0xa8, 0x6e, 0x76, 0x7e,
    417              0xa9, 0x99, 0x88, 0x2d, 0x55, 0x7d, 0xd8, 0xb1, 0xb5, 0xb9, 0xa3, 0xdf, 0xdf, 0xdf, 0xae, 0xd0,
    418              0xdf, 0xaa, 0xd0, 0xde, 0xf2, 0xab, 0xf8, 0xf9, 0xd9, 0xb0, 0x87, 0xc4, 0xaa, 0xf1, 0xdf, 0xdf,
    419              0xbb, 0xaf, 0xdf, 0xdf, 0xb9, 0xd8, 0xb1, 0xf1, 0xa3, 0x97, 0x8e, 0x60, 0xdf, 0xb0, 0x84, 0xf2,
    420              0xc8, 0xf8, 0xf9, 0xd9, 0xde, 0xd8, 0x93, 0x85, 0xf1, 0x4a, 0xb1, 0x83, 0xa3, 0x08, 0xb5, 0x83,
    421              /* bank # 10 */
    422              0x9a, 0x08, 0x10, 0xb7, 0x9f, 0x10, 0xd8, 0xf1, 0xb0, 0xba, 0xae, 0xb0, 0x8a, 0xc2, 0xb2, 0xb6,
    423              0x8e, 0x9e, 0xf1, 0xfb, 0xd9, 0xf4, 0x1d, 0xd8, 0xf9, 0xd9, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad,
    424              0x61, 0xd9, 0xae, 0xfb, 0xd8, 0xf4, 0x0c, 0xf1, 0xd8, 0xf8, 0xf8, 0xad, 0x19, 0xd9, 0xae, 0xfb,
    425              0xdf, 0xd8, 0xf4, 0x16, 0xf1, 0xd8, 0xf8, 0xad, 0x8d, 0x61, 0xd9, 0xf4, 0xf4, 0xac, 0xf5, 0x9c,
    426              0x9c, 0x8d, 0xdf, 0x2b, 0xba, 0xb6, 0xae, 0xfa, 0xf8, 0xf4, 0x0b, 0xd8, 0xf1, 0xae, 0xd0, 0xf8,
    427              0xad, 0x51, 0xda, 0xae, 0xfa, 0xf8, 0xf1, 0xd8, 0xb9, 0xb1, 0xb6, 0xa3, 0x83, 0x9c, 0x08, 0xb9,
    428              0xb1, 0x83, 0x9a, 0xb5, 0xaa, 0xc0, 0xfd, 0x30, 0x83, 0xb7, 0x9f, 0x10, 0xb5, 0x8b, 0x93, 0xf2,
    429              0x02, 0x02, 0xd1, 0xab, 0xda, 0xde, 0xd8, 0xf1, 0xb0, 0x80, 0xba, 0xab, 0xc0, 0xc3, 0xb2, 0x84,
    430              0xc1, 0xc3, 0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9, 0xab, 0xde, 0xb0,
    431              0x87, 0x9c, 0xb9, 0xa3, 0xdd, 0xf1, 0xb3, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xb0, 0x87, 0xa3, 0xa3,
    432              0xa3, 0xa3, 0xb2, 0x8b, 0xb6, 0x9b, 0xf2, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
    433              0xa3, 0xf1, 0xb0, 0x87, 0xb5, 0x9a, 0xa3, 0xf3, 0x9b, 0xa3, 0xa3, 0xdc, 0xba, 0xac, 0xdf, 0xb9,
    434              0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3, 0xa3,
    435              0xd8, 0xd8, 0xd8, 0xbb, 0xb3, 0xb7, 0xf1, 0xaa, 0xf9, 0xda, 0xff, 0xd9, 0x80, 0x9a, 0xaa, 0x28,
    436              0xb4, 0x80, 0x98, 0xa7, 0x20, 0xb7, 0x97, 0x87, 0xa8, 0x66, 0x88, 0xf0, 0x79, 0x51, 0xf1, 0x90,
    437              0x2c, 0x87, 0x0c, 0xa7, 0x81, 0x97, 0x62, 0x93, 0xf0, 0x71, 0x71, 0x60, 0x85, 0x94, 0x01, 0x29,
    438              /* bank # 11 */
    439              0x51, 0x79, 0x90, 0xa5, 0xf1, 0x28, 0x4c, 0x6c, 0x87, 0x0c, 0x95, 0x18, 0x85, 0x78, 0xa3, 0x83,
    440              0x90, 0x28, 0x4c, 0x6c, 0x88, 0x6c, 0xd8, 0xf3, 0xa2, 0x82, 0x00, 0xf2, 0x10, 0xa8, 0x92, 0x19,
    441              0x80, 0xa2, 0xf2, 0xd9, 0x26, 0xd8, 0xf1, 0x88, 0xa8, 0x4d, 0xd9, 0x48, 0xd8, 0x96, 0xa8, 0x39,
    442              0x80, 0xd9, 0x3c, 0xd8, 0x95, 0x80, 0xa8, 0x39, 0xa6, 0x86, 0x98, 0xd9, 0x2c, 0xda, 0x87, 0xa7,
    443              0x2c, 0xd8, 0xa8, 0x89, 0x95, 0x19, 0xa9, 0x80, 0xd9, 0x38, 0xd8, 0xa8, 0x89, 0x39, 0xa9, 0x80,
    444              0xda, 0x3c, 0xd8, 0xa8, 0x2e, 0xa8, 0x39, 0x90, 0xd9, 0x0c, 0xd8, 0xa8, 0x95, 0x31, 0x98, 0xd9,
    445              0x0c, 0xd8, 0xa8, 0x09, 0xd9, 0xff, 0xd8, 0x01, 0xda, 0xff, 0xd8, 0x95, 0x39, 0xa9, 0xda, 0x26,
    446              0xff, 0xd8, 0x90, 0xa8, 0x0d, 0x89, 0x99, 0xa8, 0x10, 0x80, 0x98, 0x21, 0xda, 0x2e, 0xd8, 0x89,
    447              0x99, 0xa8, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x86, 0x96, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8,
    448              0x87, 0x31, 0x80, 0xda, 0x2e, 0xd8, 0xa8, 0x82, 0x92, 0xf3, 0x41, 0x80, 0xf1, 0xd9, 0x2e, 0xd8,
    449              0xa8, 0x82, 0xf3, 0x19, 0x80, 0xf1, 0xd9, 0x2e, 0xd8, 0x82, 0xac, 0xf3, 0xc0, 0xa2, 0x80, 0x22,
    450              0xf1, 0xa6, 0x2e, 0xa7, 0x2e, 0xa9, 0x22, 0x98, 0xa8, 0x29, 0xda, 0xac, 0xde, 0xff, 0xd8, 0xa2,
    451              0xf2, 0x2a, 0xf1, 0xa9, 0x2e, 0x82, 0x92, 0xa8, 0xf2, 0x31, 0x80, 0xa6, 0x96, 0xf1, 0xd9, 0x00,
    452              0xac, 0x8c, 0x9c, 0x0c, 0x30, 0xac, 0xde, 0xd0, 0xde, 0xff, 0xd8, 0x8c, 0x9c, 0xac, 0xd0, 0x10,
    453              0xac, 0xde, 0x80, 0x92, 0xa2, 0xf2, 0x4c, 0x82, 0xa8, 0xf1, 0xca, 0xf2, 0x35, 0xf1, 0x96, 0x88,
    454              0xa6, 0xd9, 0x00, 0xd8, 0xf1, 0xff
    455          };
    456          

   \                                 In section .rodata, align 2
    457          static const unsigned short sStartAddress = 0x0400;
   \                     sStartAddress:
   \   00000000   0x0400             DC16 1024
    458          
    459          /* END OF SECTION COPIED FROM dmpDefaultMPU6050.c */
    460          
    461          #define INT_SRC_TAP             (0x01)
    462          #define INT_SRC_ANDROID_ORIENT  (0x08)
    463          
    464          #define DMP_FEATURE_SEND_ANY_GYRO   (DMP_FEATURE_SEND_RAW_GYRO | \
    465                                               DMP_FEATURE_SEND_CAL_GYRO)
    466          
    467          #define MAX_PACKET_LENGTH   (32)
    468          
    469          #define DMP_SAMPLE_RATE     (200)
    470          #define GYRO_SF             (46850825LL * 200 / DMP_SAMPLE_RATE)
    471          
    472          #define FIFO_CORRUPTION_CHECK
    473          #ifdef FIFO_CORRUPTION_CHECK
    474          #define QUAT_ERROR_THRESH       (1L<<24)
    475          #define QUAT_MAG_SQ_NORMALIZED  (1L<<28)
    476          #define QUAT_MAG_SQ_MIN         (QUAT_MAG_SQ_NORMALIZED - QUAT_ERROR_THRESH)
    477          #define QUAT_MAG_SQ_MAX         (QUAT_MAG_SQ_NORMALIZED + QUAT_ERROR_THRESH)
    478          #endif
    479          
    480          struct dmp_s {
    481              void (*tap_cb)(unsigned char count, unsigned char direction);
    482              void (*android_orient_cb)(unsigned char orientation);
    483              unsigned short orient;
    484              unsigned short feature_mask;
    485              unsigned short fifo_rate;
    486              unsigned char packet_length;
    487          };
    488          
    489          //static struct dmp_s dmp = {
    490          //    .tap_cb = NULL,
    491          //    .android_orient_cb = NULL,
    492          //    .orient = 0,
    493          //    .feature_mask = 0,
    494          //    .fifo_rate = 0,
    495          //    .packet_length = 0
    496          //};

   \                                 In section .bss, align 4
    497          static struct dmp_s dmp={
   \                     dmp:
   \   00000000                      DS8 16
    498            NULL,
    499            NULL,
    500            0,
    501            0,
    502            0,
    503            0
    504          };
    505          /**
    506           *  @brief  Load the DMP with this image.
    507           *  @return 0 if successful.
    508           */

   \                                 In section .text, align 2, keep-with-next
    509          int dmp_load_motion_driver_firmware(void)
    510          {
   \                     dmp_load_motion_driver_firmware:
   \   00000000   0xB580             PUSH     {R7,LR}
    511              return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
    512                  DMP_SAMPLE_RATE);
   \   00000002   0x23C8             MOVS     R3,#+200
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable11
   \   00000008   0x8802             LDRH     R2,[R0, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable11_1
   \   0000000E   0xF640 0x30F6      MOVW     R0,#+3062
   \   00000012   0x.... 0x....      BL       mpu_load_firmware
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    513          }
    514          
    515          /**
    516           *  @brief      Push gyro and accel orientation to the DMP.
    517           *  The orientation is represented here as the output of
    518           *  @e inv_orientation_matrix_to_scalar.
    519           *  @param[in]  orient  Gyro and accel orientation in body frame.
    520           *  @return     0 if successful.
    521           */

   \                                 In section .text, align 2, keep-with-next
    522          int dmp_set_orientation(unsigned short orient)
    523          {
   \                     dmp_set_orientation:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    524              unsigned char gyro_regs[3], accel_regs[3];
    525              const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable11_2
   \   0000000C   0x680A             LDR      R2,[R1, #0]
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    526              const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
   \   00000010   0xA802             ADD      R0,SP,#+8
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable11_3
   \   00000016   0x680A             LDR      R2,[R1, #0]
   \   00000018   0x6002             STR      R2,[R0, #+0]
    527              const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
   \   0000001A   0xA805             ADD      R0,SP,#+20
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \   00000020   0x680A             LDR      R2,[R1, #0]
   \   00000022   0x6002             STR      R2,[R0, #+0]
    528              const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
   \   00000024   0xA804             ADD      R0,SP,#+16
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable11_5
   \   0000002A   0x680A             LDR      R2,[R1, #0]
   \   0000002C   0x6002             STR      R2,[R0, #+0]
    529          
    530              gyro_regs[0] = gyro_axes[orient & 3];
   \   0000002E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000030   0xF014 0x0003      ANDS     R0,R4,#0x3
   \   00000034   0xA903             ADD      R1,SP,#+12
   \   00000036   0x5C40             LDRB     R0,[R0, R1]
   \   00000038   0xF88D 0x0004      STRB     R0,[SP, #+4]
    531              gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
   \   0000003C   0xF3C4 0x00C1      UBFX     R0,R4,#+3,#+2
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0xA903             ADD      R1,SP,#+12
   \   00000044   0x5C40             LDRB     R0,[R0, R1]
   \   00000046   0xF88D 0x0005      STRB     R0,[SP, #+5]
    532              gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
   \   0000004A   0xF3C4 0x1081      UBFX     R0,R4,#+6,#+2
   \   0000004E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000050   0xA903             ADD      R1,SP,#+12
   \   00000052   0x5C40             LDRB     R0,[R0, R1]
   \   00000054   0xF88D 0x0006      STRB     R0,[SP, #+6]
    533              accel_regs[0] = accel_axes[orient & 3];
   \   00000058   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000005A   0xF014 0x0003      ANDS     R0,R4,#0x3
   \   0000005E   0xA902             ADD      R1,SP,#+8
   \   00000060   0x5C40             LDRB     R0,[R0, R1]
   \   00000062   0xF88D 0x0000      STRB     R0,[SP, #+0]
    534              accel_regs[1] = accel_axes[(orient >> 3) & 3];
   \   00000066   0xF3C4 0x00C1      UBFX     R0,R4,#+3,#+2
   \   0000006A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000006C   0xA902             ADD      R1,SP,#+8
   \   0000006E   0x5C40             LDRB     R0,[R0, R1]
   \   00000070   0xF88D 0x0001      STRB     R0,[SP, #+1]
    535              accel_regs[2] = accel_axes[(orient >> 6) & 3];
   \   00000074   0xF3C4 0x1081      UBFX     R0,R4,#+6,#+2
   \   00000078   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   0xA902             ADD      R1,SP,#+8
   \   0000007C   0x5C40             LDRB     R0,[R0, R1]
   \   0000007E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    536          
    537              /* Chip-to-body, axes only. */
    538              if (mpu_write_mem(FCFG_1, 3, gyro_regs))
   \   00000082   0xAA01             ADD      R2,SP,#+4
   \   00000084   0x2103             MOVS     R1,#+3
   \   00000086   0xF240 0x4026      MOVW     R0,#+1062
   \   0000008A   0x.... 0x....      BL       mpu_write_mem
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD002             BEQ.N    ??dmp_set_orientation_0
    539                  return -1;
   \   00000092   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000096   0xE058             B.N      ??dmp_set_orientation_1
    540              if (mpu_write_mem(FCFG_2, 3, accel_regs))
   \                     ??dmp_set_orientation_0:
   \   00000098   0xAA00             ADD      R2,SP,#+0
   \   0000009A   0x2103             MOVS     R1,#+3
   \   0000009C   0xF240 0x402A      MOVW     R0,#+1066
   \   000000A0   0x.... 0x....      BL       mpu_write_mem
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD002             BEQ.N    ??dmp_set_orientation_2
    541                  return -1;
   \   000000A8   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000AC   0xE04D             B.N      ??dmp_set_orientation_1
    542          
    543              memcpy(gyro_regs, gyro_sign, 3);
   \                     ??dmp_set_orientation_2:
   \   000000AE   0x2203             MOVS     R2,#+3
   \   000000B0   0xA905             ADD      R1,SP,#+20
   \   000000B2   0xA801             ADD      R0,SP,#+4
   \   000000B4   0x.... 0x....      BL       memcpy
    544              memcpy(accel_regs, accel_sign, 3);
   \   000000B8   0x2203             MOVS     R2,#+3
   \   000000BA   0xA904             ADD      R1,SP,#+16
   \   000000BC   0xA800             ADD      R0,SP,#+0
   \   000000BE   0x.... 0x....      BL       memcpy
    545              if (orient & 4) {
   \   000000C2   0x0760             LSLS     R0,R4,#+29
   \   000000C4   0xD50B             BPL.N    ??dmp_set_orientation_3
    546                  gyro_regs[0] |= 1;
   \   000000C6   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000CA   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000CE   0xF88D 0x0004      STRB     R0,[SP, #+4]
    547                  accel_regs[0] |= 1;
   \   000000D2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D6   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000DA   0xF88D 0x0000      STRB     R0,[SP, #+0]
    548              }
    549              if (orient & 0x20) {
   \                     ??dmp_set_orientation_3:
   \   000000DE   0x06A0             LSLS     R0,R4,#+26
   \   000000E0   0xD50B             BPL.N    ??dmp_set_orientation_4
    550                  gyro_regs[1] |= 1;
   \   000000E2   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   000000E6   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000EA   0xF88D 0x0005      STRB     R0,[SP, #+5]
    551                  accel_regs[1] |= 1;
   \   000000EE   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000F2   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000F6   0xF88D 0x0001      STRB     R0,[SP, #+1]
    552              }
    553              if (orient & 0x100) {
   \                     ??dmp_set_orientation_4:
   \   000000FA   0x05E0             LSLS     R0,R4,#+23
   \   000000FC   0xD50B             BPL.N    ??dmp_set_orientation_5
    554                  gyro_regs[2] |= 1;
   \   000000FE   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000102   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000106   0xF88D 0x0006      STRB     R0,[SP, #+6]
    555                  accel_regs[2] |= 1;
   \   0000010A   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000010E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000112   0xF88D 0x0002      STRB     R0,[SP, #+2]
    556              }
    557          
    558              /* Chip-to-body, sign only. */
    559              if (mpu_write_mem(FCFG_3, 3, gyro_regs))
   \                     ??dmp_set_orientation_5:
   \   00000116   0xAA01             ADD      R2,SP,#+4
   \   00000118   0x2103             MOVS     R1,#+3
   \   0000011A   0xF44F 0x6088      MOV      R0,#+1088
   \   0000011E   0x.... 0x....      BL       mpu_write_mem
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD002             BEQ.N    ??dmp_set_orientation_6
    560                  return -1;
   \   00000126   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000012A   0xE00E             B.N      ??dmp_set_orientation_1
    561              if (mpu_write_mem(FCFG_7, 3, accel_regs))
   \                     ??dmp_set_orientation_6:
   \   0000012C   0xAA00             ADD      R2,SP,#+0
   \   0000012E   0x2103             MOVS     R1,#+3
   \   00000130   0xF240 0x4031      MOVW     R0,#+1073
   \   00000134   0x.... 0x....      BL       mpu_write_mem
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD002             BEQ.N    ??dmp_set_orientation_7
    562                  return -1;
   \   0000013C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000140   0xE003             B.N      ??dmp_set_orientation_1
    563              dmp.orient = orient;
   \                     ??dmp_set_orientation_7:
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000146   0x8104             STRH     R4,[R0, #+8]
    564              return 0;
   \   00000148   0x2000             MOVS     R0,#+0
   \                     ??dmp_set_orientation_1:
   \   0000014A   0xB006             ADD      SP,SP,#+24
   \   0000014C   0xBD10             POP      {R4,PC}          ;; return
    565          }
    566          
    567          /**
    568           *  @brief      Push gyro biases to the DMP.
    569           *  Because the gyro integration is handled in the DMP, any gyro biases
    570           *  calculated by the MPL should be pushed down to DMP memory to remove
    571           *  3-axis quaternion drift.
    572           *  \n NOTE: If the DMP-based gyro calibration is enabled, the DMP will
    573           *  overwrite the biases written to this location once a new one is computed.
    574           *  @param[in]  bias    Gyro biases in q16.
    575           *  @return     0 if successful.
    576           */

   \                                 In section .text, align 2, keep-with-next
    577          int dmp_set_gyro_bias(long *bias)
    578          {
   \                     dmp_set_gyro_bias:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    579              long gyro_bias_body[3];
    580              unsigned char regs[4];
    581          
    582              gyro_bias_body[0] = bias[dmp.orient & 3];
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000008   0x7A00             LDRB     R0,[R0, #+8]
   \   0000000A   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   0000000E   0xF854 0x0020      LDR      R0,[R4, R0, LSL #+2]
   \   00000012   0x9001             STR      R0,[SP, #+4]
    583              if (dmp.orient & 4)
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000018   0x7A00             LDRB     R0,[R0, #+8]
   \   0000001A   0x0740             LSLS     R0,R0,#+29
   \   0000001C   0xD504             BPL.N    ??dmp_set_gyro_bias_0
    584                  gyro_bias_body[0] *= -1;
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000024   0x4348             MULS     R0,R1,R0
   \   00000026   0x9001             STR      R0,[SP, #+4]
    585              gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
   \                     ??dmp_set_gyro_bias_0:
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000002C   0x8900             LDRH     R0,[R0, #+8]
   \   0000002E   0xF3C0 0x00C1      UBFX     R0,R0,#+3,#+2
   \   00000032   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000034   0xF854 0x0020      LDR      R0,[R4, R0, LSL #+2]
   \   00000038   0x9002             STR      R0,[SP, #+8]
    586              if (dmp.orient & 0x20)
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000003E   0x7A00             LDRB     R0,[R0, #+8]
   \   00000040   0x0680             LSLS     R0,R0,#+26
   \   00000042   0xD504             BPL.N    ??dmp_set_gyro_bias_1
    587                  gyro_bias_body[1] *= -1;
   \   00000044   0x9802             LDR      R0,[SP, #+8]
   \   00000046   0xF05F 0x31FF      MOVS     R1,#-1
   \   0000004A   0x4348             MULS     R0,R1,R0
   \   0000004C   0x9002             STR      R0,[SP, #+8]
    588              gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
   \                     ??dmp_set_gyro_bias_1:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000052   0x8900             LDRH     R0,[R0, #+8]
   \   00000054   0xF3C0 0x1081      UBFX     R0,R0,#+6,#+2
   \   00000058   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005A   0xF854 0x0020      LDR      R0,[R4, R0, LSL #+2]
   \   0000005E   0x9003             STR      R0,[SP, #+12]
    589              if (dmp.orient & 0x100)
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000064   0x8900             LDRH     R0,[R0, #+8]
   \   00000066   0x05C0             LSLS     R0,R0,#+23
   \   00000068   0xD504             BPL.N    ??dmp_set_gyro_bias_2
    590                  gyro_bias_body[2] *= -1;
   \   0000006A   0x9803             LDR      R0,[SP, #+12]
   \   0000006C   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000070   0x4348             MULS     R0,R1,R0
   \   00000072   0x9003             STR      R0,[SP, #+12]
    591          
    592          #ifdef EMPL_NO_64BIT
    593              gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
    594              gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
    595              gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
    596          #else
    597              gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
   \                     ??dmp_set_gyro_bias_2:
   \   00000074   0x9801             LDR      R0,[SP, #+4]
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable14_1  ;; 0x2cae309
   \   0000007A   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   0000007E   0x0F80             LSRS     R0,R0,#+30
   \   00000080   0xEA40 0x0081      ORR      R0,R0,R1, LSL #+2
   \   00000084   0x1789             ASRS     R1,R1,#+30
   \   00000086   0x9001             STR      R0,[SP, #+4]
    598              gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
   \   00000088   0x9802             LDR      R0,[SP, #+8]
   \   0000008A   0x.... 0x....      LDR.W    R1,??DataTable14_1  ;; 0x2cae309
   \   0000008E   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   00000092   0x0F80             LSRS     R0,R0,#+30
   \   00000094   0xEA40 0x0081      ORR      R0,R0,R1, LSL #+2
   \   00000098   0x1789             ASRS     R1,R1,#+30
   \   0000009A   0x9002             STR      R0,[SP, #+8]
    599              gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
   \   0000009C   0x9803             LDR      R0,[SP, #+12]
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable14_1  ;; 0x2cae309
   \   000000A2   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   000000A6   0x0F80             LSRS     R0,R0,#+30
   \   000000A8   0xEA40 0x0081      ORR      R0,R0,R1, LSL #+2
   \   000000AC   0x1789             ASRS     R1,R1,#+30
   \   000000AE   0x9003             STR      R0,[SP, #+12]
    600          #endif
    601          
    602              regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
   \   000000B0   0x9801             LDR      R0,[SP, #+4]
   \   000000B2   0x1600             ASRS     R0,R0,#+24
   \   000000B4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    603              regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
   \   000000B8   0x9801             LDR      R0,[SP, #+4]
   \   000000BA   0x1400             ASRS     R0,R0,#+16
   \   000000BC   0xF88D 0x0001      STRB     R0,[SP, #+1]
    604              regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
   \   000000C0   0x9801             LDR      R0,[SP, #+4]
   \   000000C2   0x1200             ASRS     R0,R0,#+8
   \   000000C4   0xF88D 0x0002      STRB     R0,[SP, #+2]
    605              regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
   \   000000C8   0x9801             LDR      R0,[SP, #+4]
   \   000000CA   0xF88D 0x0003      STRB     R0,[SP, #+3]
    606              if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
   \   000000CE   0xAA00             ADD      R2,SP,#+0
   \   000000D0   0x2104             MOVS     R1,#+4
   \   000000D2   0xF44F 0x7074      MOV      R0,#+976
   \   000000D6   0x.... 0x....      BL       mpu_write_mem
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD002             BEQ.N    ??dmp_set_gyro_bias_3
    607                  return -1;
   \   000000DE   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000E2   0xE02E             B.N      ??dmp_set_gyro_bias_4
    608          
    609              regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
   \                     ??dmp_set_gyro_bias_3:
   \   000000E4   0x9802             LDR      R0,[SP, #+8]
   \   000000E6   0x1600             ASRS     R0,R0,#+24
   \   000000E8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    610              regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
   \   000000EC   0x9802             LDR      R0,[SP, #+8]
   \   000000EE   0x1400             ASRS     R0,R0,#+16
   \   000000F0   0xF88D 0x0001      STRB     R0,[SP, #+1]
    611              regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
   \   000000F4   0x9802             LDR      R0,[SP, #+8]
   \   000000F6   0x1200             ASRS     R0,R0,#+8
   \   000000F8   0xF88D 0x0002      STRB     R0,[SP, #+2]
    612              regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
   \   000000FC   0x9802             LDR      R0,[SP, #+8]
   \   000000FE   0xF88D 0x0003      STRB     R0,[SP, #+3]
    613              if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
   \   00000102   0xAA00             ADD      R2,SP,#+0
   \   00000104   0x2104             MOVS     R1,#+4
   \   00000106   0xF44F 0x7075      MOV      R0,#+980
   \   0000010A   0x.... 0x....      BL       mpu_write_mem
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD002             BEQ.N    ??dmp_set_gyro_bias_5
    614                  return -1;
   \   00000112   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000116   0xE014             B.N      ??dmp_set_gyro_bias_4
    615          
    616              regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
   \                     ??dmp_set_gyro_bias_5:
   \   00000118   0x9803             LDR      R0,[SP, #+12]
   \   0000011A   0x1600             ASRS     R0,R0,#+24
   \   0000011C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    617              regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
   \   00000120   0x9803             LDR      R0,[SP, #+12]
   \   00000122   0x1400             ASRS     R0,R0,#+16
   \   00000124   0xF88D 0x0001      STRB     R0,[SP, #+1]
    618              regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
   \   00000128   0x9803             LDR      R0,[SP, #+12]
   \   0000012A   0x1200             ASRS     R0,R0,#+8
   \   0000012C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    619              regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
   \   00000130   0x9803             LDR      R0,[SP, #+12]
   \   00000132   0xF88D 0x0003      STRB     R0,[SP, #+3]
    620              return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
   \   00000136   0xAA00             ADD      R2,SP,#+0
   \   00000138   0x2104             MOVS     R1,#+4
   \   0000013A   0xF44F 0x7076      MOV      R0,#+984
   \   0000013E   0x.... 0x....      BL       mpu_write_mem
   \                     ??dmp_set_gyro_bias_4:
   \   00000142   0xB004             ADD      SP,SP,#+16
   \   00000144   0xBD10             POP      {R4,PC}          ;; return
    621          }
    622          
    623          /**
    624           *  @brief      Push accel biases to the DMP.
    625           *  These biases will be removed from the DMP 6-axis quaternion.
    626           *  @param[in]  bias    Accel biases in q16.
    627           *  @return     0 if successful.
    628           */

   \                                 In section .text, align 2, keep-with-next
    629          int dmp_set_accel_bias(long *bias)
    630          {
   \                     dmp_set_accel_bias:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0006             MOVS     R6,R0
    631              long accel_bias_body[3];
    632              unsigned char regs[12];
    633              long long accel_sf;
    634              unsigned short accel_sens;
    635          
    636              mpu_get_accel_sens(&accel_sens);
   \   00000006   0xA806             ADD      R0,SP,#+24
   \   00000008   0x.... 0x....      BL       mpu_get_accel_sens
    637              accel_sf = (long long)accel_sens << 15;
   \   0000000C   0xF8BD 0x0018      LDRH     R0,[SP, #+24]
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x03C9             LSLS     R1,R1,#+15
   \   00000014   0xEA41 0x4150      ORR      R1,R1,R0, LSR #+17
   \   00000018   0x03C0             LSLS     R0,R0,#+15
   \   0000001A   0x0004             MOVS     R4,R0
   \   0000001C   0x000D             MOVS     R5,R1
    638              //__no_operation();
    639          
    640              accel_bias_body[0] = bias[dmp.orient & 3];
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000022   0x7A00             LDRB     R0,[R0, #+8]
   \   00000024   0xF010 0x0003      ANDS     R0,R0,#0x3
   \   00000028   0xF856 0x0020      LDR      R0,[R6, R0, LSL #+2]
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    641              if (dmp.orient & 4)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000032   0x7A00             LDRB     R0,[R0, #+8]
   \   00000034   0x0740             LSLS     R0,R0,#+29
   \   00000036   0xD504             BPL.N    ??dmp_set_accel_bias_0
    642                  accel_bias_body[0] *= -1;
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0xF05F 0x31FF      MOVS     R1,#-1
   \   0000003E   0x4348             MULS     R0,R1,R0
   \   00000040   0x9000             STR      R0,[SP, #+0]
    643              accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
   \                     ??dmp_set_accel_bias_0:
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000046   0x8900             LDRH     R0,[R0, #+8]
   \   00000048   0xF3C0 0x00C1      UBFX     R0,R0,#+3,#+2
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xF856 0x0020      LDR      R0,[R6, R0, LSL #+2]
   \   00000052   0x9001             STR      R0,[SP, #+4]
    644              if (dmp.orient & 0x20)
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000058   0x7A00             LDRB     R0,[R0, #+8]
   \   0000005A   0x0680             LSLS     R0,R0,#+26
   \   0000005C   0xD504             BPL.N    ??dmp_set_accel_bias_1
    645                  accel_bias_body[1] *= -1;
   \   0000005E   0x9801             LDR      R0,[SP, #+4]
   \   00000060   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000064   0x4348             MULS     R0,R1,R0
   \   00000066   0x9001             STR      R0,[SP, #+4]
    646              accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
   \                     ??dmp_set_accel_bias_1:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000006C   0x8900             LDRH     R0,[R0, #+8]
   \   0000006E   0xF3C0 0x1081      UBFX     R0,R0,#+6,#+2
   \   00000072   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000074   0xF856 0x0020      LDR      R0,[R6, R0, LSL #+2]
   \   00000078   0x9002             STR      R0,[SP, #+8]
    647              if (dmp.orient & 0x100)
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000007E   0x8900             LDRH     R0,[R0, #+8]
   \   00000080   0x05C0             LSLS     R0,R0,#+23
   \   00000082   0xD504             BPL.N    ??dmp_set_accel_bias_2
    648                  accel_bias_body[2] *= -1;
   \   00000084   0x9802             LDR      R0,[SP, #+8]
   \   00000086   0xF05F 0x31FF      MOVS     R1,#-1
   \   0000008A   0x4348             MULS     R0,R1,R0
   \   0000008C   0x9002             STR      R0,[SP, #+8]
    649          
    650          #ifdef EMPL_NO_64BIT
    651              accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
    652              accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
    653              accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
    654          #else
    655              accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
   \                     ??dmp_set_accel_bias_2:
   \   0000008E   0x9A00             LDR      R2,[SP, #+0]
   \   00000090   0x17D3             ASRS     R3,R2,#+31
   \   00000092   0xFBA4 0x0102      UMULL    R0,R1,R4,R2
   \   00000096   0xFB04 0x1103      MLA      R1,R4,R3,R1
   \   0000009A   0xFB05 0x1102      MLA      R1,R5,R2,R1
   \   0000009E   0x0F80             LSRS     R0,R0,#+30
   \   000000A0   0xEA40 0x0081      ORR      R0,R0,R1, LSL #+2
   \   000000A4   0x1789             ASRS     R1,R1,#+30
   \   000000A6   0x9000             STR      R0,[SP, #+0]
    656              accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
   \   000000A8   0x9A01             LDR      R2,[SP, #+4]
   \   000000AA   0x17D3             ASRS     R3,R2,#+31
   \   000000AC   0xFBA4 0x0102      UMULL    R0,R1,R4,R2
   \   000000B0   0xFB04 0x1103      MLA      R1,R4,R3,R1
   \   000000B4   0xFB05 0x1102      MLA      R1,R5,R2,R1
   \   000000B8   0x0F80             LSRS     R0,R0,#+30
   \   000000BA   0xEA40 0x0081      ORR      R0,R0,R1, LSL #+2
   \   000000BE   0x1789             ASRS     R1,R1,#+30
   \   000000C0   0x9001             STR      R0,[SP, #+4]
    657              accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
   \   000000C2   0x9A02             LDR      R2,[SP, #+8]
   \   000000C4   0x17D3             ASRS     R3,R2,#+31
   \   000000C6   0xFBA4 0x0102      UMULL    R0,R1,R4,R2
   \   000000CA   0xFB04 0x1103      MLA      R1,R4,R3,R1
   \   000000CE   0xFB05 0x1102      MLA      R1,R5,R2,R1
   \   000000D2   0x0F80             LSRS     R0,R0,#+30
   \   000000D4   0xEA40 0x0081      ORR      R0,R0,R1, LSL #+2
   \   000000D8   0x1789             ASRS     R1,R1,#+30
   \   000000DA   0x9002             STR      R0,[SP, #+8]
    658          #endif
    659          
    660              regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
   \   000000DC   0x9800             LDR      R0,[SP, #+0]
   \   000000DE   0x1600             ASRS     R0,R0,#+24
   \   000000E0   0xF88D 0x000C      STRB     R0,[SP, #+12]
    661              regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
   \   000000E4   0x9800             LDR      R0,[SP, #+0]
   \   000000E6   0x1400             ASRS     R0,R0,#+16
   \   000000E8   0xF88D 0x000D      STRB     R0,[SP, #+13]
    662              regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
   \   000000EC   0x9800             LDR      R0,[SP, #+0]
   \   000000EE   0x1200             ASRS     R0,R0,#+8
   \   000000F0   0xF88D 0x000E      STRB     R0,[SP, #+14]
    663              regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
   \   000000F4   0x9800             LDR      R0,[SP, #+0]
   \   000000F6   0xF88D 0x000F      STRB     R0,[SP, #+15]
    664              regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
   \   000000FA   0x9801             LDR      R0,[SP, #+4]
   \   000000FC   0x1600             ASRS     R0,R0,#+24
   \   000000FE   0xF88D 0x0010      STRB     R0,[SP, #+16]
    665              regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
   \   00000102   0x9801             LDR      R0,[SP, #+4]
   \   00000104   0x1400             ASRS     R0,R0,#+16
   \   00000106   0xF88D 0x0011      STRB     R0,[SP, #+17]
    666              regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
   \   0000010A   0x9801             LDR      R0,[SP, #+4]
   \   0000010C   0x1200             ASRS     R0,R0,#+8
   \   0000010E   0xF88D 0x0012      STRB     R0,[SP, #+18]
    667              regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
   \   00000112   0x9801             LDR      R0,[SP, #+4]
   \   00000114   0xF88D 0x0013      STRB     R0,[SP, #+19]
    668              regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
   \   00000118   0x9802             LDR      R0,[SP, #+8]
   \   0000011A   0x1600             ASRS     R0,R0,#+24
   \   0000011C   0xF88D 0x0014      STRB     R0,[SP, #+20]
    669              regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
   \   00000120   0x9802             LDR      R0,[SP, #+8]
   \   00000122   0x1400             ASRS     R0,R0,#+16
   \   00000124   0xF88D 0x0015      STRB     R0,[SP, #+21]
    670              regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
   \   00000128   0x9802             LDR      R0,[SP, #+8]
   \   0000012A   0x1200             ASRS     R0,R0,#+8
   \   0000012C   0xF88D 0x0016      STRB     R0,[SP, #+22]
    671              regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
   \   00000130   0x9802             LDR      R0,[SP, #+8]
   \   00000132   0xF88D 0x0017      STRB     R0,[SP, #+23]
    672              return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
   \   00000136   0xAA03             ADD      R2,SP,#+12
   \   00000138   0x210C             MOVS     R1,#+12
   \   0000013A   0xF44F 0x7025      MOV      R0,#+660
   \   0000013E   0x.... 0x....      BL       mpu_write_mem
   \   00000142   0xB008             ADD      SP,SP,#+32
   \   00000144   0xBD70             POP      {R4-R6,PC}       ;; return
    673          }
    674          
    675          /**
    676           *  @brief      Set DMP output rate.
    677           *  Only used when DMP is on.
    678           *  @param[in]  rate    Desired fifo rate (Hz).
    679           *  @return     0 if successful.
    680           */

   \                                 In section .text, align 2, keep-with-next
    681          int dmp_set_fifo_rate(unsigned short rate)
    682          {
   \                     dmp_set_fifo_rate:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    683              const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
    684                  0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
   \   00000006   0xA802             ADD      R0,SP,#+8
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable14_2
   \   0000000C   0xC92C             LDM      R1!,{R2,R3,R5}
   \   0000000E   0xC02C             STM      R0!,{R2,R3,R5}
   \   00000010   0x390C             SUBS     R1,R1,#+12
   \   00000012   0x380C             SUBS     R0,R0,#+12
    685              unsigned short div;
    686              unsigned char tmp[8];
    687          
    688              if (rate > DMP_SAMPLE_RATE)
   \   00000014   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000016   0x2CC9             CMP      R4,#+201
   \   00000018   0xD302             BCC.N    ??dmp_set_fifo_rate_0
    689                  return -1;
   \   0000001A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001E   0xE026             B.N      ??dmp_set_fifo_rate_1
    690              div = DMP_SAMPLE_RATE / rate - 1;
   \                     ??dmp_set_fifo_rate_0:
   \   00000020   0x20C8             MOVS     R0,#+200
   \   00000022   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000024   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0x0005             MOVS     R5,R0
    691              tmp[0] = (unsigned char)((div >> 8) & 0xFF);
   \   0000002C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002E   0x0A28             LSRS     R0,R5,#+8
   \   00000030   0xF88D 0x0000      STRB     R0,[SP, #+0]
    692              tmp[1] = (unsigned char)(div & 0xFF);
   \   00000034   0x0028             MOVS     R0,R5
   \   00000036   0xF88D 0x0001      STRB     R0,[SP, #+1]
    693              if (mpu_write_mem(D_0_22, 2, tmp))
   \   0000003A   0xAA00             ADD      R2,SP,#+0
   \   0000003C   0x2102             MOVS     R1,#+2
   \   0000003E   0xF240 0x2016      MOVW     R0,#+534
   \   00000042   0x.... 0x....      BL       mpu_write_mem
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD002             BEQ.N    ??dmp_set_fifo_rate_2
    694                  return -1;
   \   0000004A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000004E   0xE00E             B.N      ??dmp_set_fifo_rate_1
    695              if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
   \                     ??dmp_set_fifo_rate_2:
   \   00000050   0xAA02             ADD      R2,SP,#+8
   \   00000052   0x210C             MOVS     R1,#+12
   \   00000054   0xF640 0x20C1      MOVW     R0,#+2753
   \   00000058   0x.... 0x....      BL       mpu_write_mem
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD002             BEQ.N    ??dmp_set_fifo_rate_3
    696                  return -1;
   \   00000060   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000064   0xE003             B.N      ??dmp_set_fifo_rate_1
    697          
    698              dmp.fifo_rate = rate;
   \                     ??dmp_set_fifo_rate_3:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000006A   0x8184             STRH     R4,[R0, #+12]
    699              return 0;
   \   0000006C   0x2000             MOVS     R0,#+0
   \                     ??dmp_set_fifo_rate_1:
   \   0000006E   0xB005             ADD      SP,SP,#+20
   \   00000070   0xBD30             POP      {R4,R5,PC}       ;; return
    700          }
    701          
    702          /**
    703           *  @brief      Get DMP output rate.
    704           *  @param[out] rate    Current fifo rate (Hz).
    705           *  @return     0 if successful.
    706           */

   \                                 In section .text, align 2, keep-with-next
    707          int dmp_get_fifo_rate(unsigned short *rate)
    708          {
   \                     dmp_get_fifo_rate:
   \   00000000   0x0001             MOVS     R1,R0
    709              rate[0] = dmp.fifo_rate;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000006   0x8980             LDRH     R0,[R0, #+12]
   \   00000008   0x8008             STRH     R0,[R1, #+0]
    710              return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR               ;; return
    711          }
    712          
    713          /**
    714           *  @brief      Set tap threshold for a specific axis.
    715           *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
    716           *  @param[in]  thresh  Tap threshold, in mg/ms.
    717           *  @return     0 if successful.
    718           */

   \                                 In section .text, align 2, keep-with-next
    719          int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
    720          {
   \                     dmp_set_tap_thresh:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    721              unsigned char tmp[4], accel_fsr;
    722              float scaled_thresh;
    723              unsigned short dmp_thresh, dmp_thresh_2;
    724              if (!(axis & TAP_XYZ) || thresh > 1600)
   \   00000008   0x2007             MOVS     R0,#+7
   \   0000000A   0x4204             TST      R4,R0
   \   0000000C   0xD004             BEQ.N    ??dmp_set_tap_thresh_0
   \   0000000E   0xF240 0x6041      MOVW     R0,#+1601
   \   00000012   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD302             BCC.N    ??dmp_set_tap_thresh_1
    725                  return -1;
   \                     ??dmp_set_tap_thresh_0:
   \   00000018   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000001C   0xE0B9             B.N      ??dmp_set_tap_thresh_2
    726          
    727              scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
   \                     ??dmp_set_tap_thresh_1:
   \   0000001E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000020   0x0028             MOVS     R0,R5
   \   00000022   0x.... 0x....      BL       __aeabi_ui2f
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable14_3  ;; 0x43480000
   \   0000002A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002E   0x0006             MOVS     R6,R0
    728          
    729              mpu_get_accel_fsr(&accel_fsr);
   \   00000030   0xA801             ADD      R0,SP,#+4
   \   00000032   0x.... 0x....      BL       mpu_get_accel_fsr
    730              switch (accel_fsr) {
   \   00000036   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000003A   0x2802             CMP      R0,#+2
   \   0000003C   0xD006             BEQ.N    ??dmp_set_tap_thresh_3
   \   0000003E   0x2804             CMP      R0,#+4
   \   00000040   0xD015             BEQ.N    ??dmp_set_tap_thresh_4
   \   00000042   0x2808             CMP      R0,#+8
   \   00000044   0xD024             BEQ.N    ??dmp_set_tap_thresh_5
   \   00000046   0x2810             CMP      R0,#+16
   \   00000048   0xD033             BEQ.N    ??dmp_set_tap_thresh_6
   \   0000004A   0xE043             B.N      ??dmp_set_tap_thresh_7
    731              case 2:
    732                  dmp_thresh = (unsigned short)(scaled_thresh * 16384);
   \                     ??dmp_set_tap_thresh_3:
   \   0000004C   0xF05F 0x408D      MOVS     R0,#+1182793728
   \   00000050   0x0031             MOVS     R1,R6
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x.... 0x....      BL       __aeabi_f2iz
   \   0000005A   0x0007             MOVS     R7,R0
    733                  /* dmp_thresh * 0.75 */
    734                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable14_4  ;; 0x46400000
   \   00000060   0x0031             MOVS     R1,R6
   \   00000062   0x.... 0x....      BL       __aeabi_fmul
   \   00000066   0x.... 0x....      BL       __aeabi_f2iz
   \   0000006A   0x4680             MOV      R8,R0
    735                  break;
   \   0000006C   0xE035             B.N      ??dmp_set_tap_thresh_8
    736              case 4:
    737                  dmp_thresh = (unsigned short)(scaled_thresh * 8192);
   \                     ??dmp_set_tap_thresh_4:
   \   0000006E   0xF05F 0x408C      MOVS     R0,#+1174405120
   \   00000072   0x0031             MOVS     R1,R6
   \   00000074   0x.... 0x....      BL       __aeabi_fmul
   \   00000078   0x.... 0x....      BL       __aeabi_f2iz
   \   0000007C   0x0007             MOVS     R7,R0
    738                  /* dmp_thresh * 0.75 */
    739                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable14_5  ;; 0x45c00000
   \   00000082   0x0031             MOVS     R1,R6
   \   00000084   0x.... 0x....      BL       __aeabi_fmul
   \   00000088   0x.... 0x....      BL       __aeabi_f2iz
   \   0000008C   0x4680             MOV      R8,R0
    740                  break;
   \   0000008E   0xE024             B.N      ??dmp_set_tap_thresh_8
    741              case 8:
    742                  dmp_thresh = (unsigned short)(scaled_thresh * 4096);
   \                     ??dmp_set_tap_thresh_5:
   \   00000090   0xF05F 0x408B      MOVS     R0,#+1166016512
   \   00000094   0x0031             MOVS     R1,R6
   \   00000096   0x.... 0x....      BL       __aeabi_fmul
   \   0000009A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000009E   0x0007             MOVS     R7,R0
    743                  /* dmp_thresh * 0.75 */
    744                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable14_6  ;; 0x45400000
   \   000000A4   0x0031             MOVS     R1,R6
   \   000000A6   0x.... 0x....      BL       __aeabi_fmul
   \   000000AA   0x.... 0x....      BL       __aeabi_f2iz
   \   000000AE   0x4680             MOV      R8,R0
    745                  break;
   \   000000B0   0xE013             B.N      ??dmp_set_tap_thresh_8
    746              case 16:
    747                  dmp_thresh = (unsigned short)(scaled_thresh * 2048);
   \                     ??dmp_set_tap_thresh_6:
   \   000000B2   0xF05F 0x408A      MOVS     R0,#+1157627904
   \   000000B6   0x0031             MOVS     R1,R6
   \   000000B8   0x.... 0x....      BL       __aeabi_fmul
   \   000000BC   0x.... 0x....      BL       __aeabi_f2iz
   \   000000C0   0x0007             MOVS     R7,R0
    748                  /* dmp_thresh * 0.75 */
    749                  dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable14_7  ;; 0x44c00000
   \   000000C6   0x0031             MOVS     R1,R6
   \   000000C8   0x.... 0x....      BL       __aeabi_fmul
   \   000000CC   0x.... 0x....      BL       __aeabi_f2iz
   \   000000D0   0x4680             MOV      R8,R0
    750                  break;
   \   000000D2   0xE002             B.N      ??dmp_set_tap_thresh_8
    751              default:
    752                  return -1;
   \                     ??dmp_set_tap_thresh_7:
   \   000000D4   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000D8   0xE05B             B.N      ??dmp_set_tap_thresh_2
    753              }
    754              tmp[0] = (unsigned char)(dmp_thresh >> 8);
   \                     ??dmp_set_tap_thresh_8:
   \   000000DA   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000DC   0x0A38             LSRS     R0,R7,#+8
   \   000000DE   0xF88D 0x0000      STRB     R0,[SP, #+0]
    755              tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
   \   000000E2   0x0038             MOVS     R0,R7
   \   000000E4   0xF88D 0x0001      STRB     R0,[SP, #+1]
    756              tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
   \   000000E8   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   000000EC   0xEA5F 0x2018      LSRS     R0,R8,#+8
   \   000000F0   0xF88D 0x0002      STRB     R0,[SP, #+2]
    757              tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
   \   000000F4   0x4640             MOV      R0,R8
   \   000000F6   0xF88D 0x0003      STRB     R0,[SP, #+3]
    758          
    759              if (axis & TAP_X) {
   \   000000FA   0x07E0             LSLS     R0,R4,#+31
   \   000000FC   0xD516             BPL.N    ??dmp_set_tap_thresh_9
    760                  if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
   \   000000FE   0xAA00             ADD      R2,SP,#+0
   \   00000100   0x2102             MOVS     R1,#+2
   \   00000102   0xF44F 0x70EA      MOV      R0,#+468
   \   00000106   0x.... 0x....      BL       mpu_write_mem
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD002             BEQ.N    ??dmp_set_tap_thresh_10
    761                      return -1;
   \   0000010E   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000112   0xE03E             B.N      ??dmp_set_tap_thresh_2
    762                  if (mpu_write_mem(D_1_36, 2, tmp+2))
   \                     ??dmp_set_tap_thresh_10:
   \   00000114   0xF10D 0x0202      ADD      R2,SP,#+2
   \   00000118   0x2102             MOVS     R1,#+2
   \   0000011A   0xF44F 0x7092      MOV      R0,#+292
   \   0000011E   0x.... 0x....      BL       mpu_write_mem
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xD002             BEQ.N    ??dmp_set_tap_thresh_9
    763                      return -1;
   \   00000126   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000012A   0xE032             B.N      ??dmp_set_tap_thresh_2
    764              }
    765              if (axis & TAP_Y) {
   \                     ??dmp_set_tap_thresh_9:
   \   0000012C   0x07A0             LSLS     R0,R4,#+30
   \   0000012E   0xD516             BPL.N    ??dmp_set_tap_thresh_11
    766                  if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
   \   00000130   0xAA00             ADD      R2,SP,#+0
   \   00000132   0x2102             MOVS     R1,#+2
   \   00000134   0xF44F 0x70EC      MOV      R0,#+472
   \   00000138   0x.... 0x....      BL       mpu_write_mem
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD002             BEQ.N    ??dmp_set_tap_thresh_12
    767                      return -1;
   \   00000140   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000144   0xE025             B.N      ??dmp_set_tap_thresh_2
    768                  if (mpu_write_mem(D_1_40, 2, tmp+2))
   \                     ??dmp_set_tap_thresh_12:
   \   00000146   0xF10D 0x0202      ADD      R2,SP,#+2
   \   0000014A   0x2102             MOVS     R1,#+2
   \   0000014C   0xF44F 0x7094      MOV      R0,#+296
   \   00000150   0x.... 0x....      BL       mpu_write_mem
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD002             BEQ.N    ??dmp_set_tap_thresh_11
    769                      return -1;
   \   00000158   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000015C   0xE019             B.N      ??dmp_set_tap_thresh_2
    770              }
    771              if (axis & TAP_Z) {
   \                     ??dmp_set_tap_thresh_11:
   \   0000015E   0x0760             LSLS     R0,R4,#+29
   \   00000160   0xD516             BPL.N    ??dmp_set_tap_thresh_13
    772                  if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
   \   00000162   0xAA00             ADD      R2,SP,#+0
   \   00000164   0x2102             MOVS     R1,#+2
   \   00000166   0xF44F 0x70EE      MOV      R0,#+476
   \   0000016A   0x.... 0x....      BL       mpu_write_mem
   \   0000016E   0x2800             CMP      R0,#+0
   \   00000170   0xD002             BEQ.N    ??dmp_set_tap_thresh_14
    773                      return -1;
   \   00000172   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000176   0xE00C             B.N      ??dmp_set_tap_thresh_2
    774                  if (mpu_write_mem(D_1_44, 2, tmp+2))
   \                     ??dmp_set_tap_thresh_14:
   \   00000178   0xF10D 0x0202      ADD      R2,SP,#+2
   \   0000017C   0x2102             MOVS     R1,#+2
   \   0000017E   0xF44F 0x7096      MOV      R0,#+300
   \   00000182   0x.... 0x....      BL       mpu_write_mem
   \   00000186   0x2800             CMP      R0,#+0
   \   00000188   0xD002             BEQ.N    ??dmp_set_tap_thresh_13
    775                      return -1;
   \   0000018A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000018E   0xE000             B.N      ??dmp_set_tap_thresh_2
    776              }
    777              return 0;
   \                     ??dmp_set_tap_thresh_13:
   \   00000190   0x2000             MOVS     R0,#+0
   \                     ??dmp_set_tap_thresh_2:
   \   00000192   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    778          }
    779          
    780          /**
    781           *  @brief      Set which axes will register a tap.
    782           *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
    783           *  @return     0 if successful.
    784           */

   \                                 In section .text, align 2, keep-with-next
    785          int dmp_set_tap_axes(unsigned char axis)
    786          {
   \                     dmp_set_tap_axes:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    787              unsigned char tmp = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    788          
    789              if (axis & TAP_X)
   \   0000000C   0x07E0             LSLS     R0,R4,#+31
   \   0000000E   0xD505             BPL.N    ??dmp_set_tap_axes_0
    790                  tmp |= 0x30;
   \   00000010   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000014   0xF050 0x0030      ORRS     R0,R0,#0x30
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    791              if (axis & TAP_Y)
   \                     ??dmp_set_tap_axes_0:
   \   0000001C   0x07A0             LSLS     R0,R4,#+30
   \   0000001E   0xD505             BPL.N    ??dmp_set_tap_axes_1
    792                  tmp |= 0x0C;
   \   00000020   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000024   0xF050 0x000C      ORRS     R0,R0,#0xC
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    793              if (axis & TAP_Z)
   \                     ??dmp_set_tap_axes_1:
   \   0000002C   0x0760             LSLS     R0,R4,#+29
   \   0000002E   0xD505             BPL.N    ??dmp_set_tap_axes_2
    794                  tmp |= 0x03;
   \   00000030   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000034   0xF050 0x0003      ORRS     R0,R0,#0x3
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    795              return mpu_write_mem(D_1_72, 1, &tmp);
   \                     ??dmp_set_tap_axes_2:
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0xF44F 0x70A4      MOV      R0,#+328
   \   00000044   0x.... 0x....      BL       mpu_write_mem
   \   00000048   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    796          }
    797          
    798          /**
    799           *  @brief      Set minimum number of taps needed for an interrupt.
    800           *  @param[in]  min_taps    Minimum consecutive taps (1-4).
    801           *  @return     0 if successful.
    802           */

   \                                 In section .text, align 2, keep-with-next
    803          int dmp_set_tap_count(unsigned char min_taps)
    804          {
   \                     dmp_set_tap_count:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    805              unsigned char tmp;
    806          
    807              if (min_taps < 1)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C01             CMP      R4,#+1
   \   0000000A   0xD202             BCS.N    ??dmp_set_tap_count_0
    808                  min_taps = 1;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xE004             B.N      ??dmp_set_tap_count_1
    809              else if (min_taps > 4)
   \                     ??dmp_set_tap_count_0:
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x2C05             CMP      R4,#+5
   \   00000016   0xD301             BCC.N    ??dmp_set_tap_count_1
    810                  min_taps = 4;
   \   00000018   0x2004             MOVS     R0,#+4
   \   0000001A   0x0004             MOVS     R4,R0
    811          
    812              tmp = min_taps - 1;
   \                     ??dmp_set_tap_count_1:
   \   0000001C   0x1E60             SUBS     R0,R4,#+1
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    813              return mpu_write_mem(D_1_79, 1, &tmp);
   \   00000022   0xAA00             ADD      R2,SP,#+0
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0xF240 0x104F      MOVW     R0,#+335
   \   0000002A   0x.... 0x....      BL       mpu_write_mem
   \   0000002E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    814          }
    815          
    816          /**
    817           *  @brief      Set length between valid taps.
    818           *  @param[in]  time    Milliseconds between taps.
    819           *  @return     0 if successful.
    820           */

   \                                 In section .text, align 2, keep-with-next
    821          int dmp_set_tap_time(unsigned short time)
    822          {
   \                     dmp_set_tap_time:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    823              unsigned short dmp_time;
    824              unsigned char tmp[2];
    825          
    826              dmp_time = time / (1000 / DMP_SAMPLE_RATE);
   \   00000004   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000000C   0x0005             MOVS     R5,R0
    827              tmp[0] = (unsigned char)(dmp_time >> 8);
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0x0A28             LSRS     R0,R5,#+8
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    828              tmp[1] = (unsigned char)(dmp_time & 0xFF);
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    829              return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0xF44F 0x70EF      MOV      R0,#+478
   \   00000024   0x.... 0x....      BL       mpu_write_mem
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    830          }
    831          
    832          /**
    833           *  @brief      Set max time between taps to register as a multi-tap.
    834           *  @param[in]  time    Max milliseconds between taps.
    835           *  @return     0 if successful.
    836           */

   \                                 In section .text, align 2, keep-with-next
    837          int dmp_set_tap_time_multi(unsigned short time)
    838          {
   \                     dmp_set_tap_time_multi:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    839              unsigned short dmp_time;
    840              unsigned char tmp[2];
    841          
    842              dmp_time = time / (1000 / DMP_SAMPLE_RATE);
   \   00000004   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   0000000C   0x0005             MOVS     R5,R0
    843              tmp[0] = (unsigned char)(dmp_time >> 8);
   \   0000000E   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000010   0x0A28             LSRS     R0,R5,#+8
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    844              tmp[1] = (unsigned char)(dmp_time & 0xFF);
   \   00000016   0x0028             MOVS     R0,R5
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    845              return mpu_write_mem(D_1_218, 2, tmp);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0xF44F 0x70ED      MOV      R0,#+474
   \   00000024   0x.... 0x....      BL       mpu_write_mem
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    846          }
    847          
    848          /**
    849           *  @brief      Set shake rejection threshold.
    850           *  If the DMP detects a gyro sample larger than @e thresh, taps are rejected.
    851           *  @param[in]  sf      Gyro scale factor.
    852           *  @param[in]  thresh  Gyro threshold in dps.
    853           *  @return     0 if successful.
    854           */

   \                                 In section .text, align 2, keep-with-next
    855          int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
    856          {
   \                     dmp_set_shake_reject_thresh:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    857              unsigned char tmp[4];
    858              long thresh_scaled = sf / 1000 * thresh;
   \   00000008   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000C   0xFB94 0xF0F0      SDIV     R0,R4,R0
   \   00000010   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000012   0xFB05 0xF600      MUL      R6,R5,R0
    859              tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
   \   00000016   0x1630             ASRS     R0,R6,#+24
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    860              tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
   \   0000001C   0x1430             ASRS     R0,R6,#+16
   \   0000001E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    861              tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
   \   00000022   0x1230             ASRS     R0,R6,#+8
   \   00000024   0xF88D 0x0002      STRB     R0,[SP, #+2]
    862              tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    863              return mpu_write_mem(D_1_92, 4, tmp);
   \   0000002E   0xAA00             ADD      R2,SP,#+0
   \   00000030   0x2104             MOVS     R1,#+4
   \   00000032   0xF44F 0x70AE      MOV      R0,#+348
   \   00000036   0x.... 0x....      BL       mpu_write_mem
   \   0000003A   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    864          }
    865          
    866          /**
    867           *  @brief      Set shake rejection time.
    868           *  Sets the length of time that the gyro must be outside of the threshold set
    869           *  by @e gyro_set_shake_reject_thresh before taps are rejected. A mandatory
    870           *  60 ms is added to this parameter.
    871           *  @param[in]  time    Time in milliseconds.
    872           *  @return     0 if successful.
    873           */

   \                                 In section .text, align 2, keep-with-next
    874          int dmp_set_shake_reject_time(unsigned short time)
    875          {
   \                     dmp_set_shake_reject_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    876              unsigned char tmp[2];
    877          
    878              time /= (1000 / DMP_SAMPLE_RATE);
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0xFB94 0xF4F0      SDIV     R4,R4,R0
    879              tmp[0] = time >> 8;
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0A20             LSRS     R0,R4,#+8
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    880              tmp[1] = time & 0xFF;
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    881              return mpu_write_mem(D_1_90,2,tmp);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0xF44F 0x70AD      MOV      R0,#+346
   \   00000024   0x.... 0x....      BL       mpu_write_mem
   \   00000028   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    882          }
    883          
    884          /**
    885           *  @brief      Set shake rejection timeout.
    886           *  Sets the length of time after a shake rejection that the gyro must stay
    887           *  inside of the threshold before taps can be detected again. A mandatory
    888           *  60 ms is added to this parameter.
    889           *  @param[in]  time    Time in milliseconds.
    890           *  @return     0 if successful.
    891           */

   \                                 In section .text, align 2, keep-with-next
    892          int dmp_set_shake_reject_timeout(unsigned short time)
    893          {
   \                     dmp_set_shake_reject_timeout:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    894              unsigned char tmp[2];
    895          
    896              time /= (1000 / DMP_SAMPLE_RATE);
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0xFB94 0xF4F0      SDIV     R4,R4,R0
    897              tmp[0] = time >> 8;
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x0A20             LSRS     R0,R4,#+8
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
    898              tmp[1] = time & 0xFF;
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    899              return mpu_write_mem(D_1_88,2,tmp);
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0xF44F 0x70AC      MOV      R0,#+344
   \   00000024   0x.... 0x....      BL       mpu_write_mem
   \   00000028   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    900          }
    901          
    902          /**
    903           *  @brief      Get current step count.
    904           *  @param[out] count   Number of steps detected.
    905           *  @return     0 if successful.
    906           */

   \                                 In section .text, align 2, keep-with-next
    907          int dmp_get_pedometer_step_count(unsigned long *count)
    908          {
   \                     dmp_get_pedometer_step_count:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    909              unsigned char tmp[4];
    910              if (!count)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD102             BNE.N    ??dmp_get_pedometer_step_count_0
    911                  return -1;
   \   0000000A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000E   0xE01A             B.N      ??dmp_get_pedometer_step_count_1
    912          
    913              if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
   \                     ??dmp_get_pedometer_step_count_0:
   \   00000010   0xAA00             ADD      R2,SP,#+0
   \   00000012   0x2104             MOVS     R1,#+4
   \   00000014   0xF44F 0x7058      MOV      R0,#+864
   \   00000018   0x.... 0x....      BL       mpu_read_mem
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD002             BEQ.N    ??dmp_get_pedometer_step_count_2
    914                  return -1;
   \   00000020   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000024   0xE00F             B.N      ??dmp_get_pedometer_step_count_1
    915          
    916              count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
    917                  ((unsigned long)tmp[2] << 8) | tmp[3];
   \                     ??dmp_get_pedometer_step_count_2:
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000002E   0x0409             LSLS     R1,R1,#+16
   \   00000030   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000034   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000038   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000003C   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000040   0x4308             ORRS     R0,R1,R0
   \   00000042   0x6020             STR      R0,[R4, #+0]
    918              return 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \                     ??dmp_get_pedometer_step_count_1:
   \   00000046   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    919          }
    920          
    921          /**
    922           *  @brief      Overwrite current step count.
    923           *  WARNING: This function writes to DMP memory and could potentially encounter
    924           *  a race condition if called while the pedometer is enabled.
    925           *  @param[in]  count   New step count.
    926           *  @return     0 if successful.
    927           */

   \                                 In section .text, align 2, keep-with-next
    928          int dmp_set_pedometer_step_count(unsigned long count)
    929          {
   \                     dmp_set_pedometer_step_count:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    930              unsigned char tmp[4];
    931          
    932              tmp[0] = (unsigned char)((count >> 24) & 0xFF);
   \   00000006   0x0E20             LSRS     R0,R4,#+24
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    933              tmp[1] = (unsigned char)((count >> 16) & 0xFF);
   \   0000000C   0x0C20             LSRS     R0,R4,#+16
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    934              tmp[2] = (unsigned char)((count >> 8) & 0xFF);
   \   00000012   0x0A20             LSRS     R0,R4,#+8
   \   00000014   0xF88D 0x0002      STRB     R0,[SP, #+2]
    935              tmp[3] = (unsigned char)(count & 0xFF);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    936              return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x2104             MOVS     R1,#+4
   \   00000022   0xF44F 0x7058      MOV      R0,#+864
   \   00000026   0x.... 0x....      BL       mpu_write_mem
   \   0000002A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    937          }
    938          
    939          /**
    940           *  @brief      Get duration of walking time.
    941           *  @param[in]  time    Walk time in milliseconds.
    942           *  @return     0 if successful.
    943           */

   \                                 In section .text, align 2, keep-with-next
    944          int dmp_get_pedometer_walk_time(unsigned long *time)
    945          {
   \                     dmp_get_pedometer_walk_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    946              unsigned char tmp[4];
    947              if (!time)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD102             BNE.N    ??dmp_get_pedometer_walk_time_0
    948                  return -1;
   \   0000000A   0xF05F 0x30FF      MOVS     R0,#-1
   \   0000000E   0xE01C             B.N      ??dmp_get_pedometer_walk_time_1
    949          
    950              if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
   \                     ??dmp_get_pedometer_walk_time_0:
   \   00000010   0xAA00             ADD      R2,SP,#+0
   \   00000012   0x2104             MOVS     R1,#+4
   \   00000014   0xF44F 0x7071      MOV      R0,#+964
   \   00000018   0x.... 0x....      BL       mpu_read_mem
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD002             BEQ.N    ??dmp_get_pedometer_walk_time_2
    951                  return -1;
   \   00000020   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000024   0xE011             B.N      ??dmp_get_pedometer_walk_time_1
    952          
    953              time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
    954                  ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
   \                     ??dmp_get_pedometer_walk_time_2:
   \   00000026   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002A   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000002E   0x0409             LSLS     R1,R1,#+16
   \   00000030   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000034   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000038   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000003C   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000040   0x4308             ORRS     R0,R1,R0
   \   00000042   0x2114             MOVS     R1,#+20
   \   00000044   0x4348             MULS     R0,R1,R0
   \   00000046   0x6020             STR      R0,[R4, #+0]
    955              return 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \                     ??dmp_get_pedometer_walk_time_1:
   \   0000004A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    956          }
    957          
    958          /**
    959           *  @brief      Overwrite current walk time.
    960           *  WARNING: This function writes to DMP memory and could potentially encounter
    961           *  a race condition if called while the pedometer is enabled.
    962           *  @param[in]  time    New walk time in milliseconds.
    963           */

   \                                 In section .text, align 2, keep-with-next
    964          int dmp_set_pedometer_walk_time(unsigned long time)
    965          {
   \                     dmp_set_pedometer_walk_time:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    966              unsigned char tmp[4];
    967          
    968              time /= 20;
   \   00000006   0x2014             MOVS     R0,#+20
   \   00000008   0xFBB4 0xF4F0      UDIV     R4,R4,R0
    969          
    970              tmp[0] = (unsigned char)((time >> 24) & 0xFF);
   \   0000000C   0x0E20             LSRS     R0,R4,#+24
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    971              tmp[1] = (unsigned char)((time >> 16) & 0xFF);
   \   00000012   0x0C20             LSRS     R0,R4,#+16
   \   00000014   0xF88D 0x0001      STRB     R0,[SP, #+1]
    972              tmp[2] = (unsigned char)((time >> 8) & 0xFF);
   \   00000018   0x0A20             LSRS     R0,R4,#+8
   \   0000001A   0xF88D 0x0002      STRB     R0,[SP, #+2]
    973              tmp[3] = (unsigned char)(time & 0xFF);
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xF88D 0x0003      STRB     R0,[SP, #+3]
    974              return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
   \   00000024   0xAA00             ADD      R2,SP,#+0
   \   00000026   0x2104             MOVS     R1,#+4
   \   00000028   0xF44F 0x7071      MOV      R0,#+964
   \   0000002C   0x.... 0x....      BL       mpu_write_mem
   \   00000030   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    975          }
    976          
    977          /**
    978           *  @brief      Enable DMP features.
    979           *  The following \#define's are used in the input mask:
    980           *  \n DMP_FEATURE_TAP
    981           *  \n DMP_FEATURE_ANDROID_ORIENT
    982           *  \n DMP_FEATURE_LP_QUAT
    983           *  \n DMP_FEATURE_6X_LP_QUAT
    984           *  \n DMP_FEATURE_GYRO_CAL
    985           *  \n DMP_FEATURE_SEND_RAW_ACCEL
    986           *  \n DMP_FEATURE_SEND_RAW_GYRO
    987           *  \n NOTE: DMP_FEATURE_LP_QUAT and DMP_FEATURE_6X_LP_QUAT are mutually
    988           *  exclusive.
    989           *  \n NOTE: DMP_FEATURE_SEND_RAW_GYRO and DMP_FEATURE_SEND_CAL_GYRO are also
    990           *  mutually exclusive.
    991           *  @param[in]  mask    Mask of features to enable.
    992           *  @return     0 if successful.
    993           */

   \                                 In section .text, align 2, keep-with-next
    994          int dmp_enable_feature(unsigned short mask)
    995          {
   \                     dmp_enable_feature:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
    996              unsigned char tmp[10];
    997          
    998              /* TODO: All of these settings can probably be integrated into the default
    999               * DMP image.
   1000               */
   1001              /* Set integration scale factor. */
   1002              tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1003              tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
   \   0000000C   0x20CA             MOVS     R0,#+202
   \   0000000E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1004              tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
   \   00000012   0x20E3             MOVS     R0,#+227
   \   00000014   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1005              tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
   \   00000018   0x2009             MOVS     R0,#+9
   \   0000001A   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1006              mpu_write_mem(D_0_104, 4, tmp);
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x2104             MOVS     R1,#+4
   \   00000022   0x2068             MOVS     R0,#+104
   \   00000024   0x.... 0x....      BL       mpu_write_mem
   1007          
   1008              /* Send sensor data to the FIFO. */
   1009              tmp[0] = 0xA3;
   \   00000028   0x20A3             MOVS     R0,#+163
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1010              if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
   \   0000002E   0x0660             LSLS     R0,R4,#+25
   \   00000030   0xD509             BPL.N    ??dmp_enable_feature_0
   1011                  tmp[1] = 0xC0;
   \   00000032   0x20C0             MOVS     R0,#+192
   \   00000034   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1012                  tmp[2] = 0xC8;
   \   00000038   0x20C8             MOVS     R0,#+200
   \   0000003A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1013                  tmp[3] = 0xC2;
   \   0000003E   0x20C2             MOVS     R0,#+194
   \   00000040   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000044   0xE008             B.N      ??dmp_enable_feature_1
   1014              } else {
   1015                  tmp[1] = 0xA3;
   \                     ??dmp_enable_feature_0:
   \   00000046   0x20A3             MOVS     R0,#+163
   \   00000048   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1016                  tmp[2] = 0xA3;
   \   0000004C   0x20A3             MOVS     R0,#+163
   \   0000004E   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1017                  tmp[3] = 0xA3;
   \   00000052   0x20A3             MOVS     R0,#+163
   \   00000054   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1018              }
   1019              if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
   \                     ??dmp_enable_feature_1:
   \   00000058   0xF44F 0x70C0      MOV      R0,#+384
   \   0000005C   0x4204             TST      R4,R0
   \   0000005E   0xD009             BEQ.N    ??dmp_enable_feature_2
   1020                  tmp[4] = 0xC4;
   \   00000060   0x20C4             MOVS     R0,#+196
   \   00000062   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1021                  tmp[5] = 0xCC;
   \   00000066   0x20CC             MOVS     R0,#+204
   \   00000068   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1022                  tmp[6] = 0xC6;
   \   0000006C   0x20C6             MOVS     R0,#+198
   \   0000006E   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   00000072   0xE008             B.N      ??dmp_enable_feature_3
   1023              } else {
   1024                  tmp[4] = 0xA3;
   \                     ??dmp_enable_feature_2:
   \   00000074   0x20A3             MOVS     R0,#+163
   \   00000076   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1025                  tmp[5] = 0xA3;
   \   0000007A   0x20A3             MOVS     R0,#+163
   \   0000007C   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1026                  tmp[6] = 0xA3;
   \   00000080   0x20A3             MOVS     R0,#+163
   \   00000082   0xF88D 0x0006      STRB     R0,[SP, #+6]
   1027              }
   1028              tmp[7] = 0xA3;
   \                     ??dmp_enable_feature_3:
   \   00000086   0x20A3             MOVS     R0,#+163
   \   00000088   0xF88D 0x0007      STRB     R0,[SP, #+7]
   1029              tmp[8] = 0xA3;
   \   0000008C   0x20A3             MOVS     R0,#+163
   \   0000008E   0xF88D 0x0008      STRB     R0,[SP, #+8]
   1030              tmp[9] = 0xA3;
   \   00000092   0x20A3             MOVS     R0,#+163
   \   00000094   0xF88D 0x0009      STRB     R0,[SP, #+9]
   1031              mpu_write_mem(CFG_15,10,tmp);
   \   00000098   0xAA00             ADD      R2,SP,#+0
   \   0000009A   0x210A             MOVS     R1,#+10
   \   0000009C   0xF640 0x20A7      MOVW     R0,#+2727
   \   000000A0   0x.... 0x....      BL       mpu_write_mem
   1032          
   1033              /* Send gesture data to the FIFO. */
   1034              if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0x4204             TST      R4,R0
   \   000000A8   0xD003             BEQ.N    ??dmp_enable_feature_4
   1035                  tmp[0] = DINA20;
   \   000000AA   0x2020             MOVS     R0,#+32
   \   000000AC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000B0   0xE002             B.N      ??dmp_enable_feature_5
   1036              else
   1037                  tmp[0] = 0xD8;
   \                     ??dmp_enable_feature_4:
   \   000000B2   0x20D8             MOVS     R0,#+216
   \   000000B4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1038              mpu_write_mem(CFG_27,1,tmp);
   \                     ??dmp_enable_feature_5:
   \   000000B8   0xAA00             ADD      R2,SP,#+0
   \   000000BA   0x2101             MOVS     R1,#+1
   \   000000BC   0xF640 0x20B6      MOVW     R0,#+2742
   \   000000C0   0x.... 0x....      BL       mpu_write_mem
   1039          
   1040              if (mask & DMP_FEATURE_GYRO_CAL)
   \   000000C4   0x06A0             LSLS     R0,R4,#+26
   \   000000C6   0xD503             BPL.N    ??dmp_enable_feature_6
   1041                  dmp_enable_gyro_cal(1);
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x.... 0x....      BL       dmp_enable_gyro_cal
   \   000000CE   0xE002             B.N      ??dmp_enable_feature_7
   1042              else
   1043                  dmp_enable_gyro_cal(0);
   \                     ??dmp_enable_feature_6:
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x.... 0x....      BL       dmp_enable_gyro_cal
   1044          
   1045              if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
   \                     ??dmp_enable_feature_7:
   \   000000D6   0xF44F 0x70C0      MOV      R0,#+384
   \   000000DA   0x4204             TST      R4,R0
   \   000000DC   0xD020             BEQ.N    ??dmp_enable_feature_8
   1046                  if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
   \   000000DE   0x05E0             LSLS     R0,R4,#+23
   \   000000E0   0xD50C             BPL.N    ??dmp_enable_feature_9
   1047                      tmp[0] = 0xB2;
   \   000000E2   0x20B2             MOVS     R0,#+178
   \   000000E4   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1048                      tmp[1] = 0x8B;
   \   000000E8   0x208B             MOVS     R0,#+139
   \   000000EA   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1049                      tmp[2] = 0xB6;
   \   000000EE   0x20B6             MOVS     R0,#+182
   \   000000F0   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1050                      tmp[3] = 0x9B;
   \   000000F4   0x209B             MOVS     R0,#+155
   \   000000F6   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   000000FA   0xE00B             B.N      ??dmp_enable_feature_10
   1051                  } else {
   1052                      tmp[0] = DINAC0;
   \                     ??dmp_enable_feature_9:
   \   000000FC   0x20B0             MOVS     R0,#+176
   \   000000FE   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1053                      tmp[1] = DINA80;
   \   00000102   0x2080             MOVS     R0,#+128
   \   00000104   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1054                      tmp[2] = DINAC2;
   \   00000108   0x20B4             MOVS     R0,#+180
   \   0000010A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1055                      tmp[3] = DINA90;
   \   0000010E   0x2090             MOVS     R0,#+144
   \   00000110   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1056                  }
   1057                  mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
   \                     ??dmp_enable_feature_10:
   \   00000114   0xAA00             ADD      R2,SP,#+0
   \   00000116   0x2104             MOVS     R1,#+4
   \   00000118   0xF640 0x20A2      MOVW     R0,#+2722
   \   0000011C   0x.... 0x....      BL       mpu_write_mem
   1058              }
   1059          
   1060              if (mask & DMP_FEATURE_TAP) {
   \                     ??dmp_enable_feature_8:
   \   00000120   0x07E0             LSLS     R0,R4,#+31
   \   00000122   0xD525             BPL.N    ??dmp_enable_feature_11
   1061                  /* Enable tap. */
   1062                  tmp[0] = 0xF8;
   \   00000124   0x20F8             MOVS     R0,#+248
   \   00000126   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1063                  mpu_write_mem(CFG_20, 1, tmp);
   \   0000012A   0xAA00             ADD      R2,SP,#+0
   \   0000012C   0x2101             MOVS     R1,#+1
   \   0000012E   0xF44F 0x600B      MOV      R0,#+2224
   \   00000132   0x.... 0x....      BL       mpu_write_mem
   1064                  dmp_set_tap_thresh(TAP_XYZ, 250);
   \   00000136   0x21FA             MOVS     R1,#+250
   \   00000138   0x2007             MOVS     R0,#+7
   \   0000013A   0x.... 0x....      BL       dmp_set_tap_thresh
   1065                  dmp_set_tap_axes(TAP_XYZ);
   \   0000013E   0x2007             MOVS     R0,#+7
   \   00000140   0x.... 0x....      BL       dmp_set_tap_axes
   1066                  dmp_set_tap_count(1);
   \   00000144   0x2001             MOVS     R0,#+1
   \   00000146   0x.... 0x....      BL       dmp_set_tap_count
   1067                  dmp_set_tap_time(100);
   \   0000014A   0x2064             MOVS     R0,#+100
   \   0000014C   0x.... 0x....      BL       dmp_set_tap_time
   1068                  dmp_set_tap_time_multi(500);
   \   00000150   0xF44F 0x70FA      MOV      R0,#+500
   \   00000154   0x.... 0x....      BL       dmp_set_tap_time_multi
   1069          
   1070                  dmp_set_shake_reject_thresh(GYRO_SF, 200);
   \   00000158   0x21C8             MOVS     R1,#+200
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable14_1  ;; 0x2cae309
   \   0000015E   0x.... 0x....      BL       dmp_set_shake_reject_thresh
   1071                  dmp_set_shake_reject_time(40);
   \   00000162   0x2028             MOVS     R0,#+40
   \   00000164   0x.... 0x....      BL       dmp_set_shake_reject_time
   1072                  dmp_set_shake_reject_timeout(10);
   \   00000168   0x200A             MOVS     R0,#+10
   \   0000016A   0x.... 0x....      BL       dmp_set_shake_reject_timeout
   \   0000016E   0xE008             B.N      ??dmp_enable_feature_12
   1073              } else {
   1074                  tmp[0] = 0xD8;
   \                     ??dmp_enable_feature_11:
   \   00000170   0x20D8             MOVS     R0,#+216
   \   00000172   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1075                  mpu_write_mem(CFG_20, 1, tmp);
   \   00000176   0xAA00             ADD      R2,SP,#+0
   \   00000178   0x2101             MOVS     R1,#+1
   \   0000017A   0xF44F 0x600B      MOV      R0,#+2224
   \   0000017E   0x.... 0x....      BL       mpu_write_mem
   1076              }
   1077          
   1078              if (mask & DMP_FEATURE_ANDROID_ORIENT) {
   \                     ??dmp_enable_feature_12:
   \   00000182   0x07A0             LSLS     R0,R4,#+30
   \   00000184   0xD503             BPL.N    ??dmp_enable_feature_13
   1079                  tmp[0] = 0xD9;
   \   00000186   0x20D9             MOVS     R0,#+217
   \   00000188   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000018C   0xE002             B.N      ??dmp_enable_feature_14
   1080              } else
   1081                  tmp[0] = 0xD8;
   \                     ??dmp_enable_feature_13:
   \   0000018E   0x20D8             MOVS     R0,#+216
   \   00000190   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1082              mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
   \                     ??dmp_enable_feature_14:
   \   00000194   0xAA00             ADD      R2,SP,#+0
   \   00000196   0x2101             MOVS     R1,#+1
   \   00000198   0xF240 0x703D      MOVW     R0,#+1853
   \   0000019C   0x.... 0x....      BL       mpu_write_mem
   1083          
   1084              if (mask & DMP_FEATURE_LP_QUAT)
   \   000001A0   0x0760             LSLS     R0,R4,#+29
   \   000001A2   0xD503             BPL.N    ??dmp_enable_feature_15
   1085                  dmp_enable_lp_quat(1);
   \   000001A4   0x2001             MOVS     R0,#+1
   \   000001A6   0x.... 0x....      BL       dmp_enable_lp_quat
   \   000001AA   0xE002             B.N      ??dmp_enable_feature_16
   1086              else
   1087                  dmp_enable_lp_quat(0);
   \                     ??dmp_enable_feature_15:
   \   000001AC   0x2000             MOVS     R0,#+0
   \   000001AE   0x.... 0x....      BL       dmp_enable_lp_quat
   1088          
   1089              if (mask & DMP_FEATURE_6X_LP_QUAT)
   \                     ??dmp_enable_feature_16:
   \   000001B2   0x06E0             LSLS     R0,R4,#+27
   \   000001B4   0xD503             BPL.N    ??dmp_enable_feature_17
   1090                  dmp_enable_6x_lp_quat(1);
   \   000001B6   0x2001             MOVS     R0,#+1
   \   000001B8   0x.... 0x....      BL       dmp_enable_6x_lp_quat
   \   000001BC   0xE002             B.N      ??dmp_enable_feature_18
   1091              else
   1092                  dmp_enable_6x_lp_quat(0);
   \                     ??dmp_enable_feature_17:
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x.... 0x....      BL       dmp_enable_6x_lp_quat
   1093          
   1094              /* Pedometer is always enabled. */
   1095              dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
   \                     ??dmp_enable_feature_18:
   \   000001C4   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000001C8   0xF054 0x0108      ORRS     R1,R4,#0x8
   \   000001CC   0x8141             STRH     R1,[R0, #+10]
   1096              mpu_reset_fifo();
   \   000001CE   0x.... 0x....      BL       mpu_reset_fifo
   1097          
   1098              dmp.packet_length = 0;
   \   000001D2   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000001D6   0x2100             MOVS     R1,#+0
   \   000001D8   0x7381             STRB     R1,[R0, #+14]
   1099              if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
   \   000001DA   0x0660             LSLS     R0,R4,#+25
   \   000001DC   0xD506             BPL.N    ??dmp_enable_feature_19
   1100                  dmp.packet_length += 6;
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000001E2   0x7B80             LDRB     R0,[R0, #+14]
   \   000001E4   0x1D80             ADDS     R0,R0,#+6
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable14
   \   000001EA   0x7388             STRB     R0,[R1, #+14]
   1101              if (mask & DMP_FEATURE_SEND_ANY_GYRO)
   \                     ??dmp_enable_feature_19:
   \   000001EC   0xF44F 0x70C0      MOV      R0,#+384
   \   000001F0   0x4204             TST      R4,R0
   \   000001F2   0xD006             BEQ.N    ??dmp_enable_feature_20
   1102                  dmp.packet_length += 6;
   \   000001F4   0x.... 0x....      LDR.W    R0,??DataTable14
   \   000001F8   0x7B80             LDRB     R0,[R0, #+14]
   \   000001FA   0x1D80             ADDS     R0,R0,#+6
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000200   0x7388             STRB     R0,[R1, #+14]
   1103              if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
   \                     ??dmp_enable_feature_20:
   \   00000202   0x2014             MOVS     R0,#+20
   \   00000204   0x4204             TST      R4,R0
   \   00000206   0xD006             BEQ.N    ??dmp_enable_feature_21
   1104                  dmp.packet_length += 16;
   \   00000208   0x.... 0x....      LDR.W    R0,??DataTable14
   \   0000020C   0x7B80             LDRB     R0,[R0, #+14]
   \   0000020E   0x3010             ADDS     R0,R0,#+16
   \   00000210   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000214   0x7388             STRB     R0,[R1, #+14]
   1105              if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
   \                     ??dmp_enable_feature_21:
   \   00000216   0x2003             MOVS     R0,#+3
   \   00000218   0x4204             TST      R4,R0
   \   0000021A   0xD006             BEQ.N    ??dmp_enable_feature_22
   1106                  dmp.packet_length += 4;
   \   0000021C   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000220   0x7B80             LDRB     R0,[R0, #+14]
   \   00000222   0x1D00             ADDS     R0,R0,#+4
   \   00000224   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000228   0x7388             STRB     R0,[R1, #+14]
   1107          
   1108              return 0;
   \                     ??dmp_enable_feature_22:
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0xB004             ADD      SP,SP,#+16
   \   0000022E   0xBD10             POP      {R4,PC}          ;; return
   1109          }
   1110          
   1111          /**
   1112           *  @brief      Get list of currently enabled DMP features.
   1113           *  @param[out] Mask of enabled features.
   1114           *  @return     0 if successful.
   1115           */

   \                                 In section .text, align 2, keep-with-next
   1116          int dmp_get_enabled_features(unsigned short *mask)
   1117          {
   \                     dmp_get_enabled_features:
   \   00000000   0x0001             MOVS     R1,R0
   1118              mask[0] = dmp.feature_mask;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000006   0x8940             LDRH     R0,[R0, #+10]
   \   00000008   0x8008             STRH     R0,[R1, #+0]
   1119              return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR               ;; return
   1120          }
   1121          
   1122          /**
   1123           *  @brief      Calibrate the gyro data in the DMP.
   1124           *  After eight seconds of no motion, the DMP will compute gyro biases and
   1125           *  subtract them from the quaternion output. If @e dmp_enable_feature is
   1126           *  called with @e DMP_FEATURE_SEND_CAL_GYRO, the biases will also be
   1127           *  subtracted from the gyro output.
   1128           *  @param[in]  enable  1 to enable gyro calibration.
   1129           *  @return     0 if successful.
   1130           */

   \                                 In section .text, align 2, keep-with-next
   1131          int dmp_enable_gyro_cal(unsigned char enable)
   1132          {
   \                     dmp_enable_gyro_cal:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   1133              if (enable) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD00D             BEQ.N    ??dmp_enable_gyro_cal_0
   1134                  unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable14_8
   \   00000012   0xC92C             LDM      R1!,{R2,R3,R5}
   \   00000014   0xC02C             STM      R0!,{R2,R3,R5}
   \   00000016   0x390C             SUBS     R1,R1,#+12
   \   00000018   0x380C             SUBS     R0,R0,#+12
   1135                  return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
   \   0000001A   0xAA03             ADD      R2,SP,#+12
   \   0000001C   0x2109             MOVS     R1,#+9
   \   0000001E   0xF44F 0x6097      MOV      R0,#+1208
   \   00000022   0x.... 0x....      BL       mpu_write_mem
   \   00000026   0xE00C             B.N      ??dmp_enable_gyro_cal_1
   1136              } else {
   1137                  unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
   \                     ??dmp_enable_gyro_cal_0:
   \   00000028   0xA800             ADD      R0,SP,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable14_9
   \   0000002E   0xC92C             LDM      R1!,{R2,R3,R5}
   \   00000030   0xC02C             STM      R0!,{R2,R3,R5}
   \   00000032   0x390C             SUBS     R1,R1,#+12
   \   00000034   0x380C             SUBS     R0,R0,#+12
   1138                  return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
   \   00000036   0xAA00             ADD      R2,SP,#+0
   \   00000038   0x2109             MOVS     R1,#+9
   \   0000003A   0xF44F 0x6097      MOV      R0,#+1208
   \   0000003E   0x.... 0x....      BL       mpu_write_mem
   \                     ??dmp_enable_gyro_cal_1:
   \   00000042   0xB007             ADD      SP,SP,#+28
   \   00000044   0xBD30             POP      {R4,R5,PC}       ;; return
   1139              }
   1140          }
   1141          
   1142          /**
   1143           *  @brief      Generate 3-axis quaternions from the DMP.
   1144           *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
   1145           *  exclusive.
   1146           *  @param[in]  enable  1 to enable 3-axis quaternion.
   1147           *  @return     0 if successful.
   1148           */

   \                                 In section .text, align 2, keep-with-next
   1149          int dmp_enable_lp_quat(unsigned char enable)
   1150          {
   \                     dmp_enable_lp_quat:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1151              unsigned char regs[4];
   1152              if (enable) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD00C             BEQ.N    ??dmp_enable_lp_quat_0
   1153                  regs[0] = DINBC0;
   \   0000000C   0x20C0             MOVS     R0,#+192
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1154                  regs[1] = DINBC2;
   \   00000012   0x20C2             MOVS     R0,#+194
   \   00000014   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1155                  regs[2] = DINBC4;
   \   00000018   0x20C4             MOVS     R0,#+196
   \   0000001A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1156                  regs[3] = DINBC6;
   \   0000001E   0x20C6             MOVS     R0,#+198
   \   00000020   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000024   0xE004             B.N      ??dmp_enable_lp_quat_1
   1157              }
   1158              else
   1159                  memset(regs, 0x8B, 4);
   \                     ??dmp_enable_lp_quat_0:
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x218B             MOVS     R1,#+139
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       memset
   1160          
   1161              mpu_write_mem(CFG_LP_QUAT, 4, regs);
   \                     ??dmp_enable_lp_quat_1:
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0x2104             MOVS     R1,#+4
   \   00000034   0xF640 0x2098      MOVW     R0,#+2712
   \   00000038   0x.... 0x....      BL       mpu_write_mem
   1162          
   1163              return mpu_reset_fifo();
   \   0000003C   0x.... 0x....      BL       mpu_reset_fifo
   \   00000040   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1164          }
   1165          
   1166          /**
   1167           *  @brief       Generate 6-axis quaternions from the DMP.
   1168           *  In this driver, the 3-axis and 6-axis DMP quaternion features are mutually
   1169           *  exclusive.
   1170           *  @param[in]   enable  1 to enable 6-axis quaternion.
   1171           *  @return      0 if successful.
   1172           */

   \                                 In section .text, align 2, keep-with-next
   1173          int dmp_enable_6x_lp_quat(unsigned char enable)
   1174          {
   \                     dmp_enable_6x_lp_quat:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   1175              unsigned char regs[4];
   1176              if (enable) {
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD00C             BEQ.N    ??dmp_enable_6x_lp_quat_0
   1177                  regs[0] = DINA20;
   \   0000000C   0x2020             MOVS     R0,#+32
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1178                  regs[1] = DINA28;
   \   00000012   0x2028             MOVS     R0,#+40
   \   00000014   0xF88D 0x0001      STRB     R0,[SP, #+1]
   1179                  regs[2] = DINA30;
   \   00000018   0x2030             MOVS     R0,#+48
   \   0000001A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1180                  regs[3] = DINA38;
   \   0000001E   0x2038             MOVS     R0,#+56
   \   00000020   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000024   0xE004             B.N      ??dmp_enable_6x_lp_quat_1
   1181              } else
   1182                  memset(regs, 0xA3, 4);
   \                     ??dmp_enable_6x_lp_quat_0:
   \   00000026   0x2204             MOVS     R2,#+4
   \   00000028   0x21A3             MOVS     R1,#+163
   \   0000002A   0xA800             ADD      R0,SP,#+0
   \   0000002C   0x.... 0x....      BL       memset
   1183          
   1184              mpu_write_mem(CFG_8, 4, regs);
   \                     ??dmp_enable_6x_lp_quat_1:
   \   00000030   0xAA00             ADD      R2,SP,#+0
   \   00000032   0x2104             MOVS     R1,#+4
   \   00000034   0xF640 0x209E      MOVW     R0,#+2718
   \   00000038   0x.... 0x....      BL       mpu_write_mem
   1185          
   1186              return mpu_reset_fifo();
   \   0000003C   0x.... 0x....      BL       mpu_reset_fifo
   \   00000040   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1187          }
   1188          
   1189          /**
   1190           *  @brief      Decode the four-byte gesture data and execute any callbacks.
   1191           *  @param[in]  gesture Gesture data from DMP packet.
   1192           *  @return     0 if successful.
   1193           */

   \                                 In section .text, align 2, keep-with-next
   1194          static int decode_gesture(unsigned char *gesture)
   1195          {
   \                     decode_gesture:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   1196              unsigned char tap, android_orient;
   1197          
   1198              android_orient = gesture[3] & 0xC0;
   \   00000006   0x78E0             LDRB     R0,[R4, #+3]
   \   00000008   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   0000000C   0x0006             MOVS     R6,R0
   1199              tap = 0x3F & gesture[3];
   \   0000000E   0x78E0             LDRB     R0,[R4, #+3]
   \   00000010   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000014   0x0005             MOVS     R5,R0
   1200          
   1201              if (gesture[1] & INT_SRC_TAP) {
   \   00000016   0x7860             LDRB     R0,[R4, #+1]
   \   00000018   0x07C0             LSLS     R0,R0,#+31
   \   0000001A   0xD515             BPL.N    ??decode_gesture_0
   1202                  unsigned char direction, count;
   1203                  direction = tap >> 3;
   \   0000001C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001E   0x08E8             LSRS     R0,R5,#+3
   \   00000020   0x0007             MOVS     R7,R0
   1204                  count = (tap % 8) + 1;
   \   00000022   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000024   0x2008             MOVS     R0,#+8
   \   00000026   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   0000002A   0xFB01 0x5110      MLS      R1,R1,R0,R5
   \   0000002E   0x1C48             ADDS     R0,R1,#+1
   \   00000030   0x4680             MOV      R8,R0
   1205                  if (dmp.tap_cb)
   \   00000032   0x....             LDR.N    R0,??DataTable14
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD006             BEQ.N    ??decode_gesture_0
   1206                      dmp.tap_cb(direction, count);
   \   0000003A   0x4641             MOV      R1,R8
   \   0000003C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003E   0x0038             MOVS     R0,R7
   \   00000040   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000042   0x....             LDR.N    R2,??DataTable14
   \   00000044   0x6812             LDR      R2,[R2, #+0]
   \   00000046   0x4790             BLX      R2
   1207              }
   1208          
   1209              if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
   \                     ??decode_gesture_0:
   \   00000048   0x7860             LDRB     R0,[R4, #+1]
   \   0000004A   0x0700             LSLS     R0,R0,#+28
   \   0000004C   0xD508             BPL.N    ??decode_gesture_1
   1210                  if (dmp.android_orient_cb)
   \   0000004E   0x....             LDR.N    R0,??DataTable14
   \   00000050   0x6840             LDR      R0,[R0, #+4]
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD004             BEQ.N    ??decode_gesture_1
   1211                      dmp.android_orient_cb(android_orient >> 6);
   \   00000056   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000058   0x09B0             LSRS     R0,R6,#+6
   \   0000005A   0x....             LDR.N    R1,??DataTable14
   \   0000005C   0x6849             LDR      R1,[R1, #+4]
   \   0000005E   0x4788             BLX      R1
   1212              }
   1213          
   1214              return 0;
   \                     ??decode_gesture_1:
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1215          }
   1216          
   1217          /**
   1218           *  @brief      Specify when a DMP interrupt should occur.
   1219           *  A DMP interrupt can be configured to trigger on either of the two
   1220           *  conditions below:
   1221           *  \n a. One FIFO period has elapsed (set by @e mpu_set_sample_rate).
   1222           *  \n b. A tap event has been detected.
   1223           *  @param[in]  mode    DMP_INT_GESTURE or DMP_INT_CONTINUOUS.
   1224           *  @return     0 if successful.
   1225           */

   \                                 In section .text, align 2, keep-with-next
   1226          int dmp_set_interrupt_mode(unsigned char mode)
   1227          {
   \                     dmp_set_interrupt_mode:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   1228              const unsigned char regs_continuous[11] =
   1229                  {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x....             LDR.N    R1,??DataTable14_10
   \   0000000A   0xC92C             LDM      R1!,{R2,R3,R5}
   \   0000000C   0xC02C             STM      R0!,{R2,R3,R5}
   \   0000000E   0x390C             SUBS     R1,R1,#+12
   \   00000010   0x380C             SUBS     R0,R0,#+12
   1230              const unsigned char regs_gesture[11] =
   1231                  {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0x....             LDR.N    R1,??DataTable14_11
   \   00000016   0xC92C             LDM      R1!,{R2,R3,R5}
   \   00000018   0xC02C             STM      R0!,{R2,R3,R5}
   \   0000001A   0x390C             SUBS     R1,R1,#+12
   \   0000001C   0x380C             SUBS     R0,R0,#+12
   1232          
   1233              switch (mode) {
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD008             BEQ.N    ??dmp_set_interrupt_mode_0
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD10D             BNE.N    ??dmp_set_interrupt_mode_1
   1234              case DMP_INT_CONTINUOUS:
   1235                  return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
   1236                      (unsigned char*)regs_continuous);
   \                     ??dmp_set_interrupt_mode_2:
   \   0000002A   0xAA03             ADD      R2,SP,#+12
   \   0000002C   0x210B             MOVS     R1,#+11
   \   0000002E   0xF640 0x2082      MOVW     R0,#+2690
   \   00000032   0x.... 0x....      BL       mpu_write_mem
   \   00000036   0xE008             B.N      ??dmp_set_interrupt_mode_3
   1237              case DMP_INT_GESTURE:
   1238                  return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
   1239                      (unsigned char*)regs_gesture);
   \                     ??dmp_set_interrupt_mode_0:
   \   00000038   0xAA00             ADD      R2,SP,#+0
   \   0000003A   0x210B             MOVS     R1,#+11
   \   0000003C   0xF640 0x2082      MOVW     R0,#+2690
   \   00000040   0x.... 0x....      BL       mpu_write_mem
   \   00000044   0xE001             B.N      ??dmp_set_interrupt_mode_3
   1240              default:
   1241                  return -1;
   \                     ??dmp_set_interrupt_mode_1:
   \   00000046   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??dmp_set_interrupt_mode_3:
   \   0000004A   0xB007             ADD      SP,SP,#+28
   \   0000004C   0xBD30             POP      {R4,R5,PC}       ;; return
   1242              }
   1243          }
   1244          
   1245          /**
   1246           *  @brief      Get one packet from the FIFO.
   1247           *  If @e sensors does not contain a particular sensor, disregard the data
   1248           *  returned to that pointer.
   1249           *  \n @e sensors can contain a combination of the following flags:
   1250           *  \n INV_X_GYRO, INV_Y_GYRO, INV_Z_GYRO
   1251           *  \n INV_XYZ_GYRO
   1252           *  \n INV_XYZ_ACCEL
   1253           *  \n INV_WXYZ_QUAT
   1254           *  \n If the FIFO has no new data, @e sensors will be zero.
   1255           *  \n If the FIFO is disabled, @e sensors will be zero and this function will
   1256           *  return a non-zero error code.
   1257           *  @param[out] gyro        Gyro data in hardware units.
   1258           *  @param[out] accel       Accel data in hardware units.
   1259           *  @param[out] quat        3-axis quaternion data in hardware units.
   1260           *  @param[out] timestamp   Timestamp in milliseconds.
   1261           *  @param[out] sensors     Mask of sensors read from FIFO.
   1262           *  @param[out] more        Number of remaining packets.
   1263           *  @return     0 if successful.
   1264           */

   \                                 In section .text, align 2, keep-with-next
   1265          int dmp_read_fifo(short *gyro, short *accel, long *quat,
   1266              unsigned long *timestamp, short *sensors, unsigned char *more)
   1267          {
   \                     dmp_read_fifo:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8058      LDR      R8,[SP, #+88]
   \   00000012   0xF8DD 0x905C      LDR      R9,[SP, #+92]
   1268              unsigned char fifo_data[MAX_PACKET_LENGTH];
   1269              unsigned char ii = 0;
   \   00000016   0xF05F 0x0B00      MOVS     R11,#+0
   1270          
   1271              /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
   1272               * cache this value and save some cycles.
   1273               */
   1274              sensors[0] = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8A8 0x0000      STRH     R0,[R8, #+0]
   1275          
   1276              /* Get a packet. */
   1277              if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
   \   00000020   0x464A             MOV      R2,R9
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x....             LDR.N    R0,??DataTable14
   \   00000026   0x7B80             LDRB     R0,[R0, #+14]
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       mpu_read_fifo_stream
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD002             BEQ.N    ??dmp_read_fifo_0
   1278                  return -1;
   \   00000032   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000036   0xE0F4             B.N      ??dmp_read_fifo_1
   1279          
   1280              /* Parse DMP packet. */
   1281              if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
   \                     ??dmp_read_fifo_0:
   \   00000038   0x....             LDR.N    R0,??DataTable14
   \   0000003A   0x7A80             LDRB     R0,[R0, #+10]
   \   0000003C   0x2114             MOVS     R1,#+20
   \   0000003E   0x4208             TST      R0,R1
   \   00000040   0xD06D             BEQ.N    ??dmp_read_fifo_2
   1282          #ifdef FIFO_CORRUPTION_CHECK
   1283                  long quat_q14[4], quat_mag_sq;
   1284          #endif
   1285                  quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
   1286                      ((long)fifo_data[2] << 8) | fifo_data[3];
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000004A   0x0409             LSLS     R1,R1,#+16
   \   0000004C   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   00000050   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000054   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000058   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   0000005C   0x4308             ORRS     R0,R1,R0
   \   0000005E   0x6030             STR      R0,[R6, #+0]
   1287                  quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
   1288                      ((long)fifo_data[6] << 8) | fifo_data[7];
   \   00000060   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000064   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000068   0x0409             LSLS     R1,R1,#+16
   \   0000006A   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   0000006E   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000072   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000076   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   0000007A   0x4308             ORRS     R0,R1,R0
   \   0000007C   0x6070             STR      R0,[R6, #+4]
   1289                  quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
   1290                      ((long)fifo_data[10] << 8) | fifo_data[11];
   \   0000007E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000082   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   00000086   0x0409             LSLS     R1,R1,#+16
   \   00000088   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   0000008C   0xF89D 0x100A      LDRB     R1,[SP, #+10]
   \   00000090   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000094   0xF89D 0x100B      LDRB     R1,[SP, #+11]
   \   00000098   0x4308             ORRS     R0,R1,R0
   \   0000009A   0x60B0             STR      R0,[R6, #+8]
   1291                  quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
   1292                      ((long)fifo_data[14] << 8) | fifo_data[15];
   \   0000009C   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   000000A0   0xF89D 0x100D      LDRB     R1,[SP, #+13]
   \   000000A4   0x0409             LSLS     R1,R1,#+16
   \   000000A6   0xEA51 0x6000      ORRS     R0,R1,R0, LSL #+24
   \   000000AA   0xF89D 0x100E      LDRB     R1,[SP, #+14]
   \   000000AE   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   000000B2   0xF89D 0x100F      LDRB     R1,[SP, #+15]
   \   000000B6   0x4308             ORRS     R0,R1,R0
   \   000000B8   0x60F0             STR      R0,[R6, #+12]
   1293                  ii += 16;
   \   000000BA   0xF11B 0x0B10      ADDS     R11,R11,#+16
   1294          #ifdef FIFO_CORRUPTION_CHECK
   1295                  /* We can detect a corrupted FIFO by monitoring the quaternion data and
   1296                   * ensuring that the magnitude is always normalized to one. This
   1297                   * shouldn't happen in normal operation, but if an I2C error occurs,
   1298                   * the FIFO reads might become misaligned.
   1299                   *
   1300                   * Let's start by scaling down the quaternion data to avoid long long
   1301                   * math.
   1302                   */
   1303                  quat_q14[0] = quat[0] >> 16;
   \   000000BE   0x6830             LDR      R0,[R6, #+0]
   \   000000C0   0x1400             ASRS     R0,R0,#+16
   \   000000C2   0x9008             STR      R0,[SP, #+32]
   1304                  quat_q14[1] = quat[1] >> 16;
   \   000000C4   0x6870             LDR      R0,[R6, #+4]
   \   000000C6   0x1400             ASRS     R0,R0,#+16
   \   000000C8   0x9009             STR      R0,[SP, #+36]
   1305                  quat_q14[2] = quat[2] >> 16;
   \   000000CA   0x68B0             LDR      R0,[R6, #+8]
   \   000000CC   0x1400             ASRS     R0,R0,#+16
   \   000000CE   0x900A             STR      R0,[SP, #+40]
   1306                  quat_q14[3] = quat[3] >> 16;
   \   000000D0   0x68F0             LDR      R0,[R6, #+12]
   \   000000D2   0x1400             ASRS     R0,R0,#+16
   \   000000D4   0x900B             STR      R0,[SP, #+44]
   1307                  quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
   1308                      quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
   \   000000D6   0x9808             LDR      R0,[SP, #+32]
   \   000000D8   0x9908             LDR      R1,[SP, #+32]
   \   000000DA   0x9A09             LDR      R2,[SP, #+36]
   \   000000DC   0x9B09             LDR      R3,[SP, #+36]
   \   000000DE   0x435A             MULS     R2,R3,R2
   \   000000E0   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000E4   0x990A             LDR      R1,[SP, #+40]
   \   000000E6   0x9A0A             LDR      R2,[SP, #+40]
   \   000000E8   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000000EC   0x990B             LDR      R1,[SP, #+44]
   \   000000EE   0x9A0B             LDR      R2,[SP, #+44]
   \   000000F0   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   000000F4   0x4682             MOV      R10,R0
   1309                  if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
   1310                      (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
   \   000000F6   0xF1BA 0x6F70      CMP      R10,#+251658240
   \   000000FA   0xDB02             BLT.N    ??dmp_read_fifo_3
   \   000000FC   0xF1BA 0x5F88      CMP      R10,#+285212672
   \   00000100   0xDD07             BLE.N    ??dmp_read_fifo_4
   1311                      /* Quaternion is outside of the acceptable threshold. */
   1312                      mpu_reset_fifo();
   \                     ??dmp_read_fifo_3:
   \   00000102   0x.... 0x....      BL       mpu_reset_fifo
   1313                      sensors[0] = 0;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0xF8A8 0x0000      STRH     R0,[R8, #+0]
   1314                      return -1;
   \   0000010C   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000110   0xE087             B.N      ??dmp_read_fifo_1
   1315                  }
   1316                  sensors[0] |= INV_WXYZ_QUAT;
   \                     ??dmp_read_fifo_4:
   \   00000112   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000116   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   0000011A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
   1317          #endif
   1318              }
   1319          
   1320              if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
   \                     ??dmp_read_fifo_2:
   \   0000011E   0x....             LDR.N    R0,??DataTable14
   \   00000120   0x7A80             LDRB     R0,[R0, #+10]
   \   00000122   0x0640             LSLS     R0,R0,#+25
   \   00000124   0xD533             BPL.N    ??dmp_read_fifo_5
   1321                  accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
   \   00000126   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000012A   0xA800             ADD      R0,SP,#+0
   \   0000012C   0xF81B 0x0000      LDRB     R0,[R11, R0]
   \   00000130   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000134   0xA900             ADD      R1,SP,#+0
   \   00000136   0xEB1B 0x0101      ADDS     R1,R11,R1
   \   0000013A   0x7849             LDRB     R1,[R1, #+1]
   \   0000013C   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000140   0x8028             STRH     R0,[R5, #+0]
   1322                  accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
   \   00000142   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000146   0xA800             ADD      R0,SP,#+0
   \   00000148   0xEB1B 0x0000      ADDS     R0,R11,R0
   \   0000014C   0x7880             LDRB     R0,[R0, #+2]
   \   0000014E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000152   0xA900             ADD      R1,SP,#+0
   \   00000154   0xEB1B 0x0101      ADDS     R1,R11,R1
   \   00000158   0x78C9             LDRB     R1,[R1, #+3]
   \   0000015A   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000015E   0x8068             STRH     R0,[R5, #+2]
   1323                  accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
   \   00000160   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000164   0xA800             ADD      R0,SP,#+0
   \   00000166   0xEB1B 0x0000      ADDS     R0,R11,R0
   \   0000016A   0x7900             LDRB     R0,[R0, #+4]
   \   0000016C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000170   0xA900             ADD      R1,SP,#+0
   \   00000172   0xEB1B 0x0101      ADDS     R1,R11,R1
   \   00000176   0x7949             LDRB     R1,[R1, #+5]
   \   00000178   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000017C   0x80A8             STRH     R0,[R5, #+4]
   1324                  ii += 6;
   \   0000017E   0xF11B 0x0B06      ADDS     R11,R11,#+6
   1325                  sensors[0] |= INV_XYZ_ACCEL;
   \   00000182   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   00000186   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000018A   0xF8A8 0x0000      STRH     R0,[R8, #+0]
   1326              }
   1327          
   1328              if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
   \                     ??dmp_read_fifo_5:
   \   0000018E   0x....             LDR.N    R0,??DataTable14
   \   00000190   0x8940             LDRH     R0,[R0, #+10]
   \   00000192   0xF44F 0x71C0      MOV      R1,#+384
   \   00000196   0x4208             TST      R0,R1
   \   00000198   0xD033             BEQ.N    ??dmp_read_fifo_6
   1329                  gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
   \   0000019A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000019E   0xA800             ADD      R0,SP,#+0
   \   000001A0   0xF81B 0x0000      LDRB     R0,[R11, R0]
   \   000001A4   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001A8   0xA900             ADD      R1,SP,#+0
   \   000001AA   0xEB1B 0x0101      ADDS     R1,R11,R1
   \   000001AE   0x7849             LDRB     R1,[R1, #+1]
   \   000001B0   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000001B4   0x8020             STRH     R0,[R4, #+0]
   1330                  gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
   \   000001B6   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001BA   0xA800             ADD      R0,SP,#+0
   \   000001BC   0xEB1B 0x0000      ADDS     R0,R11,R0
   \   000001C0   0x7880             LDRB     R0,[R0, #+2]
   \   000001C2   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001C6   0xA900             ADD      R1,SP,#+0
   \   000001C8   0xEB1B 0x0101      ADDS     R1,R11,R1
   \   000001CC   0x78C9             LDRB     R1,[R1, #+3]
   \   000001CE   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000001D2   0x8060             STRH     R0,[R4, #+2]
   1331                  gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
   \   000001D4   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001D8   0xA800             ADD      R0,SP,#+0
   \   000001DA   0xEB1B 0x0000      ADDS     R0,R11,R0
   \   000001DE   0x7900             LDRB     R0,[R0, #+4]
   \   000001E0   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001E4   0xA900             ADD      R1,SP,#+0
   \   000001E6   0xEB1B 0x0101      ADDS     R1,R11,R1
   \   000001EA   0x7949             LDRB     R1,[R1, #+5]
   \   000001EC   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   000001F0   0x80A0             STRH     R0,[R4, #+4]
   1332                  ii += 6;
   \   000001F2   0xF11B 0x0B06      ADDS     R11,R11,#+6
   1333                  sensors[0] |= INV_XYZ_GYRO;
   \   000001F6   0xF8B8 0x0000      LDRH     R0,[R8, #+0]
   \   000001FA   0xF050 0x0070      ORRS     R0,R0,#0x70
   \   000001FE   0xF8A8 0x0000      STRH     R0,[R8, #+0]
   1334              }
   1335          
   1336              /* Gesture data is at the end of the DMP packet. Parse it and call
   1337               * the gesture callbacks (if registered).
   1338               */
   1339              if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
   \                     ??dmp_read_fifo_6:
   \   00000202   0x....             LDR.N    R0,??DataTable14
   \   00000204   0x7A80             LDRB     R0,[R0, #+10]
   \   00000206   0x2103             MOVS     R1,#+3
   \   00000208   0x4208             TST      R0,R1
   \   0000020A   0xD006             BEQ.N    ??dmp_read_fifo_7
   1340                  decode_gesture(fifo_data + ii);
   \   0000020C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000210   0xA800             ADD      R0,SP,#+0
   \   00000212   0xEB1B 0x0000      ADDS     R0,R11,R0
   \   00000216   0x.... 0x....      BL       decode_gesture
   1341          
   1342              get_ms(timestamp);
   \                     ??dmp_read_fifo_7:
   \   0000021A   0x0038             MOVS     R0,R7
   \   0000021C   0x.... 0x....      BL       get_ms
   1343              return 0;
   \   00000220   0x2000             MOVS     R0,#+0
   \                     ??dmp_read_fifo_1:
   \   00000222   0xB00D             ADD      SP,SP,#+52
   \   00000224   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1344          }
   1345          
   1346          /**
   1347           *  @brief      Register a function to be executed on a tap event.
   1348           *  The tap direction is represented by one of the following:
   1349           *  \n TAP_X_UP
   1350           *  \n TAP_X_DOWN
   1351           *  \n TAP_Y_UP
   1352           *  \n TAP_Y_DOWN
   1353           *  \n TAP_Z_UP
   1354           *  \n TAP_Z_DOWN
   1355           *  @param[in]  func    Callback function.
   1356           *  @return     0 if successful.
   1357           */

   \                                 In section .text, align 2, keep-with-next
   1358          int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
   1359          {
   \                     dmp_register_tap_cb:
   \   00000000   0x0001             MOVS     R1,R0
   1360              dmp.tap_cb = func;
   \   00000002   0x....             LDR.N    R0,??DataTable14
   \   00000004   0x6001             STR      R1,[R0, #+0]
   1361              return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
   1362          }
   1363          
   1364          /**
   1365           *  @brief      Register a function to be executed on a android orientation event.
   1366           *  @param[in]  func    Callback function.
   1367           *  @return     0 if successful.
   1368           */

   \                                 In section .text, align 2, keep-with-next
   1369          int dmp_register_android_orient_cb(void (*func)(unsigned char))
   1370          {
   \                     dmp_register_android_orient_cb:
   \   00000000   0x0001             MOVS     R1,R0
   1371              dmp.android_orient_cb = func;
   \   00000002   0x....             LDR.N    R0,??DataTable14
   \   00000004   0x6041             STR      R1,[R0, #+4]
   1372              return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
   1373          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     sStartAddress

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     dmp_memory

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     `?<Constant {76, 205, 108}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   0x........         DC32     `?<Constant {12, 201, 44}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   0x........         DC32     `?<Constant {54, 86, 118}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   0x........         DC32     `?<Constant {38, 70, 102}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     dmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x02CAE309         DC32     0x2cae309

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     `?<Constant {254, 242, 171, 196, 170, 241, 223,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x43480000         DC32     0x43480000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x46400000         DC32     0x46400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x45C00000         DC32     0x45c00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x45400000         DC32     0x45400000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_7:
   \   00000000   0x44C00000         DC32     0x44c00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_8:
   \   00000000   0x........         DC32     `?<Constant {184, 170, 179, 141, 180, 152, 13, `

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_9:
   \   00000000   0x........         DC32     `?<Constant {184, 170, 170, 170, 176, 136, 195,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_10:
   \   00000000   0x........         DC32     `?<Constant {216, 177, 185, 243, 139, 163, 145,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_11:
   \   00000000   0x........         DC32     `?<Constant {218, 177, 185, 243, 139, 163, 145,`

   \                                 In section .rodata, align 4
   \                     `?<Constant {76, 205, 108}>`:
   \   00000000   0x4C 0xCD          DC8 76, 205, 108, 0
   \              0x6C 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {12, 201, 44}>`:
   \   00000000   0x0C 0xC9          DC8 12, 201, 44, 0
   \              0x2C 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {54, 86, 118}>`:
   \   00000000   0x36 0x56          DC8 54, 86, 118, 0
   \              0x76 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {38, 70, 102}>`:
   \   00000000   0x26 0x46          DC8 38, 70, 102, 0
   \              0x66 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {254, 242, 171, 196, 170, 241, 223,`:
   \   00000000   0xFE 0xF2          DC8 254, 242, 171, 196, 170, 241, 223, 223, 187, 175, 223, 223
   \              0xAB 0xC4    
   \              0xAA 0xF1    
   \              0xDF 0xDF    
   \              0xBB 0xAF    
   \              0xDF 0xDF    

   \                                 In section .rodata, align 4
   \                     `?<Constant {184, 170, 179, 141, 180, 152, 13, `:
   \   00000000   0xB8 0xAA          DC8 184, 170, 179, 141, 180, 152, 13, 53, 93, 0, 0, 0
   \              0xB3 0x8D    
   \              0xB4 0x98    
   \              0x0D 0x35    
   \              0x5D 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {184, 170, 170, 170, 176, 136, 195,`:
   \   00000000   0xB8 0xAA          DC8 184, 170, 170, 170, 176, 136, 195, 197, 199, 0, 0, 0
   \              0xAA 0xAA    
   \              0xB0 0x88    
   \              0xC3 0xC5    
   \              0xC7 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {216, 177, 185, 243, 139, 163, 145,`:
   \   00000000   0xD8 0xB1          DC8 216, 177, 185, 243, 139, 163, 145, 182, 9, 180, 217, 0
   \              0xB9 0xF3    
   \              0x8B 0xA3    
   \              0x91 0xB6    
   \              0x09 0xB4    
   \              0xD9 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {218, 177, 185, 243, 139, 163, 145,`:
   \   00000000   0xDA 0xB1          DC8 218, 177, 185, 243, 139, 163, 145, 182, 218, 180, 218, 0
   \              0xB9 0xF3    
   \              0x8B 0xA3    
   \              0x91 0xB6    
   \              0xDA 0xB4    
   \              0xDA 0x00    
   1374          
   1375          /**
   1376           *  @}
   1377           */
   1378          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  decode_gesture
             24 -- Indirect call
       16  dmp_enable_6x_lp_quat
             16 -> memset
             16 -> mpu_reset_fifo
             16 -> mpu_write_mem
       24  dmp_enable_feature
             24 -> dmp_enable_6x_lp_quat
             24 -> dmp_enable_gyro_cal
             24 -> dmp_enable_lp_quat
             24 -> dmp_set_shake_reject_thresh
             24 -> dmp_set_shake_reject_time
             24 -> dmp_set_shake_reject_timeout
             24 -> dmp_set_tap_axes
             24 -> dmp_set_tap_count
             24 -> dmp_set_tap_thresh
             24 -> dmp_set_tap_time
             24 -> dmp_set_tap_time_multi
             24 -> mpu_reset_fifo
             24 -> mpu_write_mem
       40  dmp_enable_gyro_cal
             40 -> mpu_write_mem
       16  dmp_enable_lp_quat
             16 -> memset
             16 -> mpu_reset_fifo
             16 -> mpu_write_mem
        0  dmp_get_enabled_features
        0  dmp_get_fifo_rate
       16  dmp_get_pedometer_step_count
             16 -> mpu_read_mem
       16  dmp_get_pedometer_walk_time
             16 -> mpu_read_mem
        8  dmp_load_motion_driver_firmware
              8 -> mpu_load_firmware
       88  dmp_read_fifo
             88 -> decode_gesture
             88 -> get_ms
             88 -> mpu_read_fifo_stream
             88 -> mpu_reset_fifo
        0  dmp_register_android_orient_cb
        0  dmp_register_tap_cb
       48  dmp_set_accel_bias
             48 -> mpu_get_accel_sens
             48 -> mpu_write_mem
       32  dmp_set_fifo_rate
             32 -> mpu_write_mem
       24  dmp_set_gyro_bias
             24 -> mpu_write_mem
       40  dmp_set_interrupt_mode
             40 -> mpu_write_mem
       32  dmp_set_orientation
             32 -> memcpy
             32 -> mpu_write_mem
       16  dmp_set_pedometer_step_count
             16 -> mpu_write_mem
       16  dmp_set_pedometer_walk_time
             16 -> mpu_write_mem
       24  dmp_set_shake_reject_thresh
             24 -> mpu_write_mem
       16  dmp_set_shake_reject_time
             16 -> mpu_write_mem
       16  dmp_set_shake_reject_timeout
             16 -> mpu_write_mem
       16  dmp_set_tap_axes
             16 -> mpu_write_mem
       16  dmp_set_tap_count
             16 -> mpu_write_mem
       32  dmp_set_tap_thresh
             32 -> __aeabi_f2iz
             32 -> __aeabi_fdiv
             32 -> __aeabi_fmul
             32 -> __aeabi_ui2f
             32 -> mpu_get_accel_fsr
             32 -> mpu_write_mem
       16  dmp_set_tap_time
             16 -> mpu_write_mem
       16  dmp_set_tap_time_multi
             16 -> mpu_write_mem
       16  memcpy
             16 -> __aeabi_memcpy
       16  memset
             16 -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant {12, 201, 44}>
      12  ?<Constant {184, 170, 170, 170, 176, 136, 195,
      12  ?<Constant {184, 170, 179, 141, 180, 152, 13,
      12  ?<Constant {216, 177, 185, 243, 139, 163, 145,
      12  ?<Constant {218, 177, 185, 243, 139, 163, 145,
      12  ?<Constant {254, 242, 171, 196, 170, 241, 223,
       4  ?<Constant {38, 70, 102}>
       4  ?<Constant {54, 86, 118}>
       4  ?<Constant {76, 205, 108}>
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_10
       4  ??DataTable14_11
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
     102  decode_gesture
      16  dmp
      66  dmp_enable_6x_lp_quat
     560  dmp_enable_feature
      70  dmp_enable_gyro_cal
      66  dmp_enable_lp_quat
      14  dmp_get_enabled_features
      14  dmp_get_fifo_rate
      72  dmp_get_pedometer_step_count
      76  dmp_get_pedometer_walk_time
      24  dmp_load_motion_driver_firmware
    3064  dmp_memory
     552  dmp_read_fifo
      10  dmp_register_android_orient_cb
      10  dmp_register_tap_cb
     326  dmp_set_accel_bias
     114  dmp_set_fifo_rate
     326  dmp_set_gyro_bias
      78  dmp_set_interrupt_mode
     334  dmp_set_orientation
      44  dmp_set_pedometer_step_count
      50  dmp_set_pedometer_walk_time
      60  dmp_set_shake_reject_thresh
      42  dmp_set_shake_reject_time
      42  dmp_set_shake_reject_timeout
      74  dmp_set_tap_axes
      48  dmp_set_tap_count
     406  dmp_set_tap_thresh
      42  dmp_set_tap_time
      42  dmp_set_tap_time_multi
      22  memcpy
      22  memset
       2  sStartAddress

 
    16 bytes in section .bss
 3 142 bytes in section .rodata
 3 780 bytes in section .text
 
 3 736 bytes of CODE  memory (+ 44 bytes shared)
 3 142 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
