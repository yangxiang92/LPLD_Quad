###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:38 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    Communicate\dataframe.c                                  #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    Communicate\dataframe.c -D LPLD_K60 -lCN                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\dataframe.lst                                   #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\dataframe.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\Communicate\dataframe.c
      1          #include "dataframe.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          uint16 CalculateCrc16_HalfByte(void * data, uint16 len)
      4          {
   \                     CalculateCrc16_HalfByte:
   \   00000000   0xB470             PUSH     {R4-R6}
   \   00000002   0x0002             MOVS     R2,R0
      5              uint16 crc = 0;
   \   00000004   0x2000             MOVS     R0,#+0
      6              const static uint16 crc_tab[16] =
      7              {
      8                  0x0000 , 0x1021 , 0x2042 , 0x3063 , 0x4084 , 0x50A5 , 0x60C6 , 0x70E7 ,
      9                  0x8108 , 0x9129 , 0xA14A , 0xB16B , 0xC18C , 0xD1AD , 0xE1CE , 0xF1EF
     10              };
     11              uint8 h_crc;
     12              const uint8 * ptr = (const uint8 *)data;
   \   00000006   0x0014             MOVS     R4,R2
     13              //
     14              while(len --)
   \                     ??CalculateCrc16_HalfByte_0:
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x1E69             SUBS     R1,R5,#+1
   \   0000000C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD01A             BEQ.N    ??CalculateCrc16_HalfByte_1
     15              {
     16                  h_crc = (uint8)(crc >> 12);                 //暂存CRC 的高四位
   \   00000012   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000014   0x0B05             LSRS     R5,R0,#+12
   \   00000016   0x002B             MOVS     R3,R5
     17                  crc <<= 4;                                  //CRC 右移4 位，相当于取CRC 的低12 位）
   \   00000018   0x0100             LSLS     R0,R0,#+4
     18                  crc ^= crc_tab[h_crc ^ ((*ptr) >> 4)];      //CRC 的高4 位和本字节的前半字节相加后查表计算CRC，然后加上上一次CRC 的余数
   \   0000001A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001C   0x7825             LDRB     R5,[R4, #+0]
   \   0000001E   0xEA93 0x1525      EORS     R5,R3,R5, ASR #+4
   \   00000022   0x....             LDR.N    R6,??DataTable0
   \   00000024   0xF836 0x5015      LDRH     R5,[R6, R5, LSL #+1]
   \   00000028   0x4068             EORS     R0,R5,R0
     19                  //
     20                  h_crc = crc >> 12;                          //暂存CRC 的高4 位
   \   0000002A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002C   0x0B05             LSRS     R5,R0,#+12
   \   0000002E   0x002B             MOVS     R3,R5
     21                  crc <<= 4;                                  //CRC 右移4 位， 相当于CRC 的低12 位）
   \   00000030   0x0100             LSLS     R0,R0,#+4
     22                  crc ^= crc_tab[h_crc ^ ((*ptr) & 0x0F)];       //CRC 的高4 位和本字节的后半字节相加后查表计算CRC，然后再加上上一次CRC 的余数
   \   00000032   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000034   0x7825             LDRB     R5,[R4, #+0]
   \   00000036   0xF015 0x050F      ANDS     R5,R5,#0xF
   \   0000003A   0x405D             EORS     R5,R5,R3
   \   0000003C   0x....             LDR.N    R6,??DataTable0
   \   0000003E   0xF836 0x5015      LDRH     R5,[R6, R5, LSL #+1]
   \   00000042   0x4068             EORS     R0,R5,R0
     23                  //
     24                  ptr ++;
   \   00000044   0x1C64             ADDS     R4,R4,#+1
   \   00000046   0xE7DF             B.N      ??CalculateCrc16_HalfByte_0
     25              }
     26              //
     27              return crc;
   \                     ??CalculateCrc16_HalfByte_1:
   \   00000048   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0xBC70             POP      {R4-R6}
   \   0000004C   0x4770             BX       LR               ;; return
     28          }

   \                                 In section .rodata, align 4
   \                     ??crc_tab:
   \   00000000   0x0000 0x1021      DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
   \              0x2042 0x3063
   \              0x4084 0x50A5
   \              0x60C6 0x70E7
   \              0x8108 0x9129
   \   00000014   0xA14A 0xB16B      DC16 41290, 45419, 49548, 53677, 57806, 61935
   \              0xC18C 0xD1AD
   \              0xE1CE 0xF1EF
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void ExchangeUint16Bytes(uint16 * num)
     31          {
   \                     ExchangeUint16Bytes:
   \   00000000   0xB081             SUB      SP,SP,#+4
     32              int i = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     33              uint8 temp[2];
     34          
     35              for(i = 0; i < 2; i++)
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x0011             MOVS     R1,R2
   \                     ??ExchangeUint16Bytes_0:
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xDA04             BGE.N    ??ExchangeUint16Bytes_1
     36              {
     37                  temp[i] = ((uint8 *)num)[i];
   \   0000000C   0x5C0A             LDRB     R2,[R1, R0]
   \   0000000E   0xAB00             ADD      R3,SP,#+0
   \   00000010   0x54CA             STRB     R2,[R1, R3]
     38              }
   \   00000012   0x1C49             ADDS     R1,R1,#+1
   \   00000014   0xE7F8             B.N      ??ExchangeUint16Bytes_0
     39          
     40              for(i = 0; i < 2; i++)
   \                     ??ExchangeUint16Bytes_1:
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x0011             MOVS     R1,R2
   \                     ??ExchangeUint16Bytes_2:
   \   0000001A   0x2902             CMP      R1,#+2
   \   0000001C   0xDA06             BGE.N    ??ExchangeUint16Bytes_3
     41              {
     42                  ((uint8 *)num)[1-i] = temp[i];
   \   0000001E   0x424A             RSBS     R2,R1,#+0
   \   00000020   0x1812             ADDS     R2,R2,R0
   \   00000022   0xAB00             ADD      R3,SP,#+0
   \   00000024   0x5CCB             LDRB     R3,[R1, R3]
   \   00000026   0x7053             STRB     R3,[R2, #+1]
     43              }
   \   00000028   0x1C49             ADDS     R1,R1,#+1
   \   0000002A   0xE7F6             B.N      ??ExchangeUint16Bytes_2
     44          }
   \                     ??ExchangeUint16Bytes_3:
   \   0000002C   0xB001             ADD      SP,SP,#+4
   \   0000002E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     ??crc_tab

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       12  CalculateCrc16_HalfByte
        4  ExchangeUint16Bytes


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      78  CalculateCrc16_HalfByte
      48  ExchangeUint16Bytes
      32  crc_tab

 
  32 bytes in section .rodata
 130 bytes in section .text
 
 130 bytes of CODE  memory
  32 bytes of CONST memory

Errors: none
Warnings: none
