###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:37 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\battery.c                                             #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\battery.c -D LPLD_K60 -lCN                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\battery.lst                                     #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\battery.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\battery.c
      1          /****************************************************************************** 
      2           *       battery.c ----- The AD Conversion of Battery Voltage          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  battery.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/4 9:42:47                                                       *
     10           ******************************************************************************/
     11          #include "battery.h"
     12          

   \                                 In section .bss, align 2
     13          uint16 g_battery_voltage = 0;
   \                     g_battery_voltage:
   \   00000000                      DS8 2
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void InitBatteryVoltageMeasurement(void)
     16          {
   \                     InitBatteryVoltageMeasurement:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     17              ADC_InitTypeDef battery_voltage_adc_init_struct = {0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2114             MOVS     R1,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     18              battery_voltage_adc_init_struct.ADC_Adcx = BATTERY_ADC_PORT;
   \   0000000C   0x....             LDR.N    R0,??DataTable2  ;; 0x4003b000
   \   0000000E   0x9001             STR      R0,[SP, #+4]
     19              battery_voltage_adc_init_struct.ADC_DiffMode = ADC_SE;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF88D 0x0008      STRB     R0,[SP, #+8]
     20              battery_voltage_adc_init_struct.ADC_BitMode = BATTERY_ADC_BIT_MODE;
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0xF88D 0x0009      STRB     R0,[SP, #+9]
     21              battery_voltage_adc_init_struct.ADC_SampleTimeCfg = SAMTIME_LONG;
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0xF88D 0x000A      STRB     R0,[SP, #+10]
     22              battery_voltage_adc_init_struct.ADC_HwAvgSel = HW_4AVG;
   \   00000022   0x2004             MOVS     R0,#+4
   \   00000024   0xF88D 0x000C      STRB     R0,[SP, #+12]
     23              battery_voltage_adc_init_struct.ADC_CalEnable = TRUE;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xF88D 0x000F      STRB     R0,[SP, #+15]
     24              battery_voltage_adc_init_struct.ADC_Isr = BatteryVoltageADCIsr;
   \   0000002E   0x.... 0x....      ADR.W    R0,BatteryVoltageADCIsr
   \   00000032   0x9005             STR      R0,[SP, #+20]
     25          
     26              LPLD_ADC_Init(battery_voltage_adc_init_struct);
   \   00000034   0xA901             ADD      R1,SP,#+4
   \   00000036   0xB084             SUB      SP,SP,#+16
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x2214             MOVS     R2,#+20
   \   0000003C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000040   0xBC0F             POP      {R0-R3}
   \   00000042   0x.... 0x....      BL       LPLD_ADC_Init
     27          
     28              LPLD_ADC_Chn_Enable(BATTERY_ADC_PORT, BATTERY_ADC_PIN);
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x....             LDR.N    R0,??DataTable2  ;; 0x4003b000
   \   0000004A   0x.... 0x....      BL       LPLD_ADC_Chn_Enable
     29          
     30              LPLD_ADC_EnableIrq(battery_voltage_adc_init_struct);
   \   0000004E   0xA901             ADD      R1,SP,#+4
   \   00000050   0xB084             SUB      SP,SP,#+16
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x2214             MOVS     R2,#+20
   \   00000056   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000005A   0xBC0F             POP      {R0-R3}
   \   0000005C   0x.... 0x....      BL       LPLD_ADC_EnableIrq
     31              
     32              TriggerBatteryADC();
   \   00000060   0x.... 0x....      BL       TriggerBatteryADC
     33          }
   \   00000064   0xB007             ADD      SP,SP,#+28
   \   00000066   0xBD00             POP      {PC}             ;; return
     34          

   \                                 In section .text, align 4, keep-with-next
     35          void BatteryVoltageADCIsr(void)
     36          {
     37              uint16 adc_result = 0;
   \                     BatteryVoltageADCIsr:
   \   00000000   0x2000             MOVS     R0,#+0
     38          
     39              adc_result = BATTERY_ADC_PORT->R[0];
   \   00000002   0x....             LDR.N    R1,??DataTable2_1  ;; 0x4003b010
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x0008             MOVS     R0,R1
     40              
     41              g_battery_voltage = (uint16)(((uint32)adc_result * REFERANCE_VOL * AMPLIFIED_RATE)/ BATTERY_ADC_MAX_VALUE);
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0xF240 0x71BC      MOVW     R1,#+1980
   \   0000000E   0xFB01 0xF100      MUL      R1,R1,R0
   \   00000012   0x0C09             LSRS     R1,R1,#+16
   \   00000014   0x....             LDR.N    R2,??DataTable2_2
   \   00000016   0x8011             STRH     R1,[R2, #+0]
     42          }
   \   00000018   0x4770             BX       LR               ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void TriggerADC(ADC_Type *adcx, AdcChnEnum_Type chn)
     45          {
     46              adcx->SC1[0] |= ADC_SC1_AIEN_MASK;
   \                     TriggerADC:
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0xF052 0x0240      ORRS     R2,R2,#0x40
   \   00000006   0x6002             STR      R2,[R0, #+0]
     47              adcx->SC1[0] &= ~(ADC_SC1_ADCH_MASK);
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x0952             LSRS     R2,R2,#+5
   \   0000000C   0x0152             LSLS     R2,R2,#+5
   \   0000000E   0x6002             STR      R2,[R0, #+0]
     48              adcx->SC1[0] |= ADC_SC1_ADCH(chn);    
   \   00000010   0x6802             LDR      R2,[R0, #+0]
   \   00000012   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000014   0xF011 0x031F      ANDS     R3,R1,#0x1F
   \   00000018   0x431A             ORRS     R2,R3,R2
   \   0000001A   0x6002             STR      R2,[R0, #+0]
     49          }
   \   0000001C   0x4770             BX       LR               ;; return
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void TriggerBatteryADC(void)
     52          {
   \                     TriggerBatteryADC:
   \   00000000   0xB580             PUSH     {R7,LR}
     53              TriggerADC(BATTERY_ADC_PORT, BATTERY_ADC_PIN);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x....             LDR.N    R0,??DataTable2  ;; 0x4003b000
   \   00000006   0x.... 0x....      BL       TriggerADC
     54          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4003B000         DC32     0x4003b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4003B010         DC32     0x4003b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     g_battery_voltage

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  BatteryVoltageADCIsr
       48  InitBatteryVoltageMeasurement
             32 -> LPLD_ADC_Chn_Enable
             32 -> LPLD_ADC_EnableIrq
             32 -> LPLD_ADC_Init
             32 -> TriggerBatteryADC
             32 -> __aeabi_memclr4
             48 -> __aeabi_memcpy4
        0  TriggerADC
        8  TriggerBatteryADC
              8 -> TriggerADC


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant {(ADC_Type *)0}>
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      26  BatteryVoltageADCIsr
     104  InitBatteryVoltageMeasurement
      30  TriggerADC
      12  TriggerBatteryADC
       2  g_battery_voltage

 
   2 bytes in section .bss
  20 bytes in section .rodata
 184 bytes in section .text
 
 184 bytes of CODE  memory
  20 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
