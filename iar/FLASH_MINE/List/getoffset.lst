###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:20 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\getoffset.c                                #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\getoffset.c -D LPLD_K60 -lCN               #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\getoffset.lst                                   #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\getoffset.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\SignalProcess\getoffset.c
      1          /****************************************************************************** 
      2           *       getoffset.c ----- Get the offset of sensors          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  getoffset.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/4 20:31:16                                                       *
     10           ******************************************************************************/
     11          #include "getoffset.h"
     12          

   \                                 In section .data, align 4
     13          int16 g_i16AccOffset[3] = {-200, 180, 0};
   \                     g_i16AccOffset:
   \   00000000   0xFF38 0x00B4      DC16 -200, 180, 0
   \              0x0000       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 4
     14          int16 g_i16GyrOffset[3] = {3,42,-16};
   \                     g_i16GyrOffset:
   \   00000000   0x0003 0x002A      DC16 3, 42, -16
   \              0xFFF0       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .bss, align 4
     15          int16 g_i16MagOffset[3] = {0,0,0};
   \                     g_i16MagOffset:
   \   00000000                      DS8 8
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void GetAccOffset(void)
     18          {
   \                     GetAccOffset:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     19              int i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     20              int j = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     21              int32 acc_offset_record_sum[3] = {0,0,0};
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0xC00E             STM      R0!,{R1-R3}
   \   00000010   0x380C             SUBS     R0,R0,#+12
     22          
     23              for(i = 0; i < ACC_OFFSET_SAMPLE_AMOUNT; i++)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x0004             MOVS     R4,R0
   \                     ??GetAccOffset_0:
   \   00000016   0x2CC8             CMP      R4,#+200
   \   00000018   0xDA14             BGE.N    ??GetAccOffset_1
     24              {
     25                  g_u32TimerMsCnt = 0;        
   \   0000001A   0x....             LDR.N    R0,??DataTable2
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     26                  acc_offset_record_sum[0] = MPU6050_GetData(MPU6050_ACCEL_XOUT_H);
   \   00000020   0x203B             MOVS     R0,#+59
   \   00000022   0x.... 0x....      BL       MPU6050_GetData
   \   00000026   0x9000             STR      R0,[SP, #+0]
     27                  acc_offset_record_sum[1] = MPU6050_GetData(MPU6050_ACCEL_YOUT_H);
   \   00000028   0x203D             MOVS     R0,#+61
   \   0000002A   0x.... 0x....      BL       MPU6050_GetData
   \   0000002E   0x9001             STR      R0,[SP, #+4]
     28                  acc_offset_record_sum[2] = MPU6050_GetData(MPU6050_ACCEL_ZOUT_H);
   \   00000030   0x203F             MOVS     R0,#+63
   \   00000032   0x.... 0x....      BL       MPU6050_GetData
   \   00000036   0x9002             STR      R0,[SP, #+8]
     29                  while(g_u32TimerMsCnt < ACC_OFFSET_SAMPLE_PERIOD_MS);
   \                     ??GetAccOffset_2:
   \   00000038   0x....             LDR.N    R0,??DataTable2
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x280A             CMP      R0,#+10
   \   0000003E   0xD3FB             BCC.N    ??GetAccOffset_2
     30              }
   \   00000040   0x1C64             ADDS     R4,R4,#+1
   \   00000042   0xE7E8             B.N      ??GetAccOffset_0
     31          
     32              for(j = 0; j < 3; j++)
   \                     ??GetAccOffset_1:
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x0005             MOVS     R5,R0
   \                     ??GetAccOffset_3:
   \   00000048   0x2D03             CMP      R5,#+3
   \   0000004A   0xDA0A             BGE.N    ??GetAccOffset_4
     33              {
     34                  g_i16AccOffset[j] = acc_offset_record_sum[j] / ACC_OFFSET_SAMPLE_AMOUNT;
   \   0000004C   0xA800             ADD      R0,SP,#+0
   \   0000004E   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000052   0x21C8             MOVS     R1,#+200
   \   00000054   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000058   0x....             LDR.N    R1,??DataTable2_1
   \   0000005A   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
     35              }
   \   0000005E   0x1C6D             ADDS     R5,R5,#+1
   \   00000060   0xE7F2             B.N      ??GetAccOffset_3
     36          }
   \                     ??GetAccOffset_4:
   \   00000062   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void GetGyrOffset(void)
     39          {
   \                     GetGyrOffset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
     40              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     41              int j = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     42              int32 gyr_offset_record_sum[3] = {0,0,0};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0xC00E             STM      R0!,{R1-R3}
   \   00000012   0x380C             SUBS     R0,R0,#+12
     43          
     44              for(i = 0; i < ACC_OFFSET_SAMPLE_AMOUNT; i++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0004             MOVS     R4,R0
   \                     ??GetGyrOffset_0:
   \   00000018   0x2CC8             CMP      R4,#+200
   \   0000001A   0xDA1D             BGE.N    ??GetGyrOffset_1
     45              {
     46                  g_u32TimerMsCnt = 0;            
   \   0000001C   0x....             LDR.N    R0,??DataTable2
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x6001             STR      R1,[R0, #+0]
     47                  gyr_offset_record_sum[0] += MPU6050_GetData(MPU6050_GYRO_XOUT_H);
   \   00000022   0x9E00             LDR      R6,[SP, #+0]
   \   00000024   0x2043             MOVS     R0,#+67
   \   00000026   0x.... 0x....      BL       MPU6050_GetData
   \   0000002A   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000002E   0x9000             STR      R0,[SP, #+0]
     48                  gyr_offset_record_sum[1] += MPU6050_GetData(MPU6050_GYRO_YOUT_H);
   \   00000030   0x9E01             LDR      R6,[SP, #+4]
   \   00000032   0x2045             MOVS     R0,#+69
   \   00000034   0x.... 0x....      BL       MPU6050_GetData
   \   00000038   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000003C   0x9001             STR      R0,[SP, #+4]
     49                  gyr_offset_record_sum[2] += MPU6050_GetData(MPU6050_GYRO_ZOUT_H);
   \   0000003E   0x9E02             LDR      R6,[SP, #+8]
   \   00000040   0x2047             MOVS     R0,#+71
   \   00000042   0x.... 0x....      BL       MPU6050_GetData
   \   00000046   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000004A   0x9002             STR      R0,[SP, #+8]
     50                  while(g_u32TimerMsCnt < GYR_OFFSET_SAMPLE_PERIOD_MS);
   \                     ??GetGyrOffset_2:
   \   0000004C   0x....             LDR.N    R0,??DataTable2
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x280A             CMP      R0,#+10
   \   00000052   0xD3FB             BCC.N    ??GetGyrOffset_2
     51              }
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \   00000056   0xE7DF             B.N      ??GetGyrOffset_0
     52          
     53              for(j = 0; j < 3; j++)
   \                     ??GetGyrOffset_1:
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x0005             MOVS     R5,R0
   \                     ??GetGyrOffset_3:
   \   0000005C   0x2D03             CMP      R5,#+3
   \   0000005E   0xDA0A             BGE.N    ??GetGyrOffset_4
     54              {
     55                  g_i16GyrOffset[j] = gyr_offset_record_sum[j] / GYR_OFFSET_SAMPLE_AMOUNT;
   \   00000060   0xA800             ADD      R0,SP,#+0
   \   00000062   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000066   0x21C8             MOVS     R1,#+200
   \   00000068   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000006C   0x....             LDR.N    R1,??DataTable2_2
   \   0000006E   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
     56              }
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \   00000074   0xE7F2             B.N      ??GetGyrOffset_3
     57          }
   \                     ??GetGyrOffset_4:
   \   00000076   0xBD7F             POP      {R0-R6,PC}       ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void GetAccGyrOffset(void)
     60          {
   \                     GetAccGyrOffset:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
     61              int i = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     62              int j = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     63              int32 acc_offset_record_sum[3] = {0,0,0};
   \   00000008   0xA803             ADD      R0,SP,#+12
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0xC00E             STM      R0!,{R1-R3}
   \   00000012   0x380C             SUBS     R0,R0,#+12
     64              int32 gyr_offset_record_sum[3] = {0,0,0};
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xC00E             STM      R0!,{R1-R3}
   \   0000001E   0x380C             SUBS     R0,R0,#+12
     65          
     66              for(i = 0; i < (ACC_OFFSET_SAMPLE_AMOUNT>GYR_OFFSET_SAMPLE_AMOUNT?ACC_OFFSET_SAMPLE_AMOUNT:GYR_OFFSET_SAMPLE_AMOUNT) ; i++)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x0004             MOVS     R4,R0
   \                     ??GetAccGyrOffset_0:
   \   00000024   0x2CC8             CMP      R4,#+200
   \   00000026   0xDA36             BGE.N    ??GetAccGyrOffset_1
     67              {
     68                  g_u32TimerMsCnt = 0;        
   \   00000028   0x....             LDR.N    R0,??DataTable2
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x6001             STR      R1,[R0, #+0]
     69                  if(i < ACC_OFFSET_SAMPLE_AMOUNT)
   \   0000002E   0x2CC8             CMP      R4,#+200
   \   00000030   0xDA14             BGE.N    ??GetAccGyrOffset_2
     70                  {
     71                      acc_offset_record_sum[0] += MPU6050_GetData(MPU6050_ACCEL_XOUT_H);
   \   00000032   0x9E03             LDR      R6,[SP, #+12]
   \   00000034   0x203B             MOVS     R0,#+59
   \   00000036   0x.... 0x....      BL       MPU6050_GetData
   \   0000003A   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000003E   0x9003             STR      R0,[SP, #+12]
     72                      acc_offset_record_sum[1] += MPU6050_GetData(MPU6050_ACCEL_YOUT_H);
   \   00000040   0x9E04             LDR      R6,[SP, #+16]
   \   00000042   0x203D             MOVS     R0,#+61
   \   00000044   0x.... 0x....      BL       MPU6050_GetData
   \   00000048   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000004C   0x9004             STR      R0,[SP, #+16]
     73                      acc_offset_record_sum[2] += MPU6050_GetData(MPU6050_ACCEL_ZOUT_H);
   \   0000004E   0x9E05             LDR      R6,[SP, #+20]
   \   00000050   0x203F             MOVS     R0,#+63
   \   00000052   0x.... 0x....      BL       MPU6050_GetData
   \   00000056   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000005A   0x9005             STR      R0,[SP, #+20]
     74                  }
     75                  if(i < GYR_OFFSET_SAMPLE_AMOUNT)
   \                     ??GetAccGyrOffset_2:
   \   0000005C   0x2CC8             CMP      R4,#+200
   \   0000005E   0xDA14             BGE.N    ??GetAccGyrOffset_3
     76                  {
     77                      gyr_offset_record_sum[0] += MPU6050_GetData(MPU6050_GYRO_XOUT_H);
   \   00000060   0x9E00             LDR      R6,[SP, #+0]
   \   00000062   0x2043             MOVS     R0,#+67
   \   00000064   0x.... 0x....      BL       MPU6050_GetData
   \   00000068   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000006C   0x9000             STR      R0,[SP, #+0]
     78                      gyr_offset_record_sum[1] += MPU6050_GetData(MPU6050_GYRO_YOUT_H);
   \   0000006E   0x9E01             LDR      R6,[SP, #+4]
   \   00000070   0x2045             MOVS     R0,#+69
   \   00000072   0x.... 0x....      BL       MPU6050_GetData
   \   00000076   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   0000007A   0x9001             STR      R0,[SP, #+4]
     79                      gyr_offset_record_sum[2] += MPU6050_GetData(MPU6050_GYRO_ZOUT_H);   
   \   0000007C   0x9E02             LDR      R6,[SP, #+8]
   \   0000007E   0x2047             MOVS     R0,#+71
   \   00000080   0x.... 0x....      BL       MPU6050_GetData
   \   00000084   0xFA06 0xF080      SXTAH    R0,R6,R0
   \   00000088   0x9002             STR      R0,[SP, #+8]
     80                  }
     81                  while(g_u32TimerMsCnt < (ACC_OFFSET_SAMPLE_PERIOD_MS>GYR_OFFSET_SAMPLE_PERIOD_MS?ACC_OFFSET_SAMPLE_PERIOD_MS:GYR_OFFSET_SAMPLE_PERIOD_MS) );
   \                     ??GetAccGyrOffset_3:
   \   0000008A   0x....             LDR.N    R0,??DataTable2
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x280A             CMP      R0,#+10
   \   00000090   0xD3FB             BCC.N    ??GetAccGyrOffset_3
     82              }
   \   00000092   0x1C64             ADDS     R4,R4,#+1
   \   00000094   0xE7C6             B.N      ??GetAccGyrOffset_0
     83          
     84              for(j = 0; j < 3; j++)
   \                     ??GetAccGyrOffset_1:
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x0005             MOVS     R5,R0
   \                     ??GetAccGyrOffset_4:
   \   0000009A   0x2D03             CMP      R5,#+3
   \   0000009C   0xDA13             BGE.N    ??GetAccGyrOffset_5
     85              {
     86                  g_i16AccOffset[j] = acc_offset_record_sum[j] / ACC_OFFSET_SAMPLE_AMOUNT;
   \   0000009E   0xA803             ADD      R0,SP,#+12
   \   000000A0   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   000000A4   0x21C8             MOVS     R1,#+200
   \   000000A6   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000AA   0x....             LDR.N    R1,??DataTable2_1
   \   000000AC   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
     87                  g_i16GyrOffset[j] = gyr_offset_record_sum[j] / GYR_OFFSET_SAMPLE_AMOUNT;        
   \   000000B0   0xA800             ADD      R0,SP,#+0
   \   000000B2   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   000000B6   0x21C8             MOVS     R1,#+200
   \   000000B8   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000BC   0x....             LDR.N    R1,??DataTable2_2
   \   000000BE   0xF821 0x0015      STRH     R0,[R1, R5, LSL #+1]
     88              }
   \   000000C2   0x1C6D             ADDS     R5,R5,#+1
   \   000000C4   0xE7E9             B.N      ??GetAccGyrOffset_4
     89          }
   \                     ??GetAccGyrOffset_5:
   \   000000C6   0xB006             ADD      SP,SP,#+24
   \   000000C8   0xBD70             POP      {R4-R6,PC}       ;; return
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void GetAccGyrOffsetOpe(void)
     92          {
   \                     GetAccGyrOffsetOpe:
   \   00000000   0xB580             PUSH     {R7,LR}
     93          #ifdef GET_OFFSET_WITH_BUZZER_HINT
     94              SetBuzzerMode(2);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       SetBuzzerMode
     95              DelayWithTimer(GET_OFFSET_HINT_TIME_MS);
   \   00000008   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000000C   0x.... 0x....      BL       DelayWithTimer
     96              SetBuzzerMode(1);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       SetBuzzerMode
     97              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
   \   00000016   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001A   0x.... 0x....      BL       DelayWithTimer
     98              SetBuzzerMode(0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       SetBuzzerMode
     99              GetAccGyrOffset();
   \   00000024   0x.... 0x....      BL       GetAccGyrOffset
    100              SetBuzzerMode(1);
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       SetBuzzerMode
    101              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
   \   0000002E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000032   0x.... 0x....      BL       DelayWithTimer
    102              SetBuzzerMode(0);        
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       SetBuzzerMode
    103          #else
    104              DelayWithTimer(GET_OFFSET_HINT_TIME_MS);
    105              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
    106              GetAccGyrOffset();
    107              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
    108          #endif
    109          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
    110          

   \                                 In section .text, align 2, keep-with-next
    111          void GetAccOffsetOpe(void)
    112          {
   \                     GetAccOffsetOpe:
   \   00000000   0xB580             PUSH     {R7,LR}
    113          #ifdef GET_OFFSET_WITH_BUZZER_HINT
    114              SetBuzzerMode(2);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       SetBuzzerMode
    115              DelayWithTimer(GET_OFFSET_HINT_TIME_MS);
   \   00000008   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000000C   0x.... 0x....      BL       DelayWithTimer
    116              SetBuzzerMode(1);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       SetBuzzerMode
    117              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
   \   00000016   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001A   0x.... 0x....      BL       DelayWithTimer
    118              SetBuzzerMode(0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       SetBuzzerMode
    119              GetAccGyrOffset();
   \   00000024   0x.... 0x....      BL       GetAccGyrOffset
    120              SetBuzzerMode(1);
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       SetBuzzerMode
    121              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
   \   0000002E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000032   0x.... 0x....      BL       DelayWithTimer
    122              SetBuzzerMode(0);        
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       SetBuzzerMode
    123          #else
    124              DelayWithTimer(GET_OFFSET_HINT_TIME_MS);
    125              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
    126              GetAccOffset();
    127              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
    128          #endif
    129          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void GetGyrOffsetOpe(void)
    132          {
   \                     GetGyrOffsetOpe:
   \   00000000   0xB580             PUSH     {R7,LR}
    133          #ifdef GET_OFFSET_WITH_BUZZER_HINT
    134              SetBuzzerMode(2);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       SetBuzzerMode
    135              DelayWithTimer(GET_OFFSET_HINT_TIME_MS);
   \   00000008   0xF640 0x30B8      MOVW     R0,#+3000
   \   0000000C   0x.... 0x....      BL       DelayWithTimer
    136              SetBuzzerMode(1);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       SetBuzzerMode
    137              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
   \   00000016   0xF44F 0x707A      MOV      R0,#+1000
   \   0000001A   0x.... 0x....      BL       DelayWithTimer
    138              SetBuzzerMode(0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       SetBuzzerMode
    139              GetAccGyrOffset();
   \   00000024   0x.... 0x....      BL       GetAccGyrOffset
    140              SetBuzzerMode(1);
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       SetBuzzerMode
    141              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
   \   0000002E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000032   0x.... 0x....      BL       DelayWithTimer
    142              SetBuzzerMode(0);        
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      BL       SetBuzzerMode
    143          #else
    144              DelayWithTimer(GET_OFFSET_HINT_TIME_MS);
    145              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
    146              GetGyrOffset();
    147              DelayWithTimer(GET_OFFSET_WARNING_TIME_MS);
    148          #endif
    149          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     g_u32TimerMsCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     g_i16AccOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     g_i16GyrOffset

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  GetAccGyrOffset
             40 -> MPU6050_GetData
        8  GetAccGyrOffsetOpe
              8 -> DelayWithTimer
              8 -> GetAccGyrOffset
              8 -> SetBuzzerMode
       24  GetAccOffset
             24 -> MPU6050_GetData
        8  GetAccOffsetOpe
              8 -> DelayWithTimer
              8 -> GetAccGyrOffset
              8 -> SetBuzzerMode
       32  GetGyrOffset
             32 -> MPU6050_GetData
        8  GetGyrOffsetOpe
              8 -> DelayWithTimer
              8 -> GetAccGyrOffset
              8 -> SetBuzzerMode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {0, 0, 0}>
      12  ?<Constant {0, 0, 0}>_1
      12  ?<Constant {0, 0, 0}>_2
      12  ?<Constant {0, 0, 0}>_3
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
     202  GetAccGyrOffset
      62  GetAccGyrOffsetOpe
     100  GetAccOffset
      62  GetAccOffsetOpe
     120  GetGyrOffset
      62  GetGyrOffsetOpe
       8  g_i16AccOffset
       8  g_i16GyrOffset
       8  g_i16MagOffset

 
   8 bytes in section .bss
  16 bytes in section .data
  48 bytes in section .rodata
 620 bytes in section .text
 
 620 bytes of CODE  memory
  48 bytes of CONST memory
  24 bytes of DATA  memory

Errors: none
Warnings: none
