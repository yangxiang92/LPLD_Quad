###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:15 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    Algorithm\quaternion.c                                   #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    Algorithm\quaternion.c -D LPLD_K60 -lCN                  #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\quaternion.lst                                  #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\quaternion.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\Algorithm\quaternion.c
      1          //     Copyright (c) 2013 js200300953@qq.com All rights reserved.
      2          //         ==================================================
      3          //         ========圆点博士微型四轴飞行器配套软件声明========
      4          //         ==================================================
      5          //     圆点博士微型四轴飞行器配套软件包括上位机程序、下位机Bootloader
      6          // 、下位机App和遥控程序，及它们的源代码，以下总称“软件”。
      7          //     软件仅提供参考，js200300953不对软件作任何担保，不对因使用该软件
      8          // 而出现的损失负责。
      9          //     软件可以以学习为目的修改和使用，但不允许以商业的目的使用该软件。
     10          //     修改该软件时，必须保留原版权声明。
     11          // 
     12          //     更多资料见：
     13          // http://blog.sina.com.cn/js200300953
     14          // http://www.etootle.com/
     15          // http://www.eeboard.com/bbs/forum-98-1.html#separatorline
     16          // 圆点博士微型四轴飞行器QQ群：276721324
     17          
     18          /* math/quaternion.c
     19           * 2012-11-7 18:27:01
     20           * js200300953
     21           */
     22          
     23          #include "quaternion.h"
     24          #include <math.h>
     25          
     26          void quaternion_normalize(quaternion * q);
     27          void quaternion_mult(quaternion * result,const quaternion * left,const quaternion * right);
     28          void quaternion_rotateVector(const quaternion * rotation,const float from[3],float to[3]);
     29          void quaternion_fromTwoVectorRotation(quaternion * result,const float from[3],const float to[3]);
     30          void quaternion_fromFourVectorRotation(quaternion * result,const float from1[3],
     31              const float to1[3],const float from2[3],const float to2[3]);
     32          
     33          // 快速算“平方根的倒数”。
     34          // http://zh.wikipedia.org/wiki/%E5%B9%B3%E6%96%B9%E6%A0%B9%E5%80%92%E6%95%B0%E9%80%9F%E7%AE%97%E6%B3%95

   \                                 In section .text, align 2, keep-with-next
     35          float math_rsqrt(float number)
     36          {
   \                     math_rsqrt:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
     37              long i;
     38              float x2, y;
     39              const float threehalfs = 1.5F;
   \   00000006   0xF05F 0x587F      MOVS     R8,#+1069547520
     40          
     41              x2 = number * 0.5F;
   \   0000000A   0xF05F 0x507C      MOVS     R0,#+1056964608
   \   0000000E   0x0021             MOVS     R1,R4
   \   00000010   0x.... 0x....      BL       __aeabi_fmul
   \   00000014   0x0006             MOVS     R6,R0
     42              y  = number;
   \   00000016   0x0027             MOVS     R7,R4
     43              i  = * ( long * ) &y;                       // evil floating point bit level hacking（对浮点数的邪恶位级hack）
   \   00000018   0x003D             MOVS     R5,R7
     44              i  = 0x5f3759df - ( i >> 1 );               // what the fuck?（这他妈的是怎么回事？）
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable2  ;; 0x5f3759df
   \   0000001E   0xEBB0 0x0565      SUBS     R5,R0,R5, ASR #+1
     45              y  = * ( float * ) &i;
   \   00000022   0x002F             MOVS     R7,R5
     46              y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration （第一次牛顿迭代）
   \   00000024   0x0030             MOVS     R0,R6
   \   00000026   0x0039             MOVS     R1,R7
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x0039             MOVS     R1,R7
   \   0000002E   0x.... 0x....      BL       __aeabi_fmul
   \   00000032   0x0001             MOVS     R1,R0
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0x.... 0x....      BL       __aeabi_fsub
   \   0000003A   0x0039             MOVS     R1,R7
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x0007             MOVS     R7,R0
     47              y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed（第二次迭代，可以删除）
   \   00000042   0x0030             MOVS     R0,R6
   \   00000044   0x0039             MOVS     R1,R7
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x0039             MOVS     R1,R7
   \   0000004C   0x.... 0x....      BL       __aeabi_fmul
   \   00000050   0x0001             MOVS     R1,R0
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       __aeabi_fsub
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0x.... 0x....      BL       __aeabi_fmul
   \   0000005E   0x0007             MOVS     R7,R0
     48          
     49              return y;
   \   00000060   0x0038             MOVS     R0,R7
   \   00000062   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void math_vector_cross(float result[3],const float left[3],const float right[3])
     53          {
   \                     math_vector_cross:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     54              result[0] = left[1]*right[2] - left[2]*right[1];
   \   00000008   0x6869             LDR      R1,[R5, #+4]
   \   0000000A   0x68B0             LDR      R0,[R6, #+8]
   \   0000000C   0x.... 0x....      BL       __aeabi_fmul
   \   00000010   0x0007             MOVS     R7,R0
   \   00000012   0x68A9             LDR      R1,[R5, #+8]
   \   00000014   0x6870             LDR      R0,[R6, #+4]
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x.... 0x....      BL       __aeabi_fsub
   \   00000022   0x6020             STR      R0,[R4, #+0]
     55              result[1] = left[2]*right[0] - left[0]*right[2];
   \   00000024   0x68A9             LDR      R1,[R5, #+8]
   \   00000026   0x6830             LDR      R0,[R6, #+0]
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x0007             MOVS     R7,R0
   \   0000002E   0x6829             LDR      R1,[R5, #+0]
   \   00000030   0x68B0             LDR      R0,[R6, #+8]
   \   00000032   0x.... 0x....      BL       __aeabi_fmul
   \   00000036   0x0001             MOVS     R1,R0
   \   00000038   0x0038             MOVS     R0,R7
   \   0000003A   0x.... 0x....      BL       __aeabi_fsub
   \   0000003E   0x6060             STR      R0,[R4, #+4]
     56              result[2] = left[0]*right[1] - left[1]*right[0];
   \   00000040   0x6829             LDR      R1,[R5, #+0]
   \   00000042   0x6870             LDR      R0,[R6, #+4]
   \   00000044   0x.... 0x....      BL       __aeabi_fmul
   \   00000048   0x0007             MOVS     R7,R0
   \   0000004A   0x6869             LDR      R1,[R5, #+4]
   \   0000004C   0x6830             LDR      R0,[R6, #+0]
   \   0000004E   0x.... 0x....      BL       __aeabi_fmul
   \   00000052   0x0001             MOVS     R1,R0
   \   00000054   0x0038             MOVS     R0,R7
   \   00000056   0x.... 0x....      BL       __aeabi_fsub
   \   0000005A   0x60A0             STR      R0,[R4, #+8]
     57          }
   \   0000005C   0xBDF0             POP      {R4-R7,PC}       ;; return
     58          

   \                                 In section .text, align 2, keep-with-next
     59          void quaternion_loadIdentity(quaternion * q)
     60          {
     61              q->w = 1;
   \                     quaternion_loadIdentity:
   \   00000000   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000004   0x6001             STR      R1,[R0, #+0]
     62              q->x = q->y = q->z = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x60C1             STR      R1,[R0, #+12]
   \   0000000A   0x6081             STR      R1,[R0, #+8]
   \   0000000C   0x6041             STR      R1,[R0, #+4]
     63          }
   \   0000000E   0x4770             BX       LR               ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void quaternion_normalize(quaternion * q)
     66          {
   \                     quaternion_normalize:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     67              float norm_r = math_rsqrt(q->w*q->w + q->x*q->x + q->y*q->y + q->z*q->z);
   \   00000004   0x6821             LDR      R1,[R4, #+0]
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      BL       __aeabi_fmul
   \   0000000C   0x0005             MOVS     R5,R0
   \   0000000E   0x6861             LDR      R1,[R4, #+4]
   \   00000010   0x6860             LDR      R0,[R4, #+4]
   \   00000012   0x.... 0x....      BL       __aeabi_fmul
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x.... 0x....      BL       __aeabi_fadd
   \   0000001C   0x0005             MOVS     R5,R0
   \   0000001E   0x68A1             LDR      R1,[R4, #+8]
   \   00000020   0x68A0             LDR      R0,[R4, #+8]
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x0005             MOVS     R5,R0
   \   0000002E   0x68E1             LDR      R1,[R4, #+12]
   \   00000030   0x68E0             LDR      R0,[R4, #+12]
   \   00000032   0x.... 0x....      BL       __aeabi_fmul
   \   00000036   0x0029             MOVS     R1,R5
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0x.... 0x....      BL       math_rsqrt
   \   00000040   0x0005             MOVS     R5,R0
     68              q->w *= norm_r;
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x0029             MOVS     R1,R5
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x6020             STR      R0,[R4, #+0]
     69              q->x *= norm_r;
   \   0000004C   0x6860             LDR      R0,[R4, #+4]
   \   0000004E   0x0029             MOVS     R1,R5
   \   00000050   0x.... 0x....      BL       __aeabi_fmul
   \   00000054   0x6060             STR      R0,[R4, #+4]
     70              q->y *= norm_r;
   \   00000056   0x68A0             LDR      R0,[R4, #+8]
   \   00000058   0x0029             MOVS     R1,R5
   \   0000005A   0x.... 0x....      BL       __aeabi_fmul
   \   0000005E   0x60A0             STR      R0,[R4, #+8]
     71              q->z *= norm_r;
   \   00000060   0x68E0             LDR      R0,[R4, #+12]
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0x.... 0x....      BL       __aeabi_fmul
   \   00000068   0x60E0             STR      R0,[R4, #+12]
     72          }
   \   0000006A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     73          
     74          // 四元数相乘
     75          // left   : 被乘数，输入。
     76          // right  : 乘数，输入。
     77          // result : 积，输出。

   \                                 In section .text, align 2, keep-with-next
     78          void quaternion_mult(quaternion * result,const quaternion * left,const quaternion * right)
     79          {
   \                     quaternion_mult:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     80              result->w = left->w * right->w - left->x * right->x - left->y * right->y - left->z * right->z;
   \   00000008   0x6829             LDR      R1,[R5, #+0]
   \   0000000A   0x6830             LDR      R0,[R6, #+0]
   \   0000000C   0x.... 0x....      BL       __aeabi_fmul
   \   00000010   0x0007             MOVS     R7,R0
   \   00000012   0x6869             LDR      R1,[R5, #+4]
   \   00000014   0x6870             LDR      R0,[R6, #+4]
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x.... 0x....      BL       __aeabi_fsub
   \   00000022   0x0007             MOVS     R7,R0
   \   00000024   0x68A9             LDR      R1,[R5, #+8]
   \   00000026   0x68B0             LDR      R0,[R6, #+8]
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x0001             MOVS     R1,R0
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       __aeabi_fsub
   \   00000034   0x0007             MOVS     R7,R0
   \   00000036   0x68E9             LDR      R1,[R5, #+12]
   \   00000038   0x68F0             LDR      R0,[R6, #+12]
   \   0000003A   0x.... 0x....      BL       __aeabi_fmul
   \   0000003E   0x0001             MOVS     R1,R0
   \   00000040   0x0038             MOVS     R0,R7
   \   00000042   0x.... 0x....      BL       __aeabi_fsub
   \   00000046   0x6020             STR      R0,[R4, #+0]
     81              result->x = left->x * right->w + left->w * right->x + left->y * right->z - left->z * right->y;
   \   00000048   0x6869             LDR      R1,[R5, #+4]
   \   0000004A   0x6830             LDR      R0,[R6, #+0]
   \   0000004C   0x.... 0x....      BL       __aeabi_fmul
   \   00000050   0x0007             MOVS     R7,R0
   \   00000052   0x6829             LDR      R1,[R5, #+0]
   \   00000054   0x6870             LDR      R0,[R6, #+4]
   \   00000056   0x.... 0x....      BL       __aeabi_fmul
   \   0000005A   0x0039             MOVS     R1,R7
   \   0000005C   0x.... 0x....      BL       __aeabi_fadd
   \   00000060   0x0007             MOVS     R7,R0
   \   00000062   0x68A9             LDR      R1,[R5, #+8]
   \   00000064   0x68F0             LDR      R0,[R6, #+12]
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x0039             MOVS     R1,R7
   \   0000006C   0x.... 0x....      BL       __aeabi_fadd
   \   00000070   0x0007             MOVS     R7,R0
   \   00000072   0x68E9             LDR      R1,[R5, #+12]
   \   00000074   0x68B0             LDR      R0,[R6, #+8]
   \   00000076   0x.... 0x....      BL       __aeabi_fmul
   \   0000007A   0x0001             MOVS     R1,R0
   \   0000007C   0x0038             MOVS     R0,R7
   \   0000007E   0x.... 0x....      BL       __aeabi_fsub
   \   00000082   0x6060             STR      R0,[R4, #+4]
     82              result->y = left->y * right->w + left->w * right->y + left->z * right->x - left->x * right->z;
   \   00000084   0x68A9             LDR      R1,[R5, #+8]
   \   00000086   0x6830             LDR      R0,[R6, #+0]
   \   00000088   0x.... 0x....      BL       __aeabi_fmul
   \   0000008C   0x0007             MOVS     R7,R0
   \   0000008E   0x6829             LDR      R1,[R5, #+0]
   \   00000090   0x68B0             LDR      R0,[R6, #+8]
   \   00000092   0x.... 0x....      BL       __aeabi_fmul
   \   00000096   0x0039             MOVS     R1,R7
   \   00000098   0x.... 0x....      BL       __aeabi_fadd
   \   0000009C   0x0007             MOVS     R7,R0
   \   0000009E   0x68E9             LDR      R1,[R5, #+12]
   \   000000A0   0x6870             LDR      R0,[R6, #+4]
   \   000000A2   0x.... 0x....      BL       __aeabi_fmul
   \   000000A6   0x0039             MOVS     R1,R7
   \   000000A8   0x.... 0x....      BL       __aeabi_fadd
   \   000000AC   0x0007             MOVS     R7,R0
   \   000000AE   0x6869             LDR      R1,[R5, #+4]
   \   000000B0   0x68F0             LDR      R0,[R6, #+12]
   \   000000B2   0x.... 0x....      BL       __aeabi_fmul
   \   000000B6   0x0001             MOVS     R1,R0
   \   000000B8   0x0038             MOVS     R0,R7
   \   000000BA   0x.... 0x....      BL       __aeabi_fsub
   \   000000BE   0x60A0             STR      R0,[R4, #+8]
     83              result->z = left->z * right->w + left->w * right->z + left->x * right->y - left->y * right->x;
   \   000000C0   0x68E9             LDR      R1,[R5, #+12]
   \   000000C2   0x6830             LDR      R0,[R6, #+0]
   \   000000C4   0x.... 0x....      BL       __aeabi_fmul
   \   000000C8   0x0007             MOVS     R7,R0
   \   000000CA   0x6829             LDR      R1,[R5, #+0]
   \   000000CC   0x68F0             LDR      R0,[R6, #+12]
   \   000000CE   0x.... 0x....      BL       __aeabi_fmul
   \   000000D2   0x0039             MOVS     R1,R7
   \   000000D4   0x.... 0x....      BL       __aeabi_fadd
   \   000000D8   0x0007             MOVS     R7,R0
   \   000000DA   0x6869             LDR      R1,[R5, #+4]
   \   000000DC   0x68B0             LDR      R0,[R6, #+8]
   \   000000DE   0x.... 0x....      BL       __aeabi_fmul
   \   000000E2   0x0039             MOVS     R1,R7
   \   000000E4   0x.... 0x....      BL       __aeabi_fadd
   \   000000E8   0x0007             MOVS     R7,R0
   \   000000EA   0x68A9             LDR      R1,[R5, #+8]
   \   000000EC   0x6870             LDR      R0,[R6, #+4]
   \   000000EE   0x.... 0x....      BL       __aeabi_fmul
   \   000000F2   0x0001             MOVS     R1,R0
   \   000000F4   0x0038             MOVS     R0,R7
   \   000000F6   0x.... 0x....      BL       __aeabi_fsub
   \   000000FA   0x60E0             STR      R0,[R4, #+12]
     84          }
   \   000000FC   0xBDF0             POP      {R4-R7,PC}       ;; return
     85          
     86          // 用四元数来旋转向量。

   \                                 In section .text, align 2, keep-with-next
     87          void quaternion_rotateVector(const quaternion * rotation,const float from[3],float to[3])
     88          {
   \                     quaternion_rotateVector:
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
     89              float x2  = rotation->x * 2;
   \   0000000A   0x6861             LDR      R1,[R4, #+4]
   \   0000000C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000010   0x.... 0x....      BL       __aeabi_fmul
   \   00000014   0x0006             MOVS     R6,R0
     90              float y2  = rotation->y * 2;
   \   00000016   0x68A1             LDR      R1,[R4, #+8]
   \   00000018   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000001C   0x.... 0x....      BL       __aeabi_fmul
   \   00000020   0x0007             MOVS     R7,R0
     91              float z2  = rotation->z * 2;
   \   00000022   0x68E1             LDR      R1,[R4, #+12]
   \   00000024   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x4680             MOV      R8,R0
     92              float wx2 = rotation->w * x2;
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0x0031             MOVS     R1,R6
   \   00000032   0x.... 0x....      BL       __aeabi_fmul
   \   00000036   0x9006             STR      R0,[SP, #+24]
     93              float wy2 = rotation->w * y2;
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x0039             MOVS     R1,R7
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x9005             STR      R0,[SP, #+20]
     94              float wz2 = rotation->w * z2;
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x9004             STR      R0,[SP, #+16]
     95              float xx2 = rotation->x * x2;
   \   0000004C   0x6860             LDR      R0,[R4, #+4]
   \   0000004E   0x0031             MOVS     R1,R6
   \   00000050   0x.... 0x....      BL       __aeabi_fmul
   \   00000054   0x9003             STR      R0,[SP, #+12]
     96              float yy2 = rotation->y * y2;
   \   00000056   0x68A0             LDR      R0,[R4, #+8]
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0x.... 0x....      BL       __aeabi_fmul
   \   0000005E   0x9002             STR      R0,[SP, #+8]
     97              float zz2 = rotation->z * z2;
   \   00000060   0x68E0             LDR      R0,[R4, #+12]
   \   00000062   0x4641             MOV      R1,R8
   \   00000064   0x.... 0x....      BL       __aeabi_fmul
   \   00000068   0x9001             STR      R0,[SP, #+4]
     98              float xy2 = rotation->x * y2;
   \   0000006A   0x6860             LDR      R0,[R4, #+4]
   \   0000006C   0x0039             MOVS     R1,R7
   \   0000006E   0x.... 0x....      BL       __aeabi_fmul
   \   00000072   0x4681             MOV      R9,R0
     99              float yz2 = rotation->y * z2;
   \   00000074   0x68A0             LDR      R0,[R4, #+8]
   \   00000076   0x4641             MOV      R1,R8
   \   00000078   0x.... 0x....      BL       __aeabi_fmul
   \   0000007C   0x4682             MOV      R10,R0
    100              float xz2 = rotation->z * x2;
   \   0000007E   0x68E0             LDR      R0,[R4, #+12]
   \   00000080   0x0031             MOVS     R1,R6
   \   00000082   0x.... 0x....      BL       __aeabi_fmul
   \   00000086   0x4683             MOV      R11,R0
    101              //
    102              to[0] = from[0]*(1 - yy2 - zz2) + from[1]*(xy2 - wz2)     + from[2]*(xz2 + wy2);
   \   00000088   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   0000008C   0x9902             LDR      R1,[SP, #+8]
   \   0000008E   0x.... 0x....      BL       __aeabi_fsub
   \   00000092   0x9901             LDR      R1,[SP, #+4]
   \   00000094   0x.... 0x....      BL       __aeabi_fsub
   \   00000098   0x6829             LDR      R1,[R5, #+0]
   \   0000009A   0x.... 0x....      BL       __aeabi_fmul
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \   000000A0   0x4648             MOV      R0,R9
   \   000000A2   0x9904             LDR      R1,[SP, #+16]
   \   000000A4   0x.... 0x....      BL       __aeabi_fsub
   \   000000A8   0x6869             LDR      R1,[R5, #+4]
   \   000000AA   0x.... 0x....      BL       __aeabi_fmul
   \   000000AE   0x9900             LDR      R1,[SP, #+0]
   \   000000B0   0x.... 0x....      BL       __aeabi_fadd
   \   000000B4   0x9000             STR      R0,[SP, #+0]
   \   000000B6   0x9805             LDR      R0,[SP, #+20]
   \   000000B8   0x4659             MOV      R1,R11
   \   000000BA   0x.... 0x....      BL       __aeabi_fadd
   \   000000BE   0x68A9             LDR      R1,[R5, #+8]
   \   000000C0   0x.... 0x....      BL       __aeabi_fmul
   \   000000C4   0x9900             LDR      R1,[SP, #+0]
   \   000000C6   0x.... 0x....      BL       __aeabi_fadd
   \   000000CA   0x9907             LDR      R1,[SP, #+28]
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    103              to[1] = from[0]*(xy2 + wz2)     + from[1]*(1 - xx2 - zz2) + from[2]*(yz2 - wx2);
   \   000000CE   0x9804             LDR      R0,[SP, #+16]
   \   000000D0   0x4649             MOV      R1,R9
   \   000000D2   0x.... 0x....      BL       __aeabi_fadd
   \   000000D6   0x6829             LDR      R1,[R5, #+0]
   \   000000D8   0x.... 0x....      BL       __aeabi_fmul
   \   000000DC   0x9000             STR      R0,[SP, #+0]
   \   000000DE   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   000000E2   0x9903             LDR      R1,[SP, #+12]
   \   000000E4   0x.... 0x....      BL       __aeabi_fsub
   \   000000E8   0x9901             LDR      R1,[SP, #+4]
   \   000000EA   0x.... 0x....      BL       __aeabi_fsub
   \   000000EE   0x6869             LDR      R1,[R5, #+4]
   \   000000F0   0x.... 0x....      BL       __aeabi_fmul
   \   000000F4   0x9900             LDR      R1,[SP, #+0]
   \   000000F6   0x.... 0x....      BL       __aeabi_fadd
   \   000000FA   0x9000             STR      R0,[SP, #+0]
   \   000000FC   0x4650             MOV      R0,R10
   \   000000FE   0x9906             LDR      R1,[SP, #+24]
   \   00000100   0x.... 0x....      BL       __aeabi_fsub
   \   00000104   0x68A9             LDR      R1,[R5, #+8]
   \   00000106   0x.... 0x....      BL       __aeabi_fmul
   \   0000010A   0x9900             LDR      R1,[SP, #+0]
   \   0000010C   0x.... 0x....      BL       __aeabi_fadd
   \   00000110   0x9907             LDR      R1,[SP, #+28]
   \   00000112   0x6048             STR      R0,[R1, #+4]
    104              to[2] = from[0]*(xz2 - wy2)     + from[1]*(yz2 + wx2)     + from[2]*(1 - xx2 - yy2);
   \   00000114   0x4658             MOV      R0,R11
   \   00000116   0x9905             LDR      R1,[SP, #+20]
   \   00000118   0x.... 0x....      BL       __aeabi_fsub
   \   0000011C   0x6829             LDR      R1,[R5, #+0]
   \   0000011E   0x.... 0x....      BL       __aeabi_fmul
   \   00000122   0x9000             STR      R0,[SP, #+0]
   \   00000124   0x9806             LDR      R0,[SP, #+24]
   \   00000126   0x4651             MOV      R1,R10
   \   00000128   0x.... 0x....      BL       __aeabi_fadd
   \   0000012C   0x6869             LDR      R1,[R5, #+4]
   \   0000012E   0x.... 0x....      BL       __aeabi_fmul
   \   00000132   0x9900             LDR      R1,[SP, #+0]
   \   00000134   0x.... 0x....      BL       __aeabi_fadd
   \   00000138   0x9000             STR      R0,[SP, #+0]
   \   0000013A   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   0000013E   0x9903             LDR      R1,[SP, #+12]
   \   00000140   0x.... 0x....      BL       __aeabi_fsub
   \   00000144   0x9902             LDR      R1,[SP, #+8]
   \   00000146   0x.... 0x....      BL       __aeabi_fsub
   \   0000014A   0x68A9             LDR      R1,[R5, #+8]
   \   0000014C   0x.... 0x....      BL       __aeabi_fmul
   \   00000150   0x9900             LDR      R1,[SP, #+0]
   \   00000152   0x.... 0x....      BL       __aeabi_fadd
   \   00000156   0x9907             LDR      R1,[SP, #+28]
   \   00000158   0x6088             STR      R0,[R1, #+8]
    105          }
   \   0000015A   0xB008             ADD      SP,SP,#+32
   \   0000015C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    106          
    107          //
    108          // 两向量旋转→四元数旋转。
    109          // 输入：from、to两向量，长度都必须大于0。
    110          // 输出：从from方向转到to方向的旋转。

   \                                 In section .text, align 2, keep-with-next
    111          void quaternion_fromTwoVectorRotation(quaternion * result,const float from[3],const float to[3])
    112          {
   \                     quaternion_fromTwoVectorRotation:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    113              float from_norm = fabsf(from[0]*from[0] + from[1]*from[1] + from[2]*from[2]);
   \   0000000A   0x6821             LDR      R1,[R4, #+0]
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0x.... 0x....      BL       __aeabi_fmul
   \   00000012   0x0006             MOVS     R6,R0
   \   00000014   0x6861             LDR      R1,[R4, #+4]
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x.... 0x....      BL       __aeabi_fmul
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0x.... 0x....      BL       __aeabi_fadd
   \   00000022   0x0006             MOVS     R6,R0
   \   00000024   0x68A1             LDR      R1,[R4, #+8]
   \   00000026   0x68A0             LDR      R0,[R4, #+8]
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x0031             MOVS     R1,R6
   \   0000002E   0x.... 0x....      BL       __aeabi_fadd
   \   00000032   0xF030 0x4000      BICS     R0,R0,#0x80000000
   \   00000036   0x9000             STR      R0,[SP, #+0]
    114              float to_norm = fabsf(to[0]*to[0] + to[1]*to[1] + to[2]*to[2]);
   \   00000038   0x6829             LDR      R1,[R5, #+0]
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x0006             MOVS     R6,R0
   \   00000042   0x6869             LDR      R1,[R5, #+4]
   \   00000044   0x6868             LDR      R0,[R5, #+4]
   \   00000046   0x.... 0x....      BL       __aeabi_fmul
   \   0000004A   0x0031             MOVS     R1,R6
   \   0000004C   0x.... 0x....      BL       __aeabi_fadd
   \   00000050   0x0006             MOVS     R6,R0
   \   00000052   0x68A9             LDR      R1,[R5, #+8]
   \   00000054   0x68A8             LDR      R0,[R5, #+8]
   \   00000056   0x.... 0x....      BL       __aeabi_fmul
   \   0000005A   0x0031             MOVS     R1,R6
   \   0000005C   0x.... 0x....      BL       __aeabi_fadd
   \   00000060   0xF030 0x4600      BICS     R6,R0,#0x80000000
    115              //
    116              from_norm = sqrtf(from_norm);
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x.... 0x....      BL       sqrtf
   \   0000006A   0x9000             STR      R0,[SP, #+0]
    117              to_norm = sqrtf(to_norm);
   \   0000006C   0x0030             MOVS     R0,R6
   \   0000006E   0x.... 0x....      BL       sqrtf
   \   00000072   0x0006             MOVS     R6,R0
    118              float cos_theta = (from[0]*to[0] + from[1]*to[1] + from[2]*to[2]) / (from_norm*to_norm);
   \   00000074   0x6821             LDR      R1,[R4, #+0]
   \   00000076   0x6828             LDR      R0,[R5, #+0]
   \   00000078   0x.... 0x....      BL       __aeabi_fmul
   \   0000007C   0x0007             MOVS     R7,R0
   \   0000007E   0x6861             LDR      R1,[R4, #+4]
   \   00000080   0x6868             LDR      R0,[R5, #+4]
   \   00000082   0x.... 0x....      BL       __aeabi_fmul
   \   00000086   0x0039             MOVS     R1,R7
   \   00000088   0x.... 0x....      BL       __aeabi_fadd
   \   0000008C   0x0007             MOVS     R7,R0
   \   0000008E   0x68A1             LDR      R1,[R4, #+8]
   \   00000090   0x68A8             LDR      R0,[R5, #+8]
   \   00000092   0x.... 0x....      BL       __aeabi_fmul
   \   00000096   0x0039             MOVS     R1,R7
   \   00000098   0x.... 0x....      BL       __aeabi_fadd
   \   0000009C   0x0007             MOVS     R7,R0
   \   0000009E   0x9800             LDR      R0,[SP, #+0]
   \   000000A0   0x0031             MOVS     R1,R6
   \   000000A2   0x.... 0x....      BL       __aeabi_fmul
   \   000000A6   0x0001             MOVS     R1,R0
   \   000000A8   0x0038             MOVS     R0,R7
   \   000000AA   0x.... 0x....      BL       __aeabi_fdiv
   \   000000AE   0x0007             MOVS     R7,R0
    119              result->w = sqrtf((1.0f + cos_theta) / 2); // cos(theta/2)
   \   000000B0   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   000000B4   0x0039             MOVS     R1,R7
   \   000000B6   0x.... 0x....      BL       __aeabi_fadd
   \   000000BA   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   000000BE   0x.... 0x....      BL       __aeabi_fdiv
   \   000000C2   0x.... 0x....      BL       sqrtf
   \   000000C6   0x9902             LDR      R1,[SP, #+8]
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    120              float sin_half_theta = sqrtf((1 - cos_theta) / 2);
   \   000000CA   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   000000CE   0x0039             MOVS     R1,R7
   \   000000D0   0x.... 0x....      BL       __aeabi_fsub
   \   000000D4   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   000000D8   0x.... 0x....      BL       __aeabi_fdiv
   \   000000DC   0x.... 0x....      BL       sqrtf
   \   000000E0   0x9001             STR      R0,[SP, #+4]
    121              float cross_x = from[1]*to[2] - from[2]*to[1];
   \   000000E2   0x6861             LDR      R1,[R4, #+4]
   \   000000E4   0x68A8             LDR      R0,[R5, #+8]
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x4680             MOV      R8,R0
   \   000000EC   0x68A1             LDR      R1,[R4, #+8]
   \   000000EE   0x6868             LDR      R0,[R5, #+4]
   \   000000F0   0x.... 0x....      BL       __aeabi_fmul
   \   000000F4   0x0001             MOVS     R1,R0
   \   000000F6   0x4640             MOV      R0,R8
   \   000000F8   0x.... 0x....      BL       __aeabi_fsub
   \   000000FC   0x4680             MOV      R8,R0
    122              float cross_y = from[2]*to[0] - from[0]*to[2];
   \   000000FE   0x68A1             LDR      R1,[R4, #+8]
   \   00000100   0x6828             LDR      R0,[R5, #+0]
   \   00000102   0x.... 0x....      BL       __aeabi_fmul
   \   00000106   0x4681             MOV      R9,R0
   \   00000108   0x6821             LDR      R1,[R4, #+0]
   \   0000010A   0x68A8             LDR      R0,[R5, #+8]
   \   0000010C   0x.... 0x....      BL       __aeabi_fmul
   \   00000110   0x0001             MOVS     R1,R0
   \   00000112   0x4648             MOV      R0,R9
   \   00000114   0x.... 0x....      BL       __aeabi_fsub
   \   00000118   0x4681             MOV      R9,R0
    123              float cross_z = from[0]*to[1] - from[1]*to[0];
   \   0000011A   0x6821             LDR      R1,[R4, #+0]
   \   0000011C   0x6868             LDR      R0,[R5, #+4]
   \   0000011E   0x.... 0x....      BL       __aeabi_fmul
   \   00000122   0x4682             MOV      R10,R0
   \   00000124   0x6861             LDR      R1,[R4, #+4]
   \   00000126   0x6828             LDR      R0,[R5, #+0]
   \   00000128   0x.... 0x....      BL       __aeabi_fmul
   \   0000012C   0x0001             MOVS     R1,R0
   \   0000012E   0x4650             MOV      R0,R10
   \   00000130   0x.... 0x....      BL       __aeabi_fsub
   \   00000134   0x4682             MOV      R10,R0
    124              if(cos_theta < 0)
   \   00000136   0x0038             MOVS     R0,R7
   \   00000138   0x2100             MOVS     R1,#+0
   \   0000013A   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000013E   0xD205             BCS.N    ??quaternion_fromTwoVectorRotation_0
    125              {
    126                  cross_x = - cross_x;
   \   00000140   0xF098 0x4800      EORS     R8,R8,#0x80000000
    127                  cross_y = - cross_y;
   \   00000144   0xF099 0x4900      EORS     R9,R9,#0x80000000
    128                  cross_z = - cross_z;
   \   00000148   0xF09A 0x4A00      EORS     R10,R10,#0x80000000
    129              }
    130              float sin_half_theta_div_cross_norm = sin_half_theta /
    131                  sqrtf(cross_x*cross_x + cross_y*cross_y + cross_z*cross_z);
   \                     ??quaternion_fromTwoVectorRotation_0:
   \   0000014C   0x4640             MOV      R0,R8
   \   0000014E   0x4641             MOV      R1,R8
   \   00000150   0x.... 0x....      BL       __aeabi_fmul
   \   00000154   0x4683             MOV      R11,R0
   \   00000156   0x4648             MOV      R0,R9
   \   00000158   0x4649             MOV      R1,R9
   \   0000015A   0x.... 0x....      BL       __aeabi_fmul
   \   0000015E   0x4659             MOV      R1,R11
   \   00000160   0x.... 0x....      BL       __aeabi_fadd
   \   00000164   0x4683             MOV      R11,R0
   \   00000166   0x4650             MOV      R0,R10
   \   00000168   0x4651             MOV      R1,R10
   \   0000016A   0x.... 0x....      BL       __aeabi_fmul
   \   0000016E   0x4659             MOV      R1,R11
   \   00000170   0x.... 0x....      BL       __aeabi_fadd
   \   00000174   0x.... 0x....      BL       sqrtf
   \   00000178   0x0001             MOVS     R1,R0
   \   0000017A   0x9801             LDR      R0,[SP, #+4]
   \   0000017C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000180   0x4683             MOV      R11,R0
    132              result->x = cross_x * sin_half_theta_div_cross_norm;
   \   00000182   0x4640             MOV      R0,R8
   \   00000184   0x4659             MOV      R1,R11
   \   00000186   0x.... 0x....      BL       __aeabi_fmul
   \   0000018A   0x9902             LDR      R1,[SP, #+8]
   \   0000018C   0x6048             STR      R0,[R1, #+4]
    133              result->y = cross_y * sin_half_theta_div_cross_norm;
   \   0000018E   0x4648             MOV      R0,R9
   \   00000190   0x4659             MOV      R1,R11
   \   00000192   0x.... 0x....      BL       __aeabi_fmul
   \   00000196   0x9902             LDR      R1,[SP, #+8]
   \   00000198   0x6088             STR      R0,[R1, #+8]
    134              result->z = cross_z * sin_half_theta_div_cross_norm;
   \   0000019A   0x4650             MOV      R0,R10
   \   0000019C   0x4659             MOV      R1,R11
   \   0000019E   0x.... 0x....      BL       __aeabi_fmul
   \   000001A2   0x9902             LDR      R1,[SP, #+8]
   \   000001A4   0x60C8             STR      R0,[R1, #+12]
    135          }
   \   000001A6   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    136          
    137          /*
    138           * 四向量旋转。
    139           * {from1,from2,to1,to2}都是单位向量。
    140           * 生成从{from1,from2}到{to1,to2}最接近的旋转。 */

   \                                 In section .text, align 2, keep-with-next
    141          void quaternion_fromFourVectorRotation(quaternion * result,const float from1[3],
    142              const float to1[3],const float from2[3],const float to2[3])
    143          {
   \                     quaternion_fromFourVectorRotation:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8078      LDR      R8,[SP, #+120]
    144              /*
    145               * 变换基底。 */
    146              float mid_from[3],mid_to[3],cross_from[3],cross_to[3];
    147              math_vector_cross(cross_from,from1,from2);
   \   00000012   0x003A             MOVS     R2,R7
   \   00000014   0x0029             MOVS     R1,R5
   \   00000016   0xA80A             ADD      R0,SP,#+40
   \   00000018   0x.... 0x....      BL       math_vector_cross
    148              math_vector_cross(cross_to,to1,to2);
   \   0000001C   0x4642             MOV      R2,R8
   \   0000001E   0x0031             MOVS     R1,R6
   \   00000020   0xA807             ADD      R0,SP,#+28
   \   00000022   0x.... 0x....      BL       math_vector_cross
    149              for(int i=0;i<3;i++)
   \   00000026   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??quaternion_fromFourVectorRotation_0:
   \   0000002A   0xF1B9 0x0F03      CMP      R9,#+3
   \   0000002E   0xDA14             BGE.N    ??quaternion_fromFourVectorRotation_1
    150              {
    151                  mid_from[i] = from1[i] + from2[i];
   \   00000030   0xF855 0x0029      LDR      R0,[R5, R9, LSL #+2]
   \   00000034   0xF857 0x1029      LDR      R1,[R7, R9, LSL #+2]
   \   00000038   0x.... 0x....      BL       __aeabi_fadd
   \   0000003C   0xA910             ADD      R1,SP,#+64
   \   0000003E   0xF841 0x0029      STR      R0,[R1, R9, LSL #+2]
    152                  mid_to[i] = to1[i] + to2[i];
   \   00000042   0xF856 0x0029      LDR      R0,[R6, R9, LSL #+2]
   \   00000046   0xF858 0x1029      LDR      R1,[R8, R9, LSL #+2]
   \   0000004A   0x.... 0x....      BL       __aeabi_fadd
   \   0000004E   0xA90D             ADD      R1,SP,#+52
   \   00000050   0xF841 0x0029      STR      R0,[R1, R9, LSL #+2]
    153              }
   \   00000054   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000058   0xE7E7             B.N      ??quaternion_fromFourVectorRotation_0
    154              /*
    155               * 先把mid转到重合。 */
    156              quaternion rotation_1;
    157              quaternion_fromTwoVectorRotation(&rotation_1,mid_from,mid_to);
   \                     ??quaternion_fromFourVectorRotation_1:
   \   0000005A   0xAA0D             ADD      R2,SP,#+52
   \   0000005C   0xA910             ADD      R1,SP,#+64
   \   0000005E   0xA803             ADD      R0,SP,#+12
   \   00000060   0x.... 0x....      BL       quaternion_fromTwoVectorRotation
    158              /*
    159               * 然后再把cross转到重合。 */
    160              quaternion rotation_2;
    161              float cross_from_1[3];
    162              quaternion_rotateVector(&rotation_1,cross_from,cross_from_1);
   \   00000064   0xAA00             ADD      R2,SP,#+0
   \   00000066   0xA90A             ADD      R1,SP,#+40
   \   00000068   0xA803             ADD      R0,SP,#+12
   \   0000006A   0x.... 0x....      BL       quaternion_rotateVector
    163              quaternion_fromTwoVectorRotation(&rotation_2,cross_from_1,cross_to);
   \   0000006E   0xAA07             ADD      R2,SP,#+28
   \   00000070   0xA900             ADD      R1,SP,#+0
   \   00000072   0xA813             ADD      R0,SP,#+76
   \   00000074   0x.... 0x....      BL       quaternion_fromTwoVectorRotation
    164              /*
    165               * 最后结合两次旋转。 */
    166              quaternion_mult(result,&rotation_2,&rotation_1);
   \   00000078   0xAA03             ADD      R2,SP,#+12
   \   0000007A   0xA913             ADD      R1,SP,#+76
   \   0000007C   0x0020             MOVS     R0,R4
   \   0000007E   0x.... 0x....      BL       quaternion_mult
    167          }
   \   00000082   0xB017             ADD      SP,SP,#+92
   \   00000084   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    168          
    169          /*
    170           * 得到四元数的共轭四元数（共轭四元数代表的是原四元数相反的旋转方向）
    171           */

   \                                 In section .text, align 2, keep-with-next
    172          quaternion quaternion_getConjugateQuaternion(quaternion original_quaternion)
    173          {
   \                     quaternion_getConjugateQuaternion:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB5F0             PUSH     {R4-R7,LR}
    174              quaternion ret_quaternion;
    175          
    176              ret_quaternion.w = original_quaternion.w;
   \   00000004   0x9905             LDR      R1,[SP, #+20]
   \   00000006   0x9100             STR      R1,[SP, #+0]
    177              ret_quaternion.x = -original_quaternion.x;
   \   00000008   0x9906             LDR      R1,[SP, #+24]
   \   0000000A   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   0000000E   0x9101             STR      R1,[SP, #+4]
    178              ret_quaternion.y = -original_quaternion.y;
   \   00000010   0x9907             LDR      R1,[SP, #+28]
   \   00000012   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   00000016   0x9102             STR      R1,[SP, #+8]
    179              ret_quaternion.z = -original_quaternion.z;
   \   00000018   0x9908             LDR      R1,[SP, #+32]
   \   0000001A   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   0000001E   0x9103             STR      R1,[SP, #+12]
    180          
    181              return ret_quaternion;
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x2210             MOVS     R2,#+16
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xB004             ADD      SP,SP,#+16
   \   0000002A   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    182          }
    183          

   \                                 In section .text, align 2, keep-with-next
    184          void quaternion_converQuaternionToYawPitchRoll(quaternion source_quaternion, float ypr_result[3])
    185          {
   \                     quaternion_converQuaternionToYawPitchRoll:
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x9C10             LDR      R4,[SP, #+64]
    186              float w,x,y,z;
    187              float yaw,pitch,roll;
    188          
    189              w = source_quaternion.w;
   \   00000008   0x9803             LDR      R0,[SP, #+12]
   \   0000000A   0x4682             MOV      R10,R0
    190              x = source_quaternion.x;
   \   0000000C   0x9804             LDR      R0,[SP, #+16]
   \   0000000E   0x0005             MOVS     R5,R0
    191              y = source_quaternion.y;
   \   00000010   0x9805             LDR      R0,[SP, #+20]
   \   00000012   0x0006             MOVS     R6,R0
    192              z = source_quaternion.z;
   \   00000014   0x9806             LDR      R0,[SP, #+24]
   \   00000016   0x0007             MOVS     R7,R0
    193          
    194              yaw = atan2(2*w*z + 2*x*y ,1 - 2*y*y - 2*z*z) * 57.2957795f;
   \   00000018   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000001C   0x0031             MOVS     R1,R6
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x0031             MOVS     R1,R6
   \   00000024   0x.... 0x....      BL       __aeabi_fmul
   \   00000028   0x0001             MOVS     R1,R0
   \   0000002A   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   0000002E   0x.... 0x....      BL       __aeabi_fsub
   \   00000032   0x4680             MOV      R8,R0
   \   00000034   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0x.... 0x....      BL       __aeabi_fmul
   \   0000003E   0x0039             MOVS     R1,R7
   \   00000040   0x.... 0x....      BL       __aeabi_fmul
   \   00000044   0x0001             MOVS     R1,R0
   \   00000046   0x4640             MOV      R0,R8
   \   00000048   0x.... 0x....      BL       __aeabi_fsub
   \   0000004C   0x.... 0x....      BL       __aeabi_f2d
   \   00000050   0x0002             MOVS     R2,R0
   \   00000052   0x000B             MOVS     R3,R1
   \   00000054   0x4690             MOV      R8,R2
   \   00000056   0x4699             MOV      R9,R3
   \   00000058   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000005C   0x4651             MOV      R1,R10
   \   0000005E   0x.... 0x....      BL       __aeabi_fmul
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x.... 0x....      BL       __aeabi_fmul
   \   00000068   0x4683             MOV      R11,R0
   \   0000006A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0x.... 0x....      BL       __aeabi_fmul
   \   00000074   0x0031             MOVS     R1,R6
   \   00000076   0x.... 0x....      BL       __aeabi_fmul
   \   0000007A   0x4659             MOV      R1,R11
   \   0000007C   0x.... 0x....      BL       __aeabi_fadd
   \   00000080   0x.... 0x....      BL       __aeabi_f2d
   \   00000084   0x4642             MOV      R2,R8
   \   00000086   0x464B             MOV      R3,R9
   \   00000088   0x.... 0x....      BL       atan2
   \   0000008C   0xF05F 0x5200      MOVS     R2,#+536870912
   \   00000090   0x....             LDR.N    R3,??DataTable2_1  ;; 0x404ca5dc
   \   00000092   0x.... 0x....      BL       __aeabi_dmul
   \   00000096   0x.... 0x....      BL       __aeabi_d2f
   \   0000009A   0x9002             STR      R0,[SP, #+8]
    195              pitch = asin(2*w*y - 2*z*x) * 57.2957795f;
   \   0000009C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000A0   0x4651             MOV      R1,R10
   \   000000A2   0x.... 0x....      BL       __aeabi_fmul
   \   000000A6   0x0031             MOVS     R1,R6
   \   000000A8   0x.... 0x....      BL       __aeabi_fmul
   \   000000AC   0x4680             MOV      R8,R0
   \   000000AE   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000B2   0x0039             MOVS     R1,R7
   \   000000B4   0x.... 0x....      BL       __aeabi_fmul
   \   000000B8   0x0029             MOVS     R1,R5
   \   000000BA   0x.... 0x....      BL       __aeabi_fmul
   \   000000BE   0x0001             MOVS     R1,R0
   \   000000C0   0x4640             MOV      R0,R8
   \   000000C2   0x.... 0x....      BL       __aeabi_fsub
   \   000000C6   0x.... 0x....      BL       __aeabi_f2d
   \   000000CA   0x.... 0x....      BL       asin
   \   000000CE   0xF05F 0x5200      MOVS     R2,#+536870912
   \   000000D2   0x....             LDR.N    R3,??DataTable2_1  ;; 0x404ca5dc
   \   000000D4   0x.... 0x....      BL       __aeabi_dmul
   \   000000D8   0x.... 0x....      BL       __aeabi_d2f
   \   000000DC   0x9001             STR      R0,[SP, #+4]
    196              roll = atan2(2*w*x + 2*y*z, 1 - 2*x*x - 2*y*y) * 57.2957795f; 
   \   000000DE   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000E2   0x0029             MOVS     R1,R5
   \   000000E4   0x.... 0x....      BL       __aeabi_fmul
   \   000000E8   0x0029             MOVS     R1,R5
   \   000000EA   0x.... 0x....      BL       __aeabi_fmul
   \   000000EE   0x0001             MOVS     R1,R0
   \   000000F0   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   000000F4   0x.... 0x....      BL       __aeabi_fsub
   \   000000F8   0x4680             MOV      R8,R0
   \   000000FA   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000FE   0x0031             MOVS     R1,R6
   \   00000100   0x.... 0x....      BL       __aeabi_fmul
   \   00000104   0x0031             MOVS     R1,R6
   \   00000106   0x.... 0x....      BL       __aeabi_fmul
   \   0000010A   0x0001             MOVS     R1,R0
   \   0000010C   0x4640             MOV      R0,R8
   \   0000010E   0x.... 0x....      BL       __aeabi_fsub
   \   00000112   0x.... 0x....      BL       __aeabi_f2d
   \   00000116   0x0002             MOVS     R2,R0
   \   00000118   0x000B             MOVS     R3,R1
   \   0000011A   0x4690             MOV      R8,R2
   \   0000011C   0x4699             MOV      R9,R3
   \   0000011E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000122   0x4651             MOV      R1,R10
   \   00000124   0x.... 0x....      BL       __aeabi_fmul
   \   00000128   0x0029             MOVS     R1,R5
   \   0000012A   0x.... 0x....      BL       __aeabi_fmul
   \   0000012E   0x4683             MOV      R11,R0
   \   00000130   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000134   0x0031             MOVS     R1,R6
   \   00000136   0x.... 0x....      BL       __aeabi_fmul
   \   0000013A   0x0039             MOVS     R1,R7
   \   0000013C   0x.... 0x....      BL       __aeabi_fmul
   \   00000140   0x4659             MOV      R1,R11
   \   00000142   0x.... 0x....      BL       __aeabi_fadd
   \   00000146   0x.... 0x....      BL       __aeabi_f2d
   \   0000014A   0x4642             MOV      R2,R8
   \   0000014C   0x464B             MOV      R3,R9
   \   0000014E   0x.... 0x....      BL       atan2
   \   00000152   0xF05F 0x5200      MOVS     R2,#+536870912
   \   00000156   0x....             LDR.N    R3,??DataTable2_1  ;; 0x404ca5dc
   \   00000158   0x.... 0x....      BL       __aeabi_dmul
   \   0000015C   0x.... 0x....      BL       __aeabi_d2f
   \   00000160   0x9000             STR      R0,[SP, #+0]
    197          
    198              // 从matlab上面找的算法，不过结果与上面的没什么区别。
    199              /* 
    200              yaw = atan2(2*w*z + 2*x*y ,w*w + x*x - y*y - z*z) * 57.2957795f;
    201              pitch = asin(2*w*y - 2*z*x) * 57.2957795f;
    202              roll = atan2(2*w*x + 2*y*z, w*w - x*x - y*y + z*z) * 57.2957795f;     
    203              */
    204          
    205              ypr_result[0] = yaw;
   \   00000162   0x9802             LDR      R0,[SP, #+8]
   \   00000164   0x6020             STR      R0,[R4, #+0]
    206              ypr_result[1] = pitch;
   \   00000166   0x9801             LDR      R0,[SP, #+4]
   \   00000168   0x6060             STR      R0,[R4, #+4]
    207              ypr_result[2] = roll;
   \   0000016A   0x9800             LDR      R0,[SP, #+0]
   \   0000016C   0x60A0             STR      R0,[R4, #+8]
    208          }
   \   0000016E   0xB007             ADD      SP,SP,#+28
   \   00000170   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    209          

   \                                 In section .text, align 2, keep-with-next
    210          quaternion quaternion_converYawPitchRollToQuaternion(float ypr[3])
    211          {
   \                     quaternion_converYawPitchRollToQuaternion:
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
    212              quaternion ret_quaternion;
    213              float yaw_rad_half, pitch_rad_half, roll_rad_half;
    214          
    215              yaw_rad_half   = (ypr[0] / 57.2957795f) / 2;
   \   00000006   0x980C             LDR      R0,[SP, #+48]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable2_2  ;; 0x42652ee1
   \   0000000C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000010   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000014   0x.... 0x....      BL       __aeabi_fdiv
   \   00000018   0x9002             STR      R0,[SP, #+8]
    216              pitch_rad_half = (ypr[1] / 57.2957795f) / 2;
   \   0000001A   0x980C             LDR      R0,[SP, #+48]
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x....             LDR.N    R1,??DataTable2_2  ;; 0x42652ee1
   \   00000020   0x.... 0x....      BL       __aeabi_fdiv
   \   00000024   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000028   0x.... 0x....      BL       __aeabi_fdiv
   \   0000002C   0x9001             STR      R0,[SP, #+4]
    217              roll_rad_half  = (ypr[2] / 57.2957795f) / 2;
   \   0000002E   0x980C             LDR      R0,[SP, #+48]
   \   00000030   0x6880             LDR      R0,[R0, #+8]
   \   00000032   0x....             LDR.N    R1,??DataTable2_2  ;; 0x42652ee1
   \   00000034   0x.... 0x....      BL       __aeabi_fdiv
   \   00000038   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   0000003C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000040   0x9000             STR      R0,[SP, #+0]
    218          
    219              ret_quaternion.w = cos(roll_rad_half)*cos(pitch_rad_half)*cos(yaw_rad_half) + sin(roll_rad_half)*sin(pitch_rad_half)*sin(yaw_rad_half);
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0x.... 0x....      BL       __aeabi_f2d
   \   00000048   0x.... 0x....      BL       cos
   \   0000004C   0x0004             MOVS     R4,R0
   \   0000004E   0x000D             MOVS     R5,R1
   \   00000050   0x9801             LDR      R0,[SP, #+4]
   \   00000052   0x.... 0x....      BL       __aeabi_f2d
   \   00000056   0x.... 0x....      BL       cos
   \   0000005A   0x4680             MOV      R8,R0
   \   0000005C   0x4689             MOV      R9,R1
   \   0000005E   0x9802             LDR      R0,[SP, #+8]
   \   00000060   0x.... 0x....      BL       __aeabi_f2d
   \   00000064   0x.... 0x....      BL       cos
   \   00000068   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   0000006C   0x9800             LDR      R0,[SP, #+0]
   \   0000006E   0x.... 0x....      BL       __aeabi_f2d
   \   00000072   0x.... 0x....      BL       sin
   \   00000076   0x0006             MOVS     R6,R0
   \   00000078   0x000F             MOVS     R7,R1
   \   0000007A   0x9801             LDR      R0,[SP, #+4]
   \   0000007C   0x.... 0x....      BL       __aeabi_f2d
   \   00000080   0x.... 0x....      BL       sin
   \   00000084   0x4682             MOV      R10,R0
   \   00000086   0x468B             MOV      R11,R1
   \   00000088   0x4642             MOV      R2,R8
   \   0000008A   0x464B             MOV      R3,R9
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x0029             MOVS     R1,R5
   \   00000090   0x.... 0x....      BL       __aeabi_dmul
   \   00000094   0xE9DD 0x2304      LDRD     R2,R3,[SP, #+16]
   \   00000098   0x.... 0x....      BL       __aeabi_dmul
   \   0000009C   0x4680             MOV      R8,R0
   \   0000009E   0x4689             MOV      R9,R1
   \   000000A0   0x4652             MOV      R2,R10
   \   000000A2   0x465B             MOV      R3,R11
   \   000000A4   0x0030             MOVS     R0,R6
   \   000000A6   0x0039             MOVS     R1,R7
   \   000000A8   0x.... 0x....      BL       __aeabi_dmul
   \   000000AC   0x0004             MOVS     R4,R0
   \   000000AE   0x000D             MOVS     R5,R1
   \   000000B0   0x9802             LDR      R0,[SP, #+8]
   \   000000B2   0x.... 0x....      BL       __aeabi_f2d
   \   000000B6   0x.... 0x....      BL       sin
   \   000000BA   0x0022             MOVS     R2,R4
   \   000000BC   0x002B             MOVS     R3,R5
   \   000000BE   0x.... 0x....      BL       __aeabi_dmul
   \   000000C2   0x4642             MOV      R2,R8
   \   000000C4   0x464B             MOV      R3,R9
   \   000000C6   0x.... 0x....      BL       __aeabi_dadd
   \   000000CA   0x.... 0x....      BL       __aeabi_d2f
   \   000000CE   0x9006             STR      R0,[SP, #+24]
    220              ret_quaternion.x = sin(roll_rad_half)*cos(pitch_rad_half)*cos(yaw_rad_half) - cos(roll_rad_half)*sin(pitch_rad_half)*sin(yaw_rad_half);
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
   \   000000D2   0x.... 0x....      BL       __aeabi_f2d
   \   000000D6   0x.... 0x....      BL       sin
   \   000000DA   0x0004             MOVS     R4,R0
   \   000000DC   0x000D             MOVS     R5,R1
   \   000000DE   0x9801             LDR      R0,[SP, #+4]
   \   000000E0   0x.... 0x....      BL       __aeabi_f2d
   \   000000E4   0x.... 0x....      BL       cos
   \   000000E8   0x4680             MOV      R8,R0
   \   000000EA   0x4689             MOV      R9,R1
   \   000000EC   0x9802             LDR      R0,[SP, #+8]
   \   000000EE   0x.... 0x....      BL       __aeabi_f2d
   \   000000F2   0x.... 0x....      BL       cos
   \   000000F6   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   000000FA   0x9800             LDR      R0,[SP, #+0]
   \   000000FC   0x.... 0x....      BL       __aeabi_f2d
   \   00000100   0x.... 0x....      BL       cos
   \   00000104   0x0006             MOVS     R6,R0
   \   00000106   0x000F             MOVS     R7,R1
   \   00000108   0x9801             LDR      R0,[SP, #+4]
   \   0000010A   0x.... 0x....      BL       __aeabi_f2d
   \   0000010E   0x.... 0x....      BL       sin
   \   00000112   0x4682             MOV      R10,R0
   \   00000114   0x468B             MOV      R11,R1
   \   00000116   0x4642             MOV      R2,R8
   \   00000118   0x464B             MOV      R3,R9
   \   0000011A   0x0020             MOVS     R0,R4
   \   0000011C   0x0029             MOVS     R1,R5
   \   0000011E   0x.... 0x....      BL       __aeabi_dmul
   \   00000122   0xE9DD 0x2304      LDRD     R2,R3,[SP, #+16]
   \   00000126   0x.... 0x....      BL       __aeabi_dmul
   \   0000012A   0x4680             MOV      R8,R0
   \   0000012C   0x4689             MOV      R9,R1
   \   0000012E   0x4652             MOV      R2,R10
   \   00000130   0x465B             MOV      R3,R11
   \   00000132   0x0030             MOVS     R0,R6
   \   00000134   0x0039             MOVS     R1,R7
   \   00000136   0x.... 0x....      BL       __aeabi_dmul
   \   0000013A   0x0004             MOVS     R4,R0
   \   0000013C   0x000D             MOVS     R5,R1
   \   0000013E   0x9802             LDR      R0,[SP, #+8]
   \   00000140   0x.... 0x....      BL       __aeabi_f2d
   \   00000144   0x.... 0x....      BL       sin
   \   00000148   0x0022             MOVS     R2,R4
   \   0000014A   0x002B             MOVS     R3,R5
   \   0000014C   0x.... 0x....      BL       __aeabi_dmul
   \   00000150   0x0002             MOVS     R2,R0
   \   00000152   0x000B             MOVS     R3,R1
   \   00000154   0x4640             MOV      R0,R8
   \   00000156   0x4649             MOV      R1,R9
   \   00000158   0x.... 0x....      BL       __aeabi_dsub
   \   0000015C   0x.... 0x....      BL       __aeabi_d2f
   \   00000160   0x9007             STR      R0,[SP, #+28]
    221              ret_quaternion.y = cos(roll_rad_half)*sin(pitch_rad_half)*cos(yaw_rad_half) + sin(roll_rad_half)*cos(pitch_rad_half)*sin(yaw_rad_half);
   \   00000162   0x9800             LDR      R0,[SP, #+0]
   \   00000164   0x.... 0x....      BL       __aeabi_f2d
   \   00000168   0x.... 0x....      BL       cos
   \   0000016C   0x0004             MOVS     R4,R0
   \   0000016E   0x000D             MOVS     R5,R1
   \   00000170   0x9801             LDR      R0,[SP, #+4]
   \   00000172   0x.... 0x....      BL       __aeabi_f2d
   \   00000176   0x.... 0x....      BL       sin
   \   0000017A   0x4680             MOV      R8,R0
   \   0000017C   0x4689             MOV      R9,R1
   \   0000017E   0x9802             LDR      R0,[SP, #+8]
   \   00000180   0x.... 0x....      BL       __aeabi_f2d
   \   00000184   0x.... 0x....      BL       cos
   \   00000188   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   0000018C   0x9800             LDR      R0,[SP, #+0]
   \   0000018E   0x.... 0x....      BL       __aeabi_f2d
   \   00000192   0x.... 0x....      BL       sin
   \   00000196   0x0006             MOVS     R6,R0
   \   00000198   0x000F             MOVS     R7,R1
   \   0000019A   0x9801             LDR      R0,[SP, #+4]
   \   0000019C   0x.... 0x....      BL       __aeabi_f2d
   \   000001A0   0x.... 0x....      BL       cos
   \   000001A4   0x4682             MOV      R10,R0
   \   000001A6   0x468B             MOV      R11,R1
   \   000001A8   0x4642             MOV      R2,R8
   \   000001AA   0x464B             MOV      R3,R9
   \   000001AC   0x0020             MOVS     R0,R4
   \   000001AE   0x0029             MOVS     R1,R5
   \   000001B0   0x.... 0x....      BL       __aeabi_dmul
   \   000001B4   0xE9DD 0x2304      LDRD     R2,R3,[SP, #+16]
   \   000001B8   0x.... 0x....      BL       __aeabi_dmul
   \   000001BC   0x4680             MOV      R8,R0
   \   000001BE   0x4689             MOV      R9,R1
   \   000001C0   0x4652             MOV      R2,R10
   \   000001C2   0x465B             MOV      R3,R11
   \   000001C4   0x0030             MOVS     R0,R6
   \   000001C6   0x0039             MOVS     R1,R7
   \   000001C8   0x.... 0x....      BL       __aeabi_dmul
   \   000001CC   0x0004             MOVS     R4,R0
   \   000001CE   0x000D             MOVS     R5,R1
   \   000001D0   0x9802             LDR      R0,[SP, #+8]
   \   000001D2   0x.... 0x....      BL       __aeabi_f2d
   \   000001D6   0x.... 0x....      BL       sin
   \   000001DA   0x0022             MOVS     R2,R4
   \   000001DC   0x002B             MOVS     R3,R5
   \   000001DE   0x.... 0x....      BL       __aeabi_dmul
   \   000001E2   0x4642             MOV      R2,R8
   \   000001E4   0x464B             MOV      R3,R9
   \   000001E6   0x.... 0x....      BL       __aeabi_dadd
   \   000001EA   0x.... 0x....      BL       __aeabi_d2f
   \   000001EE   0x9008             STR      R0,[SP, #+32]
    222              ret_quaternion.z = cos(roll_rad_half)*cos(pitch_rad_half)*sin(yaw_rad_half) - sin(roll_rad_half)*sin(pitch_rad_half)*cos(yaw_rad_half);
   \   000001F0   0x9800             LDR      R0,[SP, #+0]
   \   000001F2   0x.... 0x....      BL       __aeabi_f2d
   \   000001F6   0x.... 0x....      BL       cos
   \   000001FA   0x0004             MOVS     R4,R0
   \   000001FC   0x000D             MOVS     R5,R1
   \   000001FE   0x9801             LDR      R0,[SP, #+4]
   \   00000200   0x.... 0x....      BL       __aeabi_f2d
   \   00000204   0x.... 0x....      BL       cos
   \   00000208   0x4680             MOV      R8,R0
   \   0000020A   0x4689             MOV      R9,R1
   \   0000020C   0x9802             LDR      R0,[SP, #+8]
   \   0000020E   0x.... 0x....      BL       __aeabi_f2d
   \   00000212   0x.... 0x....      BL       sin
   \   00000216   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   0000021A   0x9800             LDR      R0,[SP, #+0]
   \   0000021C   0x.... 0x....      BL       __aeabi_f2d
   \   00000220   0x.... 0x....      BL       sin
   \   00000224   0x0006             MOVS     R6,R0
   \   00000226   0x000F             MOVS     R7,R1
   \   00000228   0x9801             LDR      R0,[SP, #+4]
   \   0000022A   0x.... 0x....      BL       __aeabi_f2d
   \   0000022E   0x.... 0x....      BL       sin
   \   00000232   0x4682             MOV      R10,R0
   \   00000234   0x468B             MOV      R11,R1
   \   00000236   0x4642             MOV      R2,R8
   \   00000238   0x464B             MOV      R3,R9
   \   0000023A   0x0020             MOVS     R0,R4
   \   0000023C   0x0029             MOVS     R1,R5
   \   0000023E   0x.... 0x....      BL       __aeabi_dmul
   \   00000242   0xE9DD 0x2304      LDRD     R2,R3,[SP, #+16]
   \   00000246   0x.... 0x....      BL       __aeabi_dmul
   \   0000024A   0x4680             MOV      R8,R0
   \   0000024C   0x4689             MOV      R9,R1
   \   0000024E   0x4652             MOV      R2,R10
   \   00000250   0x465B             MOV      R3,R11
   \   00000252   0x0030             MOVS     R0,R6
   \   00000254   0x0039             MOVS     R1,R7
   \   00000256   0x.... 0x....      BL       __aeabi_dmul
   \   0000025A   0x0004             MOVS     R4,R0
   \   0000025C   0x000D             MOVS     R5,R1
   \   0000025E   0x9802             LDR      R0,[SP, #+8]
   \   00000260   0x.... 0x....      BL       __aeabi_f2d
   \   00000264   0x.... 0x....      BL       cos
   \   00000268   0x0022             MOVS     R2,R4
   \   0000026A   0x002B             MOVS     R3,R5
   \   0000026C   0x.... 0x....      BL       __aeabi_dmul
   \   00000270   0x0002             MOVS     R2,R0
   \   00000272   0x000B             MOVS     R3,R1
   \   00000274   0x4640             MOV      R0,R8
   \   00000276   0x4649             MOV      R1,R9
   \   00000278   0x.... 0x....      BL       __aeabi_dsub
   \   0000027C   0x.... 0x....      BL       __aeabi_d2f
   \   00000280   0x9009             STR      R0,[SP, #+36]
    223          
    224              return ret_quaternion;
   \   00000282   0x980B             LDR      R0,[SP, #+44]
   \   00000284   0xA906             ADD      R1,SP,#+24
   \   00000286   0x2210             MOVS     R2,#+16
   \   00000288   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000028C   0xB00D             ADD      SP,SP,#+52
   \   0000028E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    225          }
    226          

   \                                 In section .text, align 2, keep-with-next
    227          void quaternion_seperateYawRotateAndPitchRollRotate(quaternion * yaw_rotate, quaternion * pitch_roll_rotate, quaternion * yaw_pitch_roll_rotate)
    228          {
   \                     quaternion_seperateYawRotateAndPitchRollRotate:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0014             MOVS     R4,R2
    229              float ypr[3];
    230              quaternion yaw_rotate_quaternion_rev;
    231          
    232              quaternion_converQuaternionToYawPitchRoll(*yaw_pitch_roll_rotate, ypr);
   \   0000000A   0xA801             ADD      R0,SP,#+4
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0xE894 0x000F      LDM      R4,{R0-R3}
   \   00000012   0x.... 0x....      BL       quaternion_converQuaternionToYawPitchRoll
    233          
    234              ypr[1] = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9002             STR      R0,[SP, #+8]
    235              ypr[2] = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9003             STR      R0,[SP, #+12]
    236          
    237              *yaw_rotate = quaternion_converYawPitchRollToQuaternion(ypr);
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0xA804             ADD      R0,SP,#+16
   \   00000022   0x.... 0x....      BL       quaternion_converYawPitchRollToQuaternion
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xA904             ADD      R1,SP,#+16
   \   0000002A   0x2210             MOVS     R2,#+16
   \   0000002C   0x.... 0x....      BL       __aeabi_memcpy4
    238              quaternion_normalize(yaw_rotate);
   \   00000030   0x0028             MOVS     R0,R5
   \   00000032   0x.... 0x....      BL       quaternion_normalize
    239          
    240              yaw_rotate_quaternion_rev = quaternion_getConjugateQuaternion(*yaw_rotate);
   \   00000036   0xB083             SUB      SP,SP,#+12
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0xCD0E             LDM      R5!,{R1-R3}
   \   0000003C   0xC00E             STM      R0!,{R1-R3}
   \   0000003E   0x6829             LDR      R1,[R5, #0]
   \   00000040   0x6001             STR      R1,[R0, #+0]
   \   00000042   0x3D0C             SUBS     R5,R5,#+12
   \   00000044   0x380C             SUBS     R0,R0,#+12
   \   00000046   0xBC0E             POP      {R1-R3}
   \   00000048   0xA808             ADD      R0,SP,#+32
   \   0000004A   0x.... 0x....      BL       quaternion_getConjugateQuaternion
    241          
    242              quaternion_mult(pitch_roll_rotate, yaw_pitch_roll_rotate, &yaw_rotate_quaternion_rev);
   \   0000004E   0xAA08             ADD      R2,SP,#+32
   \   00000050   0x0021             MOVS     R1,R4
   \   00000052   0x0030             MOVS     R0,R6
   \   00000054   0x.... 0x....      BL       quaternion_mult
    243              quaternion_normalize(pitch_roll_rotate);
   \   00000058   0x0030             MOVS     R0,R6
   \   0000005A   0x.... 0x....      BL       quaternion_normalize
    244          }
   \   0000005E   0xB00C             ADD      SP,SP,#+48
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x5F3759DF         DC32     0x5f3759df

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x404CA5DC         DC32     0x404ca5dc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x42652EE1         DC32     0x42652ee1

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  math_rsqrt
              24 -> __aeabi_fmul
              24 -> __aeabi_fsub
       20  math_vector_cross
              20 -> __aeabi_fmul
              20 -> __aeabi_fsub
       64  quaternion_converQuaternionToYawPitchRoll
              64 -> __aeabi_d2f
              64 -> __aeabi_dmul
              64 -> __aeabi_f2d
              64 -> __aeabi_fadd
              64 -> __aeabi_fmul
              64 -> __aeabi_fsub
              64 -> asin
              64 -> atan2
       88  quaternion_converYawPitchRollToQuaternion
              88 -> __aeabi_d2f
              88 -> __aeabi_dadd
              88 -> __aeabi_dmul
              88 -> __aeabi_dsub
              88 -> __aeabi_f2d
              88 -> __aeabi_fdiv
              88 -> __aeabi_memcpy4
              88 -> cos
              88 -> sin
      120  quaternion_fromFourVectorRotation
             120 -> __aeabi_fadd
             120 -> math_vector_cross
             120 -> quaternion_fromTwoVectorRotation
             120 -> quaternion_mult
             120 -> quaternion_rotateVector
       48  quaternion_fromTwoVectorRotation
              48 -> __aeabi_cfcmple
              48 -> __aeabi_fadd
              48 -> __aeabi_fdiv
              48 -> __aeabi_fmul
              48 -> __aeabi_fsub
              48 -> sqrtf
       32  quaternion_getConjugateQuaternion
              32 -> __aeabi_memcpy4
        0  quaternion_loadIdentity
       20  quaternion_mult
              20 -> __aeabi_fadd
              20 -> __aeabi_fmul
              20 -> __aeabi_fsub
       16  quaternion_normalize
              16 -> __aeabi_fadd
              16 -> __aeabi_fmul
              16 -> math_rsqrt
       68  quaternion_rotateVector
              68 -> __aeabi_fadd
              68 -> __aeabi_fmul
              68 -> __aeabi_fsub
       76  quaternion_seperateYawRotateAndPitchRollRotate
              64 -> __aeabi_memcpy4
              64 -> quaternion_converQuaternionToYawPitchRoll
              64 -> quaternion_converYawPitchRollToQuaternion
              64 -> quaternion_getConjugateQuaternion
              64 -> quaternion_mult
              64 -> quaternion_normalize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
     102  math_rsqrt
      94  math_vector_cross
     372  quaternion_converQuaternionToYawPitchRoll
     658  quaternion_converYawPitchRollToQuaternion
     136  quaternion_fromFourVectorRotation
     426  quaternion_fromTwoVectorRotation
      46  quaternion_getConjugateQuaternion
      16  quaternion_loadIdentity
     254  quaternion_mult
     108  quaternion_normalize
     352  quaternion_rotateVector
      98  quaternion_seperateYawRotateAndPitchRollRotate

 
 2 674 bytes in section .text
 
 2 674 bytes of CODE memory

Errors: none
Warnings: none
