###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:39 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\flowfilter.c                               #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\flowfilter.c -D LPLD_K60 -lCN              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\flowfilter.lst                                  #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\flowfilter.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\SignalProcess\flowfilter.c
      1          /****************************************************************************** 
      2           *       flowfilter.c ----- The code to filter the data from the pix4flow          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  flowdata.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/7/7 20:45:04                                                       *
     10           ******************************************************************************/
     11          #include "flowfilter.h"
     12          

   \                                 In section .bss, align 4
     13          static float s_f32FlowFilterHistroy[FLOWFILTER_AVG_NUM][4] = {0};
   \                     s_f32FlowFilterHistroy:
   \   00000000                      DS8 320

   \                                 In section .bss, align 4
     14          static float s_f32FlowFilterCurrent[4] = {0};
   \                     s_f32FlowFilterCurrent:
   \   00000000                      DS8 16
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void InitFlowFilter(void)
     17          {
     18              int i = 0;
   \                     InitFlowFilter:
   \   00000000   0x2000             MOVS     R0,#+0
     19              int j = 0;
   \   00000002   0x2100             MOVS     R1,#+0
     20          
     21              for(i = 0; i < FLOWFILTER_AVG_NUM; i++)
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x0010             MOVS     R0,R2
   \                     ??InitFlowFilter_0:
   \   00000008   0x2814             CMP      R0,#+20
   \   0000000A   0xDA0D             BGE.N    ??InitFlowFilter_1
     22              {
     23                  for(j = 0; j < 4; j++)
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x0011             MOVS     R1,R2
   \                     ??InitFlowFilter_2:
   \   00000010   0x2904             CMP      R1,#+4
   \   00000012   0xDA07             BGE.N    ??InitFlowFilter_3
     24                  {
     25                      s_f32FlowFilterHistroy[i][j] = 0;
   \   00000014   0x....             LDR.N    R2,??DataTable4
   \   00000016   0xEB12 0x1200      ADDS     R2,R2,R0, LSL #+4
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
     26                  }
   \   00000020   0x1C49             ADDS     R1,R1,#+1
   \   00000022   0xE7F5             B.N      ??InitFlowFilter_2
     27              }
   \                     ??InitFlowFilter_3:
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0xE7EF             B.N      ??InitFlowFilter_0
     28          
     29              for(i = 0; i < 4; i++)
   \                     ??InitFlowFilter_1:
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x0010             MOVS     R0,R2
   \                     ??InitFlowFilter_4:
   \   0000002C   0x2804             CMP      R0,#+4
   \   0000002E   0xDA05             BGE.N    ??InitFlowFilter_5
     30              {
     31                  s_f32FlowFilterCurrent[i] = 0;
   \   00000030   0x....             LDR.N    R2,??DataTable4_1
   \   00000032   0x2300             MOVS     R3,#+0
   \   00000034   0xF842 0x3020      STR      R3,[R2, R0, LSL #+2]
     32              }
   \   00000038   0x1C40             ADDS     R0,R0,#+1
   \   0000003A   0xE7F7             B.N      ??InitFlowFilter_4
     33          }
   \                     ??InitFlowFilter_5:
   \   0000003C   0x4770             BX       LR               ;; return
     34          

   \                                 In section .text, align 2, keep-with-next
     35          void FlowFilterInput(float flowdata[4])
     36          {
   \                     FlowFilterInput:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     37              int i = 0; 
   \   00000004   0x2500             MOVS     R5,#+0
     38              int j = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     39          
     40              for(i = 0; i < FLOWFILTER_AVG_NUM - 1; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
   \                     ??FlowFilterInput_0:
   \   0000000C   0x2D13             CMP      R5,#+19
   \   0000000E   0xDA12             BGE.N    ??FlowFilterInput_1
     41              {
     42                  for(j = 0; j < 4; j++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0006             MOVS     R6,R0
   \                     ??FlowFilterInput_2:
   \   00000014   0x2E04             CMP      R6,#+4
   \   00000016   0xDA0C             BGE.N    ??FlowFilterInput_3
     43                  {
     44                      s_f32FlowFilterHistroy[i][j] = s_f32FlowFilterHistroy[i+1][j];
   \   00000018   0x....             LDR.N    R0,??DataTable4
   \   0000001A   0xEB10 0x1005      ADDS     R0,R0,R5, LSL #+4
   \   0000001E   0x....             LDR.N    R1,??DataTable4
   \   00000020   0xEB11 0x1105      ADDS     R1,R1,R5, LSL #+4
   \   00000024   0xEB11 0x0186      ADDS     R1,R1,R6, LSL #+2
   \   00000028   0x6909             LDR      R1,[R1, #+16]
   \   0000002A   0xF840 0x1026      STR      R1,[R0, R6, LSL #+2]
     45                  }
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   \   00000030   0xE7F0             B.N      ??FlowFilterInput_2
     46              }
   \                     ??FlowFilterInput_3:
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0xE7EA             B.N      ??FlowFilterInput_0
     47          
     48              for(j = 0; j < 4; j++)
   \                     ??FlowFilterInput_1:
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x0006             MOVS     R6,R0
   \                     ??FlowFilterInput_4:
   \   0000003A   0x2E04             CMP      R6,#+4
   \   0000003C   0xDA08             BGE.N    ??FlowFilterInput_5
     49              {
     50                  s_f32FlowFilterHistroy[FLOWFILTER_AVG_NUM - 1][j] = flowdata[j];
   \   0000003E   0x....             LDR.N    R0,??DataTable4
   \   00000040   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   00000044   0xF854 0x1026      LDR      R1,[R4, R6, LSL #+2]
   \   00000048   0xF8C0 0x1130      STR      R1,[R0, #+304]
     51              }
   \   0000004C   0x1C76             ADDS     R6,R6,#+1
   \   0000004E   0xE7F4             B.N      ??FlowFilterInput_4
     52          
     53              float sum[4] = {0,0,0,0};
   \                     ??FlowFilterInput_5:
   \   00000050   0xA800             ADD      R0,SP,#+0
   \   00000052   0x2110             MOVS     R1,#+16
   \   00000054   0x.... 0x....      BL       __aeabi_memclr4
     54              for(i = 0; i < FLOWFILTER_AVG_NUM; i++)
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x0005             MOVS     R5,R0
   \                     ??FlowFilterInput_6:
   \   0000005C   0x2D14             CMP      R5,#+20
   \   0000005E   0xDA14             BGE.N    ??FlowFilterInput_7
     55              {
     56                  for(j = 0; j < 4; j++)
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x0006             MOVS     R6,R0
   \                     ??FlowFilterInput_8:
   \   00000064   0x2E04             CMP      R6,#+4
   \   00000066   0xDA0E             BGE.N    ??FlowFilterInput_9
     57                  {
     58                      sum[j] += s_f32FlowFilterHistroy[i][j];
   \   00000068   0xA800             ADD      R0,SP,#+0
   \   0000006A   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000006E   0x....             LDR.N    R1,??DataTable4
   \   00000070   0xEB11 0x1105      ADDS     R1,R1,R5, LSL #+4
   \   00000074   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00000078   0x.... 0x....      BL       __aeabi_fadd
   \   0000007C   0xA900             ADD      R1,SP,#+0
   \   0000007E   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
     59                  }
   \   00000082   0x1C76             ADDS     R6,R6,#+1
   \   00000084   0xE7EE             B.N      ??FlowFilterInput_8
     60              }
   \                     ??FlowFilterInput_9:
   \   00000086   0x1C6D             ADDS     R5,R5,#+1
   \   00000088   0xE7E8             B.N      ??FlowFilterInput_6
     61          
     62              for(j = 0; j < 4; j++)
   \                     ??FlowFilterInput_7:
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x0006             MOVS     R6,R0
   \                     ??FlowFilterInput_10:
   \   0000008E   0x2E04             CMP      R6,#+4
   \   00000090   0xDA0A             BGE.N    ??FlowFilterInput_11
     63              {
     64                  s_f32FlowFilterCurrent[j] = sum[j] * (1.0f/FLOWFILTER_AVG_NUM);
   \   00000092   0xA800             ADD      R0,SP,#+0
   \   00000094   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000098   0x....             LDR.N    R1,??DataTable4_2  ;; 0x3d4ccccd
   \   0000009A   0x.... 0x....      BL       __aeabi_fmul
   \   0000009E   0x....             LDR.N    R1,??DataTable4_1
   \   000000A0   0xF841 0x0026      STR      R0,[R1, R6, LSL #+2]
     65              }
   \   000000A4   0x1C76             ADDS     R6,R6,#+1
   \   000000A6   0xE7F2             B.N      ??FlowFilterInput_10
     66          }
   \                     ??FlowFilterInput_11:
   \   000000A8   0xBD7F             POP      {R0-R6,PC}       ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          float * FlowFilterGetCurrent(void)
     69          {
     70              return s_f32FlowFilterCurrent;
   \                     FlowFilterGetCurrent:
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x4770             BX       LR               ;; return
     71          }
     72          

   \                                 In section .text, align 2, keep-with-next
     73          float * FlowFilterGetCurrentFlow(void)
     74          {
     75              return &(s_f32FlowFilterCurrent[0]);
   \                     FlowFilterGetCurrentFlow:
   \   00000000   0x....             LDR.N    R0,??DataTable4_1
   \   00000002   0x4770             BX       LR               ;; return
     76          }
     77          

   \                                 In section .text, align 2, keep-with-next
     78          float * FlowFilterGetCurrentFlowComp(void)
     79          {
     80              return &(s_f32FlowFilterCurrent[2]);
   \                     FlowFilterGetCurrentFlowComp:
   \   00000000   0x....             LDR.N    R0,??DataTable4_3
   \   00000002   0x4770             BX       LR               ;; return
     81          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     s_f32FlowFilterHistroy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     s_f32FlowFilterCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x3D4CCCCD         DC32     0x3d4ccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     s_f32FlowFilterCurrent+0x8

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H, 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  FlowFilterGetCurrent
        0  FlowFilterGetCurrentFlow
        0  FlowFilterGetCurrentFlowComp
       32  FlowFilterInput
             32 -> __aeabi_fadd
             32 -> __aeabi_fmul
             32 -> __aeabi_memclr4
        0  InitFlowFilter


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant {(0.0F), (0.0F), (0.0F), (0.0F)}>
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  FlowFilterGetCurrent
       4  FlowFilterGetCurrentFlow
       4  FlowFilterGetCurrentFlowComp
     170  FlowFilterInput
      62  InitFlowFilter
      16  s_f32FlowFilterCurrent
     320  s_f32FlowFilterHistroy

 
 336 bytes in section .bss
  16 bytes in section .rodata
 260 bytes in section .text
 
 260 bytes of CODE  memory
  16 bytes of CONST memory
 336 bytes of DATA  memory

Errors: none
Warnings: none
