###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:23 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\ #
#                    LPLD\HW\HW_PIT.c                                         #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\ #
#                    LPLD\HW\HW_PIT.c -D LPLD_K60 -lCN                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\HW_PIT.lst                                      #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\HW_PIT.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\LPLD\HW\HW_PIT.c
      1          /**
      2           * @file HW_PIT.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief PIT底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0941             LSRS     R1,R0,#+5
   \   00000006   0x....             LDR.N    R2,??DataTable7  ;; 0xe000e100
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   0000000E   0x40A3             LSLS     R3,R3,R4
   \   00000010   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000004   0x0941             LSRS     R1,R0,#+5
   \   00000006   0x....             LDR.N    R2,??DataTable7_1  ;; 0xe000e180
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   0000000E   0x40A3             LSLS     R3,R3,R4
   \   00000010   0xF842 0x3021      STR      R3,[R2, R1, LSL #+2]
   \   00000014   0xBC10             POP      {R4}
   \   00000016   0x4770             BX       LR               ;; return
     23          #include "HW_PIT.h"
     24          
     25          //用户自定义中断服务函数数组

   \                                 In section .bss, align 4
     26          PIT_ISR_CALLBACK PIT_ISR[4];
   \                     PIT_ISR:
   \   00000000                      DS8 16
     27          
     28          /*
     29           * LPLD_PIT_Init
     30           * PIT通用初始化函数，选择PITx、配置中断周期、中断函数
     31           * 
     32           * 参数:
     33           *    pit_init_structure--PIT初始化结构体，
     34           *                        具体定义见PIT_InitTypeDef
     35           *
     36           * 输出:
     37           *    0--配置错误
     38           *    1--配置成功
     39           */

   \                                 In section .text, align 2, keep-with-next
     40          uint8 LPLD_PIT_Init(PIT_InitTypeDef pit_init_structure)
     41          { 
   \                     LPLD_PIT_Init:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB430             PUSH     {R4,R5}
     42            //计算定时加载值
     43            uint32 ldval = pit_init_structure.PIT_PeriodUs*(g_bus_clock/1000000)
     44                         + pit_init_structure.PIT_PeriodMs*1000*(g_bus_clock/1000000)
     45                         + pit_init_structure.PIT_PeriodS*1000000*(g_bus_clock/1000000);
   \   00000004   0x9803             LDR      R0,[SP, #+12]
   \   00000006   0x....             LDR.N    R1,??DataTable7_2
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x....             LDR.N    R2,??DataTable7_3  ;; 0xf4240
   \   0000000C   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000010   0x9A04             LDR      R2,[SP, #+16]
   \   00000012   0x....             LDR.N    R3,??DataTable7_2
   \   00000014   0x681B             LDR      R3,[R3, #+0]
   \   00000016   0x....             LDR.N    R4,??DataTable7_3  ;; 0xf4240
   \   00000018   0xFBB3 0xF3F4      UDIV     R3,R3,R4
   \   0000001C   0x435A             MULS     R2,R3,R2
   \   0000001E   0xF44F 0x737A      MOV      R3,#+1000
   \   00000022   0x435A             MULS     R2,R3,R2
   \   00000024   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000028   0x9905             LDR      R1,[SP, #+20]
   \   0000002A   0x....             LDR.N    R2,??DataTable7_2
   \   0000002C   0x6812             LDR      R2,[R2, #+0]
   \   0000002E   0x....             LDR.N    R3,??DataTable7_3  ;; 0xf4240
   \   00000030   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   00000034   0x4351             MULS     R1,R2,R1
   \   00000036   0x....             LDR.N    R2,??DataTable7_3  ;; 0xf4240
   \   00000038   0xFB02 0x0101      MLA      R1,R2,R1,R0
     46            PITx pitx = pit_init_structure.PIT_Pitx;
   \   0000003C   0xF89D 0x2008      LDRB     R2,[SP, #+8]
     47            PIT_ISR_CALLBACK isr_func = pit_init_structure.PIT_Isr;
   \   00000040   0x9B06             LDR      R3,[SP, #+24]
     48            
     49            //参数检查
     50            ASSERT( pitx <= PIT3);        //判断模块号
     51            ASSERT( ldval > 0);           //判断时加载值                
     52            
     53            //开启定时模块时钟
     54            SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
   \   00000042   0x....             LDR.N    R0,??DataTable7_4  ;; 0x4004803c
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF450 0x0000      ORRS     R0,R0,#0x800000
   \   0000004A   0x....             LDR.N    R4,??DataTable7_4  ;; 0x4004803c
   \   0000004C   0x6020             STR      R0,[R4, #+0]
     55            
     56            // 开启 PIT
     57            PIT->MCR = 0x00;
   \   0000004E   0x....             LDR.N    R0,??DataTable7_5  ;; 0x40037000
   \   00000050   0x2400             MOVS     R4,#+0
   \   00000052   0x6004             STR      R4,[R0, #+0]
     58           
     59            if(isr_func != NULL){
   \   00000054   0x0018             MOVS     R0,R3
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD009             BEQ.N    ??LPLD_PIT_Init_0
     60              PIT_ISR[pitx] = isr_func;
   \   0000005A   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000005C   0x....             LDR.N    R0,??DataTable7_6
   \   0000005E   0xF840 0x3022      STR      R3,[R0, R2, LSL #+2]
     61              //使能中断
     62              PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
   \   00000062   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000064   0x....             LDR.N    R0,??DataTable7_7  ;; 0x40037100
   \   00000066   0xEB10 0x1002      ADDS     R0,R0,R2, LSL #+4
   \   0000006A   0x2402             MOVS     R4,#+2
   \   0000006C   0x6084             STR      R4,[R0, #+8]
     63              //在NVIC中使能PIT中断
     64              //enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
     65            }
     66            
     67            //period = (period_ns/bus_period_ns)-1
     68            PIT->CHANNEL[pitx].LDVAL = ldval-1;
   \                     ??LPLD_PIT_Init_0:
   \   0000006E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000070   0x0110             LSLS     R0,R2,#+4
   \   00000072   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40037100
   \   00000074   0x1E4D             SUBS     R5,R1,#+1
   \   00000076   0x5105             STR      R5,[R0, R4]
     69            //使能中断
     70            //PIT->CHANNEL[pitx].TCTRL = PIT_TCTRL_TIE_MASK;
     71            //开始定时
     72            PIT->CHANNEL[pitx].TCTRL |= PIT_TCTRL_TEN_MASK;
   \   00000078   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000007A   0x....             LDR.N    R0,??DataTable7_7  ;; 0x40037100
   \   0000007C   0xEB10 0x1002      ADDS     R0,R0,R2, LSL #+4
   \   00000080   0x6880             LDR      R0,[R0, #+8]
   \   00000082   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000086   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000088   0x....             LDR.N    R4,??DataTable7_7  ;; 0x40037100
   \   0000008A   0xEB14 0x1402      ADDS     R4,R4,R2, LSL #+4
   \   0000008E   0x60A0             STR      R0,[R4, #+8]
     73            
     74            return 1;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0xBC30             POP      {R4,R5}
   \   00000094   0xB004             ADD      SP,SP,#+16
   \   00000096   0x4770             BX       LR               ;; return
     75          }
     76          
     77          /*
     78           * LPLD_PIT_Deinit
     79           * PIT反初始化函数，关闭选择的PITx
     80           * 
     81           * 参数:
     82           *    pit_init_structure--PIT初始化结构体，
     83           *                        具体定义见PIT_InitTypeDef
     84           *
     85           * 输出:
     86           *    无
     87           */

   \                                 In section .text, align 2, keep-with-next
     88          void LPLD_PIT_Deinit(PIT_InitTypeDef pit_init_structure)
     89          { 
   \                     LPLD_PIT_Deinit:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
     90            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
     91            
     92            //参数检查
     93            ASSERT( pitx <= PIT3);        //判断模块号              
     94          
     95            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \   00000008   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
     96          
     97            //禁用中断\停止定时
     98            PIT->CHANNEL[pitx].TCTRL = 0;
   \   00000012   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000014   0x....             LDR.N    R0,??DataTable7_7  ;; 0x40037100
   \   00000016   0xEB10 0x1004      ADDS     R0,R0,R4, LSL #+4
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x6081             STR      R1,[R0, #+8]
     99          }
   \   0000001E   0xBC10             POP      {R4}
   \   00000020   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    100          
    101          /*
    102           * LPLD_PIT_EnableIrq
    103           * 使能PITx中断
    104           * 
    105           * 参数:
    106           *    pit_init_structure--PIT初始化结构体，
    107           *                        具体定义见PIT_InitTypeDef
    108           *
    109           * 输出:
    110           *    无
    111           *
    112           */

   \                                 In section .text, align 2, keep-with-next
    113          void LPLD_PIT_EnableIrq(PIT_InitTypeDef pit_init_structure)
    114          {
   \                     LPLD_PIT_EnableIrq:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    115            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    116            
    117            //参数检查
    118            ASSERT( pitx <= PIT3);                //判断PITx
    119          
    120            enable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx)); 
   \   00000008   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       NVIC_EnableIRQ
    121          }
   \   00000012   0xBC10             POP      {R4}
   \   00000014   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    122          
    123          /*
    124           * LPLD_PIT_DisableIrq
    125           * 禁用PITx中断
    126           * 
    127           * 参数:
    128           *    pit_init_structure--PIT初始化结构体，
    129           *                        具体定义见PIT_InitTypeDef
    130           *
    131           * 输出:
    132           *    无
    133           *
    134           */

   \                                 In section .text, align 2, keep-with-next
    135          void LPLD_PIT_DisableIrq(PIT_InitTypeDef pit_init_structure)
    136          {
   \                     LPLD_PIT_DisableIrq:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
    137            PITx pitx = pit_init_structure.PIT_Pitx;
   \   00000004   0xF89D 0x4008      LDRB     R4,[SP, #+8]
    138            
    139            //参数检查
    140            ASSERT( pitx <= PIT3);                //判断PITx
    141            
    142            disable_irq((IRQn_Type)(PIT0_IRQn + (IRQn_Type)pitx));
   \   00000008   0xF114 0x0044      ADDS     R0,R4,#+68
   \   0000000C   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       NVIC_DisableIRQ
    143          }
   \   00000012   0xBC10             POP      {R4}
   \   00000014   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    144          
    145          
    146          /*
    147           * PIT0--PIT3中断处理函数
    148           * 与启动文件startup_K60.s中的中断向量表关联
    149           * 用户无需修改，程序自动进入对应通道中断函数
    150           */
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void PIT0_IRQHandler(void)
    153          {
   \                     PIT0_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    154          #if (UCOS_II > 0u)
    155            OS_CPU_SR  cpu_sr = 0u;
    156            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    157            OSIntEnter();
    158            OS_EXIT_CRITICAL();
    159          #endif
    160            
    161            //调用用户自定义中断服务
    162            PIT_ISR[0]();  
   \   00000002   0x....             LDR.N    R0,??DataTable7_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4780             BLX      R0
    163            //清除中断标志位
    164            PIT->CHANNEL[0].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable7_8  ;; 0x4003710c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable7_8  ;; 0x4003710c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    165            
    166          #if (UCOS_II > 0u)
    167            OSIntExit();          //告知系统此时即将离开中断服务子函数
    168          #endif
    169          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    170          void PIT1_IRQHandler(void)
    171          {
   \                     PIT1_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    172          #if (UCOS_II > 0u)
    173            OS_CPU_SR  cpu_sr = 0u;
    174            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    175            OSIntEnter();
    176            OS_EXIT_CRITICAL();
    177          #endif
    178            
    179            //调用用户自定义中断服务
    180            PIT_ISR[1]();  
   \   00000002   0x....             LDR.N    R0,??DataTable7_6
   \   00000004   0x6840             LDR      R0,[R0, #+4]
   \   00000006   0x4780             BLX      R0
    181            //清除中断标志位
    182            PIT->CHANNEL[1].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable7_9  ;; 0x4003711c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable7_9  ;; 0x4003711c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    183            
    184          #if (UCOS_II > 0u)
    185            OSIntExit();          //告知系统此时即将离开中断服务子函数
    186          #endif
    187          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    188          void PIT2_IRQHandler(void)
    189          {
   \                     PIT2_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    190          #if (UCOS_II > 0u)
    191            OS_CPU_SR  cpu_sr = 0u;
    192            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    193            OSIntEnter();
    194            OS_EXIT_CRITICAL();
    195          #endif
    196            
    197            //调用用户自定义中断服务
    198            PIT_ISR[2]();  
   \   00000002   0x....             LDR.N    R0,??DataTable7_6
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x4780             BLX      R0
    199            //清除中断标志位
    200            PIT->CHANNEL[2].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable7_10  ;; 0x4003712c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable7_10  ;; 0x4003712c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    201            
    202          #if (UCOS_II > 0u)
    203            OSIntExit();          //告知系统此时即将离开中断服务子函数
    204          #endif
    205          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    206          void PIT3_IRQHandler(void)
    207          {
   \                     PIT3_IRQHandler:
   \   00000000   0xB580             PUSH     {R7,LR}
    208          #if (UCOS_II > 0u)
    209            OS_CPU_SR  cpu_sr = 0u;
    210            OS_ENTER_CRITICAL(); //告知系统此时已经进入了中断服务子函数
    211            OSIntEnter();
    212            OS_EXIT_CRITICAL();
    213          #endif
    214            
    215            //调用用户自定义中断服务
    216            PIT_ISR[3]();  
   \   00000002   0x....             LDR.N    R0,??DataTable7_6
   \   00000004   0x68C0             LDR      R0,[R0, #+12]
   \   00000006   0x4780             BLX      R0
    217            //清除中断标志位
    218            PIT->CHANNEL[3].TFLG |= PIT_TFLG_TIF_MASK;
   \   00000008   0x....             LDR.N    R0,??DataTable7_11  ;; 0x4003713c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable7_11  ;; 0x4003713c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    219            
    220          #if (UCOS_II > 0u)
    221            OSIntExit();          //告知系统此时即将离开中断服务子函数
    222          #endif
    223          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x000F4240         DC32     0xf4240

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40037000         DC32     0x40037000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     PIT_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x40037100         DC32     0x40037100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x4003712C         DC32     0x4003712c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x4003713C         DC32     0x4003713c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  LPLD_PIT_Deinit
             24 -> NVIC_DisableIRQ
       24  LPLD_PIT_DisableIrq
             24 -> NVIC_DisableIRQ
       24  LPLD_PIT_EnableIrq
             24 -> NVIC_EnableIRQ
       24  LPLD_PIT_Init
        4  NVIC_DisableIRQ
        4  NVIC_EnableIRQ
        8  PIT0_IRQHandler
              8 -- Indirect call
        8  PIT1_IRQHandler
              8 -- Indirect call
        8  PIT2_IRQHandler
              8 -- Indirect call
        8  PIT3_IRQHandler
              8 -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
      36  LPLD_PIT_Deinit
      24  LPLD_PIT_DisableIrq
      24  LPLD_PIT_EnableIrq
     152  LPLD_PIT_Init
      24  NVIC_DisableIRQ
      24  NVIC_EnableIRQ
      22  PIT0_IRQHandler
      22  PIT1_IRQHandler
      22  PIT2_IRQHandler
      22  PIT3_IRQHandler
      16  PIT_ISR

 
  16 bytes in section .bss
 420 bytes in section .text
 
 420 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
