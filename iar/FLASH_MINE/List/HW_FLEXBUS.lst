###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:24 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\ #
#                    LPLD\HW\HW_FLEXBUS.c                                     #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\ #
#                    LPLD\HW\HW_FLEXBUS.c -D LPLD_K60 -lCN                    #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\HW_FLEXBUS.lst                                  #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\HW_FLEXBUS.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\lib\LPLD\HW\HW_FLEXBUS.c
      1          /**
      2           * @file HW_FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "HW_FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \   00000000   0x4004C018         DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004C014   
   \              0x4004C010   
   \              0x4004C00C   
   \              0x4004C008   
   \              0x4004B028   
   \   00000018   0x4004B024         DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004B020   
   \              0x4004B01C   
   \              0x4004B018   
   \              0x4004B014   
   \              0x4004B010   
   \   00000030   0x4004B008         DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004B004   
   \              0x4004B000   
   \              0x4004A048   
   \              0x4004A044   
   \              0x4004A040   
   \   00000048   0x4004A02C         DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004A028   
   \              0x4004A024   
   \              0x4004A020   
   \              0x4004A01C   
   \              0x4004A018   
   \   00000060   0x4004B03C         DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004B038   
   \              0x4004B034   
   \              0x4004B030   
   \              0x4004A05C   
   \              0x4004A058   
   \   00000078   0x4004A054         DC32 4004A054H, 4004A050H
   \              0x4004A050   
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * LPLD_FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 LPLD_FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     LPLD_FlexBus_Init:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \   00000006   0xF89D 0x1024      LDRB     R1,[SP, #+36]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \   0000000A   0x9A0A             LDR      R2,[SP, #+40]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \   0000000C   0x9B0B             LDR      R3,[SP, #+44]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \   0000000E   0xF89D 0x4030      LDRB     R4,[SP, #+48]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \   00000012   0xF89D 0x5031      LDRB     R5,[SP, #+49]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \   00000016   0xF89D 0x6032      LDRB     R6,[SP, #+50]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \   0000001A   0xF89D 0x7033      LDRB     R7,[SP, #+51]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \   0000001E   0xF89D 0xC034      LDRB     R12,[SP, #+52]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \   00000022   0xF89D 0xE035      LDRB     LR,[SP, #+53]
     58            uint32* pcr;
     59            uint8 n=0;
   \   00000026   0xF05F 0x0900      MOVS     R9,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
     64            ASSERT( addr_space != 0);    //寻址空间大小
     65            ASSERT( size <= 3);    //判断数据位宽
     66            ASSERT( rah <= 3);     //判断读地址保持时间
     67            ASSERT( wah <= 3);     //判断写地址保持时间
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x200C             MOVS     R0,#+12
   \   0000002E   0xF8DF 0xA2D0      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000032   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   00000036   0xF05F 0x0A00      MOVS     R10,#+0
   \   0000003A   0xF8C0 0xA004      STR      R10,[R0, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x200C             MOVS     R0,#+12
   \   00000042   0xF8DF 0xA2BC      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000046   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   0000004A   0x6002             STR      R2,[R0, #+0]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \   0000004C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004E   0x200C             MOVS     R0,#+12
   \   00000050   0xF8DF 0xA2AC      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000054   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0xEA5F 0x1A84      LSLS     R10,R4,#+6
   \   0000005E   0xF01A 0x0AC0      ANDS     R10,R10,#0xC0
   \   00000062   0xF8C0 0xA008      STR      R10,[R0, #+8]
     75            
     76            if(justied)
   \   00000066   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000068   0x2D00             CMP      R5,#+0
   \   0000006A   0xD011             BEQ.N    ??LPLD_FlexBus_Init_1
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \   0000006C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000006E   0x200C             MOVS     R0,#+12
   \   00000070   0xF8DF 0xA28C      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000074   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   00000078   0x6880             LDR      R0,[R0, #+8]
   \   0000007A   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   0000007E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000080   0xF05F 0x0A0C      MOVS     R10,#+12
   \   00000084   0xF8DF 0xB278      LDR.W    R11,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000088   0xFB0A 0xBA01      MLA      R10,R10,R1,R11
   \   0000008C   0xF8CA 0x0008      STR      R0,[R10, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??LPLD_FlexBus_Init_1:
   \   00000090   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000092   0x2E00             CMP      R6,#+0
   \   00000094   0xD011             BEQ.N    ??LPLD_FlexBus_Init_2
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \   00000096   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000098   0x200C             MOVS     R0,#+12
   \   0000009A   0xF8DF 0xA264      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   0000009E   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   000000A2   0x6880             LDR      R0,[R0, #+8]
   \   000000A4   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   000000A8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000AA   0xF05F 0x0A0C      MOVS     R10,#+12
   \   000000AE   0xF8DF 0xB250      LDR.W    R11,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   000000B2   0xFB0A 0xBA01      MLA      R10,R10,R1,R11
   \   000000B6   0xF8CA 0x0008      STR      R0,[R10, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??LPLD_FlexBus_Init_2:
   \   000000BA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BC   0x200C             MOVS     R0,#+12
   \   000000BE   0xF8DF 0xA240      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   000000C2   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   000000C6   0x6880             LDR      R0,[R0, #+8]
   \   000000C8   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000CA   0xEA5F 0x2A87      LSLS     R10,R7,#+10
   \   000000CE   0xF41A 0x4A7C      ANDS     R10,R10,#0xFC00
   \   000000D2   0xFA5F 0xFC8C      UXTB     R12,R12          ;; ZeroExt  R12,R12,#+24,#+24
   \   000000D6   0xEA5F 0x4B8C      LSLS     R11,R12,#+18
   \   000000DA   0xF41B 0x2B40      ANDS     R11,R11,#0xC0000
   \   000000DE   0xEA5B 0x0A0A      ORRS     R10,R11,R10
   \   000000E2   0xFA5F 0xFE8E      UXTB     LR,LR            ;; ZeroExt  LR,LR,#+24,#+24
   \   000000E6   0xEA5F 0x4B0E      LSLS     R11,LR,#+16
   \   000000EA   0xF41B 0x3B40      ANDS     R11,R11,#0x30000
   \   000000EE   0xEA5B 0x0A0A      ORRS     R10,R11,R10
   \   000000F2   0xEA5A 0x0000      ORRS     R0,R10,R0
   \   000000F6   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000F8   0xF05F 0x0A0C      MOVS     R10,#+12
   \   000000FC   0xF8DF 0xB200      LDR.W    R11,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000100   0xFB0A 0xBA01      MLA      R10,R10,R1,R11
   \   00000104   0xF8CA 0x0008      STR      R0,[R10, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \   00000108   0x1E58             SUBS     R0,R3,#+1
   \   0000010A   0x0C03             LSRS     R3,R0,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \   0000010C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000010E   0x200C             MOVS     R0,#+12
   \   00000110   0xF8DF 0xA1EC      LDR.W    R10,??LPLD_FlexBus_Init_0  ;; 0x4000c000
   \   00000114   0xFB00 0xA001      MLA      R0,R0,R1,R10
   \   00000118   0xEA5F 0x4A03      LSLS     R10,R3,#+16
   \   0000011C   0xF05A 0x0A01      ORRS     R10,R10,#0x1
   \   00000120   0xF8C0 0xA004      STR      R10,[R0, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \   00000124   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000126   0x2900             CMP      R1,#+0
   \   00000128   0xD105             BNE.N    ??LPLD_FlexBus_Init_3
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \   0000012A   0x4876             LDR.N    R0,??LPLD_FlexBus_Init_0+0x4  ;; 0x4004c004
   \   0000012C   0xF44F 0x6AA0      MOV      R10,#+1280
   \   00000130   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   00000134   0xE079             B.N      ??LPLD_FlexBus_Init_4
     99            }
    100            else if(Fbx == FB1)
   \                     ??LPLD_FlexBus_Init_3:
   \   00000136   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000138   0x2901             CMP      R1,#+1
   \   0000013A   0xD115             BNE.N    ??LPLD_FlexBus_Init_5
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \   0000013C   0x4872             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000013E   0x6800             LDR      R0,[R0, #+0]
   \   00000140   0x0100             LSLS     R0,R0,#+4        ;; ZeroExtS R0,R0,#+4,#+4
   \   00000142   0x0900             LSRS     R0,R0,#+4
   \   00000144   0xF8DF 0xA1C0      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000148   0xF8CA 0x0000      STR      R0,[R10, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \   0000014C   0x486E             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000014E   0x6800             LDR      R0,[R0, #+0]
   \   00000150   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   00000154   0xF8DF 0xA1B0      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000158   0xF8CA 0x0000      STR      R0,[R10, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \   0000015C   0x486B             LDR.N    R0,??LPLD_FlexBus_Init_0+0xC  ;; 0x4004c000
   \   0000015E   0xF44F 0x6AA0      MOV      R10,#+1280
   \   00000162   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   00000166   0xE060             B.N      ??LPLD_FlexBus_Init_4
    105            }
    106            else if(Fbx == FB2)
   \                     ??LPLD_FlexBus_Init_5:
   \   00000168   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000016A   0x2902             CMP      R1,#+2
   \   0000016C   0xD115             BNE.N    ??LPLD_FlexBus_Init_6
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \   0000016E   0x4866             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000170   0x6800             LDR      R0,[R0, #+0]
   \   00000172   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   00000176   0xF8DF 0xA190      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000017A   0xF8CA 0x0000      STR      R0,[R10, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \   0000017E   0x4862             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000180   0x6800             LDR      R0,[R0, #+0]
   \   00000182   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   00000186   0xF8DF 0xA180      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000018A   0xF8CA 0x0000      STR      R0,[R10, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \   0000018E   0x4860             LDR.N    R0,??LPLD_FlexBus_Init_0+0x10  ;; 0x4004b048
   \   00000190   0xF44F 0x6AA0      MOV      R10,#+1280
   \   00000194   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   00000198   0xE047             B.N      ??LPLD_FlexBus_Init_4
    111            }
    112            else if(Fbx == FB3)
   \                     ??LPLD_FlexBus_Init_6:
   \   0000019A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000019C   0x2903             CMP      R1,#+3
   \   0000019E   0xD115             BNE.N    ??LPLD_FlexBus_Init_7
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \   000001A0   0x4859             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001A2   0x6800             LDR      R0,[R0, #+0]
   \   000001A4   0xF430 0x4070      BICS     R0,R0,#0xF000
   \   000001A8   0xF8DF 0xA15C      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001AC   0xF8CA 0x0000      STR      R0,[R10, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \   000001B0   0x4855             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001B2   0x6800             LDR      R0,[R0, #+0]
   \   000001B4   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000001B8   0xF8DF 0xA14C      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001BC   0xF8CA 0x0000      STR      R0,[R10, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \   000001C0   0x4854             LDR.N    R0,??LPLD_FlexBus_Init_0+0x14  ;; 0x4004b04c
   \   000001C2   0xF44F 0x6AA0      MOV      R10,#+1280
   \   000001C6   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   000001CA   0xE02E             B.N      ??LPLD_FlexBus_Init_4
    117            }
    118            else if(Fbx == FB4)
   \                     ??LPLD_FlexBus_Init_7:
   \   000001CC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001CE   0x2904             CMP      R1,#+4
   \   000001D0   0xD114             BNE.N    ??LPLD_FlexBus_Init_8
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \   000001D2   0x484D             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001D4   0x6800             LDR      R0,[R0, #+0]
   \   000001D6   0xF030 0x6070      BICS     R0,R0,#0xF000000
   \   000001DA   0xF8DF 0xA12C      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001DE   0xF8CA 0x0000      STR      R0,[R10, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \   000001E2   0x4849             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001E4   0xF8DF 0xA120      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   000001E8   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   000001EC   0xF8C0 0xA000      STR      R10,[R0, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \   000001F0   0x4849             LDR.N    R0,??LPLD_FlexBus_Init_0+0x18  ;; 0x4004b044
   \   000001F2   0xF44F 0x6AA0      MOV      R10,#+1280
   \   000001F6   0xF8C0 0xA000      STR      R10,[R0, #+0]
   \   000001FA   0xE016             B.N      ??LPLD_FlexBus_Init_4
    123            }
    124            else if(Fbx == FB5)
   \                     ??LPLD_FlexBus_Init_8:
   \   000001FC   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001FE   0x2905             CMP      R1,#+5
   \   00000200   0xD113             BNE.N    ??LPLD_FlexBus_Init_4
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \   00000202   0x4841             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0xF430 0x0070      BICS     R0,R0,#0xF00000
   \   0000020A   0xF8DF 0xA0FC      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   0000020E   0xF8CA 0x0000      STR      R0,[R10, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \   00000212   0x483D             LDR.N    R0,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000214   0xF8DF 0xA0F0      LDR.W    R10,??LPLD_FlexBus_Init_0+0x8  ;; 0x4000c060
   \   00000218   0xF8DA 0xA000      LDR      R10,[R10, #+0]
   \   0000021C   0xF8C0 0xA000      STR      R10,[R0, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \   00000220   0x483E             LDR.N    R0,??LPLD_FlexBus_Init_0+0x1C  ;; 0x4004b040
   \   00000222   0xF44F 0x6AA0      MOV      R10,#+1280
   \   00000226   0xF8C0 0xA000      STR      R10,[R0, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??LPLD_FlexBus_Init_4:
   \   0000022A   0x2000             MOVS     R0,#+0
   \                     ??LPLD_FlexBus_Init_9:
   \   0000022C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000022E   0x2810             CMP      R0,#+16
   \   00000230   0xD20B             BCS.N    ??LPLD_FlexBus_Init_10
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \   00000232   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000234   0xF8DF 0xA0E8      LDR.W    R10,??LPLD_FlexBus_Init_0+0x20
   \   00000238   0xF85A 0xA020      LDR      R10,[R10, R0, LSL #+2]
   \   0000023C   0x46D0             MOV      R8,R10
    136              *pcr = PORT_PCR_MUX(5);    
   \   0000023E   0xF44F 0x6AA0      MOV      R10,#+1280
   \   00000242   0xF8C8 0xA000      STR      R10,[R8, #+0]
    137            }
   \   00000246   0x1C40             ADDS     R0,R0,#+1
   \   00000248   0xE7F0             B.N      ??LPLD_FlexBus_Init_9
    138            //使能其余的地址总线
    139            n=16;
   \                     ??LPLD_FlexBus_Init_10:
   \   0000024A   0x2010             MOVS     R0,#+16
   \   0000024C   0x4681             MOV      R9,R0
    140            for(uint8 i=0; i<16; i++)
   \   0000024E   0x2000             MOVS     R0,#+0
   \                     ??LPLD_FlexBus_Init_11:
   \   00000250   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000252   0x2810             CMP      R0,#+16
   \   00000254   0xD213             BCS.N    ??LPLD_FlexBus_Init_12
    141            {
    142              if((addr_space>>i)&0x01)
   \   00000256   0xFA33 0xFA00      LSRS     R10,R3,R0
   \   0000025A   0xEA5F 0x7ACA      LSLS     R10,R10,#+31
   \   0000025E   0xD50C             BPL.N    ??LPLD_FlexBus_Init_13
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \   00000260   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000264   0xF8DF 0xA0B8      LDR.W    R10,??LPLD_FlexBus_Init_0+0x20
   \   00000268   0xF85A 0xA029      LDR      R10,[R10, R9, LSL #+2]
   \   0000026C   0x46D0             MOV      R8,R10
   \   0000026E   0xF119 0x0901      ADDS     R9,R9,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \   00000272   0xF44F 0x6AA0      MOV      R10,#+1280
   \   00000276   0xF8C8 0xA000      STR      R10,[R8, #+0]
    146              }
    147            }
   \                     ??LPLD_FlexBus_Init_13:
   \   0000027A   0x1C40             ADDS     R0,R0,#+1
   \   0000027C   0xE7E8             B.N      ??LPLD_FlexBus_Init_11
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \                     ??LPLD_FlexBus_Init_12:
   \   0000027E   0x2000             MOVS     R0,#+0
   \   00000280   0x4681             MOV      R9,R0
    150            if(size == 0)
   \   00000282   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000284   0x2C00             CMP      R4,#+0
   \   00000286   0xD102             BNE.N    ??LPLD_FlexBus_Init_14
    151            {   
    152              n=16;
   \   00000288   0x2010             MOVS     R0,#+16
   \   0000028A   0x4681             MOV      R9,R0
   \   0000028C   0xE010             B.N      ??LPLD_FlexBus_Init_15
    153            }else if(justied==0 && size == 0x10)
   \                     ??LPLD_FlexBus_Init_14:
   \   0000028E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000290   0x2D00             CMP      R5,#+0
   \   00000292   0xD105             BNE.N    ??LPLD_FlexBus_Init_16
   \   00000294   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000296   0x2C10             CMP      R4,#+16
   \   00000298   0xD102             BNE.N    ??LPLD_FlexBus_Init_16
    154            {
    155              n=16;
   \   0000029A   0x2010             MOVS     R0,#+16
   \   0000029C   0x4681             MOV      R9,R0
   \   0000029E   0xE007             B.N      ??LPLD_FlexBus_Init_15
    156            }else if(justied==0 && size == 0x01)
   \                     ??LPLD_FlexBus_Init_16:
   \   000002A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000002A2   0x2D00             CMP      R5,#+0
   \   000002A4   0xD104             BNE.N    ??LPLD_FlexBus_Init_15
   \   000002A6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A8   0x2C01             CMP      R4,#+1
   \   000002AA   0xD101             BNE.N    ??LPLD_FlexBus_Init_15
    157            {
    158              n=8;
   \   000002AC   0x2008             MOVS     R0,#+8
   \   000002AE   0x4681             MOV      R9,R0
    159            }
    160            if(n!=0)
   \                     ??LPLD_FlexBus_Init_15:
   \   000002B0   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000002B4   0xF1B9 0x0F00      CMP      R9,#+0
   \   000002B8   0xD013             BEQ.N    ??LPLD_FlexBus_Init_17
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \   000002BA   0x201F             MOVS     R0,#+31
   \                     ??LPLD_FlexBus_Init_18:
   \   000002BC   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   000002C0   0xF1D9 0x0A1F      RSBS     R10,R9,#+31
   \   000002C4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C6   0x4582             CMP      R10,R0
   \   000002C8   0xDA0B             BGE.N    ??LPLD_FlexBus_Init_17
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \   000002CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002CC   0xF8DF 0xA050      LDR.W    R10,??LPLD_FlexBus_Init_0+0x20
   \   000002D0   0xF85A 0xA020      LDR      R10,[R10, R0, LSL #+2]
   \   000002D4   0x46D0             MOV      R8,R10
    165                *pcr = PORT_PCR_MUX(5);    
   \   000002D6   0xF44F 0x6AA0      MOV      R10,#+1280
   \   000002DA   0xF8C8 0xA000      STR      R10,[R8, #+0]
    166              }
   \   000002DE   0x1E40             SUBS     R0,R0,#+1
   \   000002E0   0xE7EC             B.N      ??LPLD_FlexBus_Init_18
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??LPLD_FlexBus_Init_17:
   \   000002E2   0x4810             LDR.N    R0,??LPLD_FlexBus_Init_0+0x24  ;; 0x4004a04c
   \   000002E4   0xF44F 0x6AA0      MOV      R10,#+1280
   \   000002E8   0xF8C0 0xA000      STR      R10,[R0, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \   000002EC   0x480E             LDR.N    R0,??LPLD_FlexBus_Init_0+0x28  ;; 0x4004b02c
   \   000002EE   0xF44F 0x6AA0      MOV      R10,#+1280
   \   000002F2   0xF8C0 0xA000      STR      R10,[R0, #+0]
    172                        
    173            return 1;
   \   000002F6   0x2001             MOVS     R0,#+1
   \   000002F8   0xE8BD 0x0FF0      POP      {R4-R11}
   \   000002FC   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FlexBus_Init_0:
   \   00000300   0x4000C000         DC32     0x4000c000
   \   00000304   0x4004C004         DC32     0x4004c004
   \   00000308   0x4000C060         DC32     0x4000c060
   \   0000030C   0x4004C000         DC32     0x4004c000
   \   00000310   0x4004B048         DC32     0x4004b048
   \   00000314   0x4004B04C         DC32     0x4004b04c
   \   00000318   0x4004B044         DC32     0x4004b044
   \   0000031C   0x4004B040         DC32     0x4004b040
   \   00000320   0x........         DC32     FB_PORT
   \   00000324   0x4004A04C         DC32     0x4004a04c
   \   00000328   0x4004B02C         DC32     0x4004b02c
    174          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       52  LPLD_FlexBus_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  FB_PORT
     812  LPLD_FlexBus_Init

 
 128 bytes in section .data
 812 bytes in section .text
 
 812 bytes of CODE memory
 128 bytes of DATA memory

Errors: none
Warnings: none
