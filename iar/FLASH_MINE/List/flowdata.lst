###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:19 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\flowdata.c                                 #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\flowdata.c -D LPLD_K60 -lCN                #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\flowdata.lst                                    #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\flowdata.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\SignalProcess\flowdata.c
      1          /****************************************************************************** 
      2           *       flowdata.c ----- The code to handle the data from the px4flow          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  flowdata.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/7/7 21:18:31                                                       *
     10           ******************************************************************************/
     11          #include "flowdata.h"
     12          

   \                                 In section .text, align 2, keep-with-next
     13          uint8 Flow_RefreshRawData(void)
     14          {
   \                     Flow_RefreshRawData:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
     15              uint8 ret = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     16          
     17              if(g_u8FlowNewData == 1)
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD126             BNE.N    ??Flow_RefreshRawData_0
     18              {
     19                  float flowdata[4];
     20                  flowdata[0] = g_sPx4flowData.pixel_flow_x;
   \   0000000C   0x....             LDR.N    R0,??DataTable2_1
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x9100             STR      R1,[SP, #+0]
     21                  flowdata[1] = g_sPx4flowData.pixel_flow_y;
   \   00000012   0x....             LDR.N    R0,??DataTable2_1
   \   00000014   0x6841             LDR      R1,[R0, #+4]
   \   00000016   0x9101             STR      R1,[SP, #+4]
     22                  if(CheckFloatUnvalid(g_sPx4flowData.flow_comp_m_x) == 0)
   \   00000018   0x....             LDR.N    R1,??DataTable2_1
   \   0000001A   0x6888             LDR      R0,[R1, #+8]
   \   0000001C   0x.... 0x....      BL       CheckFloatUnvalid
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD103             BNE.N    ??Flow_RefreshRawData_1
     23                  {
     24                      flowdata[2] = g_sPx4flowData.flow_comp_m_x;
   \   00000024   0x....             LDR.N    R0,??DataTable2_1
   \   00000026   0x6881             LDR      R1,[R0, #+8]
   \   00000028   0x9102             STR      R1,[SP, #+8]
   \   0000002A   0xE001             B.N      ??Flow_RefreshRawData_2
     25                  }
     26                  else
     27                  {
     28                      flowdata[2] = 0;
   \                     ??Flow_RefreshRawData_1:
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9002             STR      R0,[SP, #+8]
     29                  }
     30                  if(CheckFloatUnvalid(g_sPx4flowData.flow_comp_m_y) == 0)
   \                     ??Flow_RefreshRawData_2:
   \   00000030   0x....             LDR.N    R1,??DataTable2_1
   \   00000032   0x68C8             LDR      R0,[R1, #+12]
   \   00000034   0x.... 0x....      BL       CheckFloatUnvalid
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD103             BNE.N    ??Flow_RefreshRawData_3
     31                  {
     32                      flowdata[3] = g_sPx4flowData.flow_comp_m_y;
   \   0000003C   0x....             LDR.N    R0,??DataTable2_1
   \   0000003E   0x68C1             LDR      R1,[R0, #+12]
   \   00000040   0x9103             STR      R1,[SP, #+12]
   \   00000042   0xE001             B.N      ??Flow_RefreshRawData_4
     33                  }
     34                  else
     35                  {
     36                      flowdata[3] = 0;
   \                     ??Flow_RefreshRawData_3:
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x9003             STR      R0,[SP, #+12]
     37                  }
     38                  FlowFilterInput(flowdata);
   \                     ??Flow_RefreshRawData_4:
   \   00000048   0xA800             ADD      R0,SP,#+0
   \   0000004A   0x.... 0x....      BL       FlowFilterInput
     39                  g_u8FlowNewData = 0;
   \   0000004E   0x....             LDR.N    R0,??DataTable2
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x7001             STRB     R1,[R0, #+0]
     40                  ret = 1;
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x0004             MOVS     R4,R0
   \   00000058   0xE001             B.N      ??Flow_RefreshRawData_5
     41              }
     42              else
     43              {
     44                  ret = 0;
   \                     ??Flow_RefreshRawData_0:
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x0004             MOVS     R4,R0
     45              }
     46          
     47              return ret;
   \                     ??Flow_RefreshRawData_5:
   \   0000005E   0x0020             MOVS     R0,R4
   \   00000060   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000062   0xB004             ADD      SP,SP,#+16
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
     48          }
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void AddSpeedToPosition(float x_speed, float y_speed, float yaw_angle, float int_time, float * p_x_position, float * p_y_position)
     51          {
   \                     AddSpeedToPosition:
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x9F0F             LDR      R7,[SP, #+60]
     52              float yaw_angle_rad = yaw_angle / 57.2957795f;
   \   00000008   0x9803             LDR      R0,[SP, #+12]
   \   0000000A   0x....             LDR.N    R1,??DataTable2_2  ;; 0x42652ee1
   \   0000000C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000010   0x0004             MOVS     R4,R0
     53              float x_position_change = x_speed * int_time;
   \   00000012   0x9901             LDR      R1,[SP, #+4]
   \   00000014   0x9804             LDR      R0,[SP, #+16]
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x0005             MOVS     R5,R0
     54              float y_position_change = y_speed * int_time;
   \   0000001C   0x9902             LDR      R1,[SP, #+8]
   \   0000001E   0x9804             LDR      R0,[SP, #+16]
   \   00000020   0x.... 0x....      BL       __aeabi_fmul
   \   00000024   0x0006             MOVS     R6,R0
     55          
     56              *p_x_position += x_position_change * cos(yaw_angle_rad);
   \   00000026   0x980E             LDR      R0,[SP, #+56]
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x.... 0x....      BL       __aeabi_f2d
   \   0000002E   0x4682             MOV      R10,R0
   \   00000030   0x468B             MOV      R11,R1
   \   00000032   0x0028             MOVS     R0,R5
   \   00000034   0x.... 0x....      BL       __aeabi_f2d
   \   00000038   0x4680             MOV      R8,R0
   \   0000003A   0x4689             MOV      R9,R1
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       __aeabi_f2d
   \   00000042   0x.... 0x....      BL       cos
   \   00000046   0x4642             MOV      R2,R8
   \   00000048   0x464B             MOV      R3,R9
   \   0000004A   0x.... 0x....      BL       __aeabi_dmul
   \   0000004E   0x4652             MOV      R2,R10
   \   00000050   0x465B             MOV      R3,R11
   \   00000052   0x.... 0x....      BL       __aeabi_dadd
   \   00000056   0x.... 0x....      BL       __aeabi_d2f
   \   0000005A   0x990E             LDR      R1,[SP, #+56]
   \   0000005C   0x6008             STR      R0,[R1, #+0]
     57              *p_y_position += x_position_change * sin(yaw_angle_rad);
   \   0000005E   0x6838             LDR      R0,[R7, #+0]
   \   00000060   0x.... 0x....      BL       __aeabi_f2d
   \   00000064   0x4682             MOV      R10,R0
   \   00000066   0x468B             MOV      R11,R1
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0x.... 0x....      BL       __aeabi_f2d
   \   0000006E   0x4680             MOV      R8,R0
   \   00000070   0x4689             MOV      R9,R1
   \   00000072   0x0020             MOVS     R0,R4
   \   00000074   0x.... 0x....      BL       __aeabi_f2d
   \   00000078   0x.... 0x....      BL       sin
   \   0000007C   0x4642             MOV      R2,R8
   \   0000007E   0x464B             MOV      R3,R9
   \   00000080   0x.... 0x....      BL       __aeabi_dmul
   \   00000084   0x4652             MOV      R2,R10
   \   00000086   0x465B             MOV      R3,R11
   \   00000088   0x.... 0x....      BL       __aeabi_dadd
   \   0000008C   0x.... 0x....      BL       __aeabi_d2f
   \   00000090   0x6038             STR      R0,[R7, #+0]
     58              *p_x_position -= y_position_change * sin(yaw_angle_rad);
   \   00000092   0x980E             LDR      R0,[SP, #+56]
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x.... 0x....      BL       __aeabi_f2d
   \   0000009A   0x4682             MOV      R10,R0
   \   0000009C   0x468B             MOV      R11,R1
   \   0000009E   0x0030             MOVS     R0,R6
   \   000000A0   0x.... 0x....      BL       __aeabi_f2d
   \   000000A4   0x4680             MOV      R8,R0
   \   000000A6   0x4689             MOV      R9,R1
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0x.... 0x....      BL       __aeabi_f2d
   \   000000AE   0x.... 0x....      BL       sin
   \   000000B2   0x4642             MOV      R2,R8
   \   000000B4   0x464B             MOV      R3,R9
   \   000000B6   0x.... 0x....      BL       __aeabi_dmul
   \   000000BA   0x0002             MOVS     R2,R0
   \   000000BC   0x000B             MOVS     R3,R1
   \   000000BE   0x4650             MOV      R0,R10
   \   000000C0   0x4659             MOV      R1,R11
   \   000000C2   0x.... 0x....      BL       __aeabi_dsub
   \   000000C6   0x.... 0x....      BL       __aeabi_d2f
   \   000000CA   0x990E             LDR      R1,[SP, #+56]
   \   000000CC   0x6008             STR      R0,[R1, #+0]
     59              *p_y_position += y_position_change * cos(yaw_angle_rad);
   \   000000CE   0x6838             LDR      R0,[R7, #+0]
   \   000000D0   0x.... 0x....      BL       __aeabi_f2d
   \   000000D4   0x4682             MOV      R10,R0
   \   000000D6   0x468B             MOV      R11,R1
   \   000000D8   0x0030             MOVS     R0,R6
   \   000000DA   0x.... 0x....      BL       __aeabi_f2d
   \   000000DE   0x4680             MOV      R8,R0
   \   000000E0   0x4689             MOV      R9,R1
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0x.... 0x....      BL       __aeabi_f2d
   \   000000E8   0x.... 0x....      BL       cos
   \   000000EC   0x4642             MOV      R2,R8
   \   000000EE   0x464B             MOV      R3,R9
   \   000000F0   0x.... 0x....      BL       __aeabi_dmul
   \   000000F4   0x4652             MOV      R2,R10
   \   000000F6   0x465B             MOV      R3,R11
   \   000000F8   0x.... 0x....      BL       __aeabi_dadd
   \   000000FC   0x.... 0x....      BL       __aeabi_d2f
   \   00000100   0x6038             STR      R0,[R7, #+0]
     60          }
   \   00000102   0xB005             ADD      SP,SP,#+20
   \   00000104   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          int8 CheckFloatUnvalid(float data)
     63          {
   \                     CheckFloatUnvalid:
   \   00000000   0xB401             PUSH     {R0}
     64              uint32* data_men = (uint32*)&data;
   \   00000002   0xA900             ADD      R1,SP,#+0
     65              if(((*data_men)&0xFFC00000) == 0x7FC00000)
   \   00000004   0x6808             LDR      R0,[R1, #+0]
   \   00000006   0x0D80             LSRS     R0,R0,#+22
   \   00000008   0x0580             LSLS     R0,R0,#+22
   \   0000000A   0x....             LDR.N    R2,??DataTable2_3  ;; 0x7fc00000
   \   0000000C   0x4290             CMP      R0,R2
   \   0000000E   0xD101             BNE.N    ??CheckFloatUnvalid_0
     66              {
     67                  return 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE009             B.N      ??CheckFloatUnvalid_1
     68              }
     69              else if(((*data_men)&0xFFC00000) == 0xFFC00000)
   \                     ??CheckFloatUnvalid_0:
   \   00000014   0x6808             LDR      R0,[R1, #+0]
   \   00000016   0x0D80             LSRS     R0,R0,#+22
   \   00000018   0x0580             LSLS     R0,R0,#+22
   \   0000001A   0xF510 0x0F80      CMN      R0,#+4194304
   \   0000001E   0xD102             BNE.N    ??CheckFloatUnvalid_2
     70              {
     71                  return -1;
   \   00000020   0xF05F 0x30FF      MOVS     R0,#-1
   \   00000024   0xE000             B.N      ??CheckFloatUnvalid_1
     72              }
     73              else
     74              {
     75                  return 0;
   \                     ??CheckFloatUnvalid_2:
   \   00000026   0x2000             MOVS     R0,#+0
   \                     ??CheckFloatUnvalid_1:
   \   00000028   0xB001             ADD      SP,SP,#+4
   \   0000002A   0x4770             BX       LR               ;; return
     76              }
     77          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     g_u8FlowNewData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     g_sPx4flowData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x42652EE1         DC32     0x42652ee1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x7FC00000         DC32     0x7fc00000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       56  AddSpeedToPosition
             56 -> __aeabi_d2f
             56 -> __aeabi_dadd
             56 -> __aeabi_dmul
             56 -> __aeabi_dsub
             56 -> __aeabi_f2d
             56 -> __aeabi_fdiv
             56 -> __aeabi_fmul
             56 -> cos
             56 -> sin
        4  CheckFloatUnvalid
       24  Flow_RefreshRawData
             24 -> CheckFloatUnvalid
             24 -> FlowFilterInput


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
     264  AddSpeedToPosition
      44  CheckFloatUnvalid
     102  Flow_RefreshRawData

 
 426 bytes in section .text
 
 426 bytes of CODE memory

Errors: none
Warnings: none
