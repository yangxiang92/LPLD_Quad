###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:17 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\MS5611data.c                               #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\MS5611data.c -D LPLD_K60 -lCN              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\MS5611data.lst                                  #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\MS5611data.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\SignalProcess\MS5611data.c
      1          /****************************************************************************** 
      2           *       MS5611data.c ----- The data processing of MS5611          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  MS5611data.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/8 19:55:45                                                       *
     10           ******************************************************************************/
     11          #include "MS5611data.h"
     12          

   \                                 In section .bss, align 8
     13          MS5611_DataStruct g_sMS5611DataCopy;
   \                     g_sMS5611DataCopy:
   \   00000000                      DS8 80

   \                                 In section .bss, align 4
     14          float g_f32RawAltitude = 0;
   \                     g_f32RawAltitude:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          float g_f32FiltedAltitude = 0;
   \                     g_f32FiltedAltitude:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          float g_f32ReferenceAltitude = 0;
   \                     g_f32ReferenceAltitude:
   \   00000000                      DS8 4
     17          

   \                                 In section .text, align 2, keep-with-next
     18          void MS5611_RefreshData(void)
     19          {
   \                     MS5611_RefreshData:
   \   00000000   0xB580             PUSH     {R7,LR}
     20              static uint32 convert_time_cnt = 0;
     21              convert_time_cnt++;
   \   00000002   0x....             LDR.N    R0,??DataTable3
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x....             LDR.N    R1,??DataTable3
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     22          
     23              if(convert_time_cnt > (MS5611_SAMPLE_PERIOD_MS / PROGRAM_PERIOD_MS))
   \   0000000C   0x....             LDR.N    R0,??DataTable3
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2806             CMP      R0,#+6
   \   00000012   0xD316             BCC.N    ??MS5611_RefreshData_0
     24              {
     25                  MS5611_Read(&MS5611_data_struct, MS5611_D1_OSR_4096); 
   \   00000014   0x2148             MOVS     R1,#+72
   \   00000016   0x....             LDR.N    R0,??DataTable3_1
   \   00000018   0x.... 0x....      BL       MS5611_Read
     26                  g_sMS5611DataCopy = MS5611_data_struct;
   \   0000001C   0x....             LDR.N    R0,??DataTable3_2
   \   0000001E   0x....             LDR.N    R1,??DataTable3_1
   \   00000020   0x2250             MOVS     R2,#+80
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
     27                  if(MS5611_data_struct.HighReady == 1)
   \   00000026   0x....             LDR.N    R0,??DataTable3_1
   \   00000028   0xF890 0x0048      LDRB     R0,[R0, #+72]
   \   0000002C   0x2801             CMP      R0,#+1
   \   0000002E   0xD105             BNE.N    ??MS5611_RefreshData_1
     28                  {
     29                      RefreshAltitude();
   \   00000030   0x.... 0x....      BL       RefreshAltitude
     30                      MS5611_data_struct.HighReady = 0;
   \   00000034   0x....             LDR.N    R0,??DataTable3_1
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xF880 0x1048      STRB     R1,[R0, #+72]
     31                  }
     32                  convert_time_cnt = 0;
   \                     ??MS5611_RefreshData_1:
   \   0000003C   0x....             LDR.N    R0,??DataTable3
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6001             STR      R1,[R0, #+0]
     33              }
     34          }
   \                     ??MS5611_RefreshData_0:
   \   00000042   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??convert_time_cnt:
   \   00000000                      DS8 4
     35          

   \                                 In section .text, align 2, keep-with-next
     36          float RefreshAltitude(void)
     37          {
   \                     RefreshAltitude:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
     38              static float history_altitude[ALTITUDE_FILTER_SAMPLE_AMOUNT] = {0};
     39              static int history_amount = 0;
     40              float filter_sum = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     41              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     42          
     43              g_f32RawAltitude = g_sMS5611DataCopy.High / 100;
   \   00000006   0x....             LDR.N    R0,??DataTable3_2
   \   00000008   0x6C40             LDR      R0,[R0, #+68]
   \   0000000A   0x....             LDR.N    R1,??DataTable3_3  ;; 0x42c80000
   \   0000000C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000010   0x....             LDR.N    R1,??DataTable3_4
   \   00000012   0x6008             STR      R0,[R1, #+0]
     44              
     45              if(history_amount < ALTITUDE_FILTER_SAMPLE_AMOUNT)
   \   00000014   0x....             LDR.N    R0,??DataTable3_5
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2810             CMP      R0,#+16
   \   0000001A   0xDA27             BGE.N    ??RefreshAltitude_0
     46              {
     47                  history_altitude[history_amount] = g_f32RawAltitude;
   \   0000001C   0x....             LDR.N    R0,??DataTable3_5
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x....             LDR.N    R1,??DataTable3_6
   \   00000022   0x....             LDR.N    R2,??DataTable3_4
   \   00000024   0x6812             LDR      R2,[R2, #+0]
   \   00000026   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
     48                  for(i = 0; i < (history_amount + 1); i++)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0005             MOVS     R5,R0
   \                     ??RefreshAltitude_1:
   \   0000002E   0x....             LDR.N    R0,??DataTable3_5
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x1C40             ADDS     R0,R0,#+1
   \   00000034   0x4285             CMP      R5,R0
   \   00000036   0xDA08             BGE.N    ??RefreshAltitude_2
     49                  {
     50                      filter_sum += history_altitude[i];
   \   00000038   0x....             LDR.N    R0,??DataTable3_6
   \   0000003A   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000003E   0x0021             MOVS     R1,R4
   \   00000040   0x.... 0x....      BL       __aeabi_fadd
   \   00000044   0x0004             MOVS     R4,R0
     51                  }
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
   \   00000048   0xE7F1             B.N      ??RefreshAltitude_1
     52                  g_f32FiltedAltitude = filter_sum / (history_amount + 1);
   \                     ??RefreshAltitude_2:
   \   0000004A   0x....             LDR.N    R0,??DataTable3_5
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0x.... 0x....      BL       __aeabi_i2f
   \   00000054   0x0001             MOVS     R1,R0
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0x.... 0x....      BL       __aeabi_fdiv
   \   0000005C   0x....             LDR.N    R1,??DataTable3_7
   \   0000005E   0x6008             STR      R0,[R1, #+0]
     53                  history_amount ++;
   \   00000060   0x....             LDR.N    R0,??DataTable3_5
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0x....             LDR.N    R1,??DataTable3_5
   \   00000068   0x6008             STR      R0,[R1, #+0]
   \   0000006A   0xE024             B.N      ??RefreshAltitude_3
     54              }
     55              else
     56              {
     57                  for(i = 0 ; i < (ALTITUDE_FILTER_SAMPLE_AMOUNT - 1); i++)
   \                     ??RefreshAltitude_0:
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x0005             MOVS     R5,R0
   \                     ??RefreshAltitude_4:
   \   00000070   0x2D0F             CMP      R5,#+15
   \   00000072   0xDA08             BGE.N    ??RefreshAltitude_5
     58                  {
     59                      history_altitude[i] = history_altitude[i+1];
   \   00000074   0x....             LDR.N    R0,??DataTable3_6
   \   00000076   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   0000007A   0x6840             LDR      R0,[R0, #+4]
   \   0000007C   0x....             LDR.N    R1,??DataTable3_6
   \   0000007E   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
     60                  }
   \   00000082   0x1C6D             ADDS     R5,R5,#+1
   \   00000084   0xE7F4             B.N      ??RefreshAltitude_4
     61                  history_altitude[ALTITUDE_FILTER_SAMPLE_AMOUNT - 1] = g_f32RawAltitude;
   \                     ??RefreshAltitude_5:
   \   00000086   0x....             LDR.N    R0,??DataTable3_6
   \   00000088   0x....             LDR.N    R1,??DataTable3_4
   \   0000008A   0x6809             LDR      R1,[R1, #+0]
   \   0000008C   0x63C1             STR      R1,[R0, #+60]
     62                  for(i = 0; i < ALTITUDE_FILTER_SAMPLE_AMOUNT; i++)
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x0005             MOVS     R5,R0
   \                     ??RefreshAltitude_6:
   \   00000092   0x2D10             CMP      R5,#+16
   \   00000094   0xDA08             BGE.N    ??RefreshAltitude_7
     63                  {
     64                      filter_sum += history_altitude[i];
   \   00000096   0x....             LDR.N    R0,??DataTable3_6
   \   00000098   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   0000009C   0x0021             MOVS     R1,R4
   \   0000009E   0x.... 0x....      BL       __aeabi_fadd
   \   000000A2   0x0004             MOVS     R4,R0
     65                  }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \   000000A6   0xE7F4             B.N      ??RefreshAltitude_6
     66                  g_f32FiltedAltitude = filter_sum / ALTITUDE_FILTER_SAMPLE_AMOUNT;
   \                     ??RefreshAltitude_7:
   \   000000A8   0x0020             MOVS     R0,R4
   \   000000AA   0xF05F 0x4183      MOVS     R1,#+1098907648
   \   000000AE   0x.... 0x....      BL       __aeabi_fdiv
   \   000000B2   0x....             LDR.N    R1,??DataTable3_7
   \   000000B4   0x6008             STR      R0,[R1, #+0]
     67              }
     68          
     69              return g_f32FiltedAltitude;
   \                     ??RefreshAltitude_3:
   \   000000B6   0x....             LDR.N    R0,??DataTable3_7
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0xBD30             POP      {R4,R5,PC}       ;; return
     70          }

   \                                 In section .bss, align 4
   \                     ??history_altitude:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
   \                     ??history_amount:
   \   00000000                      DS8 4
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void InitAltitude(void)
     73          {
   \                     InitAltitude:
   \   00000000   0xB500             PUSH     {LR}
     74              g_f32ReferenceAltitude = MS5611_data_struct.High / 100;   
   \   00000002   0x....             LDR.N    R0,??DataTable3_1
   \   00000004   0x6C40             LDR      R0,[R0, #+68]
   \   00000006   0x....             LDR.N    R1,??DataTable3_3  ;; 0x42c80000
   \   00000008   0x.... 0x....      BL       __aeabi_fdiv
   \   0000000C   0x....             LDR.N    R1,??DataTable3_8
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     75          }
   \   00000010   0xBD00             POP      {PC}             ;; return
     76          

   \                                 In section .text, align 2, keep-with-next
     77          float GetHighByAltitude(void)
     78          {
   \                     GetHighByAltitude:
   \   00000000   0xB500             PUSH     {LR}
     79              return (g_f32FiltedAltitude - g_f32ReferenceAltitude);
   \   00000002   0x....             LDR.N    R0,??DataTable3_7
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable3_8
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x.... 0x....      BL       __aeabi_fsub
   \   0000000E   0xBD00             POP      {PC}             ;; return
     80          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     ??convert_time_cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     MS5611_data_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     g_sMS5611DataCopy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     g_f32RawAltitude

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     ??history_amount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     ??history_altitude

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     g_f32FiltedAltitude

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     g_f32ReferenceAltitude

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  GetHighByAltitude
              4 -> __aeabi_fsub
        4  InitAltitude
              4 -> __aeabi_fdiv
        8  MS5611_RefreshData
              8 -> MS5611_Read
              8 -> RefreshAltitude
              8 -> __aeabi_memcpy4
       12  RefreshAltitude
             12 -> __aeabi_fadd
             12 -> __aeabi_fdiv
             12 -> __aeabi_i2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      16  GetHighByAltitude
      18  InitAltitude
      68  MS5611_RefreshData
     188  RefreshAltitude
       4  convert_time_cnt
       4  g_f32FiltedAltitude
       4  g_f32RawAltitude
       4  g_f32ReferenceAltitude
      80  g_sMS5611DataCopy
      64  history_altitude
       4  history_amount

 
 164 bytes in section .bss
 326 bytes in section .text
 
 326 bytes of CODE memory
 164 bytes of DATA memory

Errors: none
Warnings: none
