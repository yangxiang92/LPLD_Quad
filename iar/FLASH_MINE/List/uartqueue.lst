###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:44 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    Communicate\uartqueue.c                                  #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    Communicate\uartqueue.c -D LPLD_K60 -lCN                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\uartqueue.lst                                   #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\uartqueue.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\Communicate\uartqueue.c
      1          /****************************************************************************** 
      2           *       uartqueue.c ----- The code to use queue to send uart data          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  uartqueue.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/13 21:42:53                                                       *
     10           ******************************************************************************/
     11          #include "uartqueue.h"
     12          

   \                                 In section .bss, align 4
     13          MyQueue * s_sUARTQueue[6]={NULL,NULL,NULL,NULL,NULL,NULL};
   \                     s_sUARTQueue:
   \   00000000                      DS8 24

   \                                 In section .bss, align 4
     14          MyQueue * s_sUARTRecvQueue[6]={NULL,NULL,NULL,NULL,NULL,NULL};
   \                     s_sUARTRecvQueue:
   \   00000000                      DS8 24
     15          

   \                                 In section .text, align 2, keep-with-next
     16          void InitUartQueue(UART_Type * uartx, int16 buf_size)
     17          {
   \                     InitUartQueue:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     18              if(uartx == UART0)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD107             BNE.N    ??InitUartQueue_0
     19              {
     20                  s_sUARTQueue[0] = CreateMyQueue(buf_size);
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0x.... 0x....      BL       CreateMyQueue
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE03A             B.N      ??InitUartQueue_1
     21              }
     22              else if(uartx == UART1)
   \                     ??InitUartQueue_0:
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD107             BNE.N    ??InitUartQueue_2
     23              {
     24                  s_sUARTQueue[1] = CreateMyQueue(buf_size);
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       CreateMyQueue
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   00000032   0x6048             STR      R0,[R1, #+4]
   \   00000034   0xE02E             B.N      ??InitUartQueue_1
     25              }
     26              else if(uartx == UART2)
   \                     ??InitUartQueue_2:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD107             BNE.N    ??InitUartQueue_3
     27              {
     28                  s_sUARTQueue[2] = CreateMyQueue(buf_size);
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0x.... 0x....      BL       CreateMyQueue
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   0000004A   0x6088             STR      R0,[R1, #+8]
   \   0000004C   0xE022             B.N      ??InitUartQueue_1
     29              }
     30              else if(uartx == UART3)
   \                     ??InitUartQueue_3:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD107             BNE.N    ??InitUartQueue_4
     31              {
     32                  s_sUARTQueue[3] = CreateMyQueue(buf_size);
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005A   0x.... 0x....      BL       CreateMyQueue
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   00000062   0x60C8             STR      R0,[R1, #+12]
   \   00000064   0xE016             B.N      ??InitUartQueue_1
     33              }
     34              else if(uartx == UART4)
   \                     ??InitUartQueue_4:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD107             BNE.N    ??InitUartQueue_5
     35              {
     36                  s_sUARTQueue[4] = CreateMyQueue(buf_size);
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0x.... 0x....      BL       CreateMyQueue
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   0000007A   0x6108             STR      R0,[R1, #+16]
   \   0000007C   0xE00A             B.N      ??InitUartQueue_1
     37              }
     38              else if(uartx == UART5)
   \                     ??InitUartQueue_5:
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x400eb000
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD106             BNE.N    ??InitUartQueue_1
     39              {
     40                  s_sUARTQueue[5] = CreateMyQueue(buf_size);
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008A   0x.... 0x....      BL       CreateMyQueue
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable15_1
   \   00000092   0x6148             STR      R0,[R1, #+20]
     41              }
     42          }
   \                     ??InitUartQueue_1:
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void DestoryUartQueue(UART_Type * uartx)
     45          {
   \                     DestoryUartQueue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     46              if(uartx == UART0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD105             BNE.N    ??DestoryUartQueue_0
     47              {
     48                  DestoryMyQueue(s_sUARTQueue[0]);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       DestoryMyQueue
   \   00000016   0xE030             B.N      ??DestoryUartQueue_1
     49              }
     50              else if(uartx == UART1)
   \                     ??DestoryUartQueue_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD105             BNE.N    ??DestoryUartQueue_2
     51              {
     52                  DestoryMyQueue(s_sUARTQueue[1]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       DestoryMyQueue
   \   0000002A   0xE026             B.N      ??DestoryUartQueue_1
     53              }
     54              else if(uartx == UART2)
   \                     ??DestoryUartQueue_2:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD105             BNE.N    ??DestoryUartQueue_3
     55              {
     56                  DestoryMyQueue(s_sUARTQueue[2]);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x.... 0x....      BL       DestoryMyQueue
   \   0000003E   0xE01C             B.N      ??DestoryUartQueue_1
     57              }
     58              else if(uartx == UART3)
   \                     ??DestoryUartQueue_3:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD105             BNE.N    ??DestoryUartQueue_4
     59              {
     60                  DestoryMyQueue(s_sUARTQueue[3]);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x.... 0x....      BL       DestoryMyQueue
   \   00000052   0xE012             B.N      ??DestoryUartQueue_1
     61              }
     62              else if(uartx == UART4)
   \                     ??DestoryUartQueue_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD105             BNE.N    ??DestoryUartQueue_5
     63              {
     64                  DestoryMyQueue(s_sUARTQueue[4]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x.... 0x....      BL       DestoryMyQueue
   \   00000066   0xE008             B.N      ??DestoryUartQueue_1
     65              }
     66              else if(uartx == UART5)
   \                     ??DestoryUartQueue_5:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x400eb000
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD104             BNE.N    ??DestoryUartQueue_1
     67              {
     68                  DestoryMyQueue(s_sUARTQueue[5]);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000074   0x6940             LDR      R0,[R0, #+20]
   \   00000076   0x.... 0x....      BL       DestoryMyQueue
     69              }    
     70          }
   \                     ??DestoryUartQueue_1:
   \   0000007A   0xBD10             POP      {R4,PC}          ;; return
     71          

   \                                 In section .text, align 2, keep-with-next
     72          int16 GetUartQueueSize(UART_Type* uartx)
     73          {
   \                     GetUartQueueSize:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     74              if(uartx == UART0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD105             BNE.N    ??GetUartQueueSize_0
     75              {
     76                  return GetMyQueueSize(s_sUARTQueue[0]);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       GetMyQueueSize
   \   00000016   0xE02C             B.N      ??GetUartQueueSize_1
     77              }
     78              else if(uartx == UART1)
   \                     ??GetUartQueueSize_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD105             BNE.N    ??GetUartQueueSize_2
     79              {
     80                  return GetMyQueueSize(s_sUARTQueue[1]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       GetMyQueueSize
   \   0000002A   0xE022             B.N      ??GetUartQueueSize_1
     81              }
     82              else if(uartx == UART2)
   \                     ??GetUartQueueSize_2:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD105             BNE.N    ??GetUartQueueSize_3
     83              {
     84                  return GetMyQueueSize(s_sUARTQueue[2]);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x.... 0x....      BL       GetMyQueueSize
   \   0000003E   0xE018             B.N      ??GetUartQueueSize_1
     85              }
     86              else if(uartx == UART3)
   \                     ??GetUartQueueSize_3:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD105             BNE.N    ??GetUartQueueSize_4
     87              {
     88                  return GetMyQueueSize(s_sUARTQueue[3]);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x.... 0x....      BL       GetMyQueueSize
   \   00000052   0xE00E             B.N      ??GetUartQueueSize_1
     89              }
     90              else if(uartx == UART4)
   \                     ??GetUartQueueSize_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD105             BNE.N    ??GetUartQueueSize_5
     91              {
     92                  return GetMyQueueSize(s_sUARTQueue[4]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x.... 0x....      BL       GetMyQueueSize
   \   00000066   0xE004             B.N      ??GetUartQueueSize_1
     93              }
     94              else
     95              {
     96                  return GetMyQueueSize(s_sUARTQueue[5]);
   \                     ??GetUartQueueSize_5:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000006C   0x6940             LDR      R0,[R0, #+20]
   \   0000006E   0x.... 0x....      BL       GetMyQueueSize
   \                     ??GetUartQueueSize_1:
   \   00000072   0xBD10             POP      {R4,PC}          ;; return
     97              }        
     98          }
     99          

   \                                 In section .text, align 2, keep-with-next
    100          uint8 IsUartQueueEmpty(UART_Type * uartx)
    101          {
   \                     IsUartQueueEmpty:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    102              if(uartx == UART0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD105             BNE.N    ??IsUartQueueEmpty_0
    103              {
    104                  return IsMyQueueEmpty(s_sUARTQueue[0]);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000016   0xE02C             B.N      ??IsUartQueueEmpty_1
    105              }
    106              else if(uartx == UART1)
   \                     ??IsUartQueueEmpty_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD105             BNE.N    ??IsUartQueueEmpty_2
    107              {
    108                  return IsMyQueueEmpty(s_sUARTQueue[1]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       IsMyQueueEmpty
   \   0000002A   0xE022             B.N      ??IsUartQueueEmpty_1
    109              }
    110              else if(uartx == UART2)
   \                     ??IsUartQueueEmpty_2:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD105             BNE.N    ??IsUartQueueEmpty_3
    111              {
    112                  return IsMyQueueEmpty(s_sUARTQueue[2]);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x.... 0x....      BL       IsMyQueueEmpty
   \   0000003E   0xE018             B.N      ??IsUartQueueEmpty_1
    113              }
    114              else if(uartx == UART3)
   \                     ??IsUartQueueEmpty_3:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD105             BNE.N    ??IsUartQueueEmpty_4
    115              {
    116                  return IsMyQueueEmpty(s_sUARTQueue[3]);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000052   0xE00E             B.N      ??IsUartQueueEmpty_1
    117              }
    118              else if(uartx == UART4)
   \                     ??IsUartQueueEmpty_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD105             BNE.N    ??IsUartQueueEmpty_5
    119              {
    120                  return IsMyQueueEmpty(s_sUARTQueue[4]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000066   0xE004             B.N      ??IsUartQueueEmpty_1
    121              }
    122              else
    123              {
    124                  return IsMyQueueEmpty(s_sUARTQueue[5]);
   \                     ??IsUartQueueEmpty_5:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000006C   0x6940             LDR      R0,[R0, #+20]
   \   0000006E   0x.... 0x....      BL       IsMyQueueEmpty
   \                     ??IsUartQueueEmpty_1:
   \   00000072   0xBD10             POP      {R4,PC}          ;; return
    125              }            
    126          }
    127          

   \                                 In section .text, align 2, keep-with-next
    128          uint8 IsUartQueueFull(UART_Type * uartx)
    129          {
   \                     IsUartQueueFull:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    130              if(uartx == UART0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD105             BNE.N    ??IsUartQueueFull_0
    131              {
    132                  return IsMyQueueFull(s_sUARTQueue[0]);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       IsMyQueueFull
   \   00000016   0xE02C             B.N      ??IsUartQueueFull_1
    133              }
    134              else if(uartx == UART1)
   \                     ??IsUartQueueFull_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD105             BNE.N    ??IsUartQueueFull_2
    135              {
    136                  return IsMyQueueFull(s_sUARTQueue[1]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       IsMyQueueFull
   \   0000002A   0xE022             B.N      ??IsUartQueueFull_1
    137              }
    138              else if(uartx == UART2)
   \                     ??IsUartQueueFull_2:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD105             BNE.N    ??IsUartQueueFull_3
    139              {
    140                  return IsMyQueueFull(s_sUARTQueue[2]);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x.... 0x....      BL       IsMyQueueFull
   \   0000003E   0xE018             B.N      ??IsUartQueueFull_1
    141              }
    142              else if(uartx == UART3)
   \                     ??IsUartQueueFull_3:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD105             BNE.N    ??IsUartQueueFull_4
    143              {
    144                  return IsMyQueueFull(s_sUARTQueue[3]);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x.... 0x....      BL       IsMyQueueFull
   \   00000052   0xE00E             B.N      ??IsUartQueueFull_1
    145              }
    146              else if(uartx == UART4)
   \                     ??IsUartQueueFull_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD105             BNE.N    ??IsUartQueueFull_5
    147              {
    148                  return IsMyQueueFull(s_sUARTQueue[4]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x.... 0x....      BL       IsMyQueueFull
   \   00000066   0xE004             B.N      ??IsUartQueueFull_1
    149              }
    150              else
    151              {
    152                  return IsMyQueueFull(s_sUARTQueue[5]);
   \                     ??IsUartQueueFull_5:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000006C   0x6940             LDR      R0,[R0, #+20]
   \   0000006E   0x.... 0x....      BL       IsMyQueueFull
   \                     ??IsUartQueueFull_1:
   \   00000072   0xBD10             POP      {R4,PC}          ;; return
    153              }                
    154          }
    155          

   \                                 In section .text, align 2, keep-with-next
    156          uint8 PushUartQueue(UART_Type * uartx, int8 data)
    157          {
   \                     PushUartQueue:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    158              if(uartx == UART0)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD107             BNE.N    ??PushUartQueue_0
    159              {
    160                  return PushMyQueue(s_sUARTQueue[0], data);
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       PushMyQueue
   \   0000001C   0xE036             B.N      ??PushUartQueue_1
    161              }
    162              else if(uartx == UART1)
   \                     ??PushUartQueue_0:
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD107             BNE.N    ??PushUartQueue_2
    163              {
    164                  return PushMyQueue(s_sUARTQueue[1], data);
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000002E   0x6840             LDR      R0,[R0, #+4]
   \   00000030   0x.... 0x....      BL       PushMyQueue
   \   00000034   0xE02A             B.N      ??PushUartQueue_1
    165              }
    166              else if(uartx == UART2)
   \                     ??PushUartQueue_2:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD107             BNE.N    ??PushUartQueue_3
    167              {
    168                  return PushMyQueue(s_sUARTQueue[2], data);
   \   0000003E   0x0029             MOVS     R1,R5
   \   00000040   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000046   0x6880             LDR      R0,[R0, #+8]
   \   00000048   0x.... 0x....      BL       PushMyQueue
   \   0000004C   0xE01E             B.N      ??PushUartQueue_1
    169              }
    170              else if(uartx == UART3)
   \                     ??PushUartQueue_3:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD107             BNE.N    ??PushUartQueue_4
    171              {
    172                  return PushMyQueue(s_sUARTQueue[3], data);
   \   00000056   0x0029             MOVS     R1,R5
   \   00000058   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000005E   0x68C0             LDR      R0,[R0, #+12]
   \   00000060   0x.... 0x....      BL       PushMyQueue
   \   00000064   0xE012             B.N      ??PushUartQueue_1
    173              }
    174              else if(uartx == UART4)
   \                     ??PushUartQueue_4:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD107             BNE.N    ??PushUartQueue_5
    175              {
    176                  return PushMyQueue(s_sUARTQueue[4], data);
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000076   0x6900             LDR      R0,[R0, #+16]
   \   00000078   0x.... 0x....      BL       PushMyQueue
   \   0000007C   0xE006             B.N      ??PushUartQueue_1
    177              }
    178              else
    179              {
    180                  return PushMyQueue(s_sUARTQueue[5], data);
   \                     ??PushUartQueue_5:
   \   0000007E   0x0029             MOVS     R1,R5
   \   00000080   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000086   0x6940             LDR      R0,[R0, #+20]
   \   00000088   0x.... 0x....      BL       PushMyQueue
   \                     ??PushUartQueue_1:
   \   0000008C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    181              }                
    182          }
    183          

   \                                 In section .text, align 2, keep-with-next
    184          int8 PopUartQueue(UART_Type * uartx)
    185          {
   \                     PopUartQueue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    186              if(uartx == UART0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD105             BNE.N    ??PopUartQueue_0
    187              {
    188                  return PopMyQueue(s_sUARTQueue[0]);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       PopMyQueue
   \   00000016   0xE02C             B.N      ??PopUartQueue_1
    189              }
    190              else if(uartx == UART1)
   \                     ??PopUartQueue_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD105             BNE.N    ??PopUartQueue_2
    191              {
    192                  return PopMyQueue(s_sUARTQueue[1]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       PopMyQueue
   \   0000002A   0xE022             B.N      ??PopUartQueue_1
    193              }
    194              else if(uartx == UART2)
   \                     ??PopUartQueue_2:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD105             BNE.N    ??PopUartQueue_3
    195              {
    196                  return PopMyQueue(s_sUARTQueue[2]);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x.... 0x....      BL       PopMyQueue
   \   0000003E   0xE018             B.N      ??PopUartQueue_1
    197              }
    198              else if(uartx == UART3)
   \                     ??PopUartQueue_3:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD105             BNE.N    ??PopUartQueue_4
    199              {
    200                  return PopMyQueue(s_sUARTQueue[3]);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x.... 0x....      BL       PopMyQueue
   \   00000052   0xE00E             B.N      ??PopUartQueue_1
    201              }
    202              else if(uartx == UART4)
   \                     ??PopUartQueue_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD105             BNE.N    ??PopUartQueue_5
    203              {
    204                  return PopMyQueue(s_sUARTQueue[4]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x.... 0x....      BL       PopMyQueue
   \   00000066   0xE004             B.N      ??PopUartQueue_1
    205              }
    206              else
    207              {
    208                  return PopMyQueue(s_sUARTQueue[5]);
   \                     ??PopUartQueue_5:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000006C   0x6940             LDR      R0,[R0, #+20]
   \   0000006E   0x.... 0x....      BL       PopMyQueue
   \                     ??PopUartQueue_1:
   \   00000072   0xBD10             POP      {R4,PC}          ;; return
    209              }                
    210          }
    211          

   \                                 In section .text, align 2, keep-with-next
    212          uint8 PutCharUartQueue(UART_Type * uartx, int8 ch)
    213          {
   \                     PutCharUartQueue:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    214              return PushUartQueue(uartx, ch);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       PushUartQueue
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    215          }
    216          

   \                                 In section .text, align 2, keep-with-next
    217          uint8 PutStringUartQueue(UART_Type * uartx, int8 * str)
    218          {
   \                     PutStringUartQueue:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    219              while(*str != '\0')
   \                     ??PutStringUartQueue_0:
   \   00000006   0xF995 0x0000      LDRSB    R0,[R5, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD00A             BEQ.N    ??PutStringUartQueue_1
    220              {
    221                  if(PutCharUartQueue(uartx, *str))
   \   0000000E   0xF995 0x1000      LDRSB    R1,[R5, #+0]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       PutCharUartQueue
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD001             BEQ.N    ??PutStringUartQueue_2
    222                  {
    223                      str++;
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \   0000001E   0xE7F2             B.N      ??PutStringUartQueue_0
    224                  }
    225                  else
    226                  {
    227                      return 0;
   \                     ??PutStringUartQueue_2:
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??PutStringUartQueue_3
    228                  }
    229              }
    230          
    231              return 1;
   \                     ??PutStringUartQueue_1:
   \   00000024   0x2001             MOVS     R0,#+1
   \                     ??PutStringUartQueue_3:
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    232          }
    233          

   \                                 In section .text, align 2, keep-with-next
    234          uint8 SendSeveralUartQueueData(UART_Type * uartx, int num)
    235          {
   \                     SendSeveralUartQueueData:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    236              int i = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    237          
    238              for(i = 0; i < num; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0006             MOVS     R6,R0
   \                     ??SendSeveralUartQueueData_0:
   \   0000000C   0x42AE             CMP      R6,R5
   \   0000000E   0xDA10             BGE.N    ??SendSeveralUartQueueData_1
    239              {
    240                  if(!IsUartQueueEmpty(uartx))
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       IsUartQueueEmpty
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD109             BNE.N    ??SendSeveralUartQueueData_2
    241                  {
    242                      LPLD_UART_PutChar(uartx, PopUartQueue(uartx));
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       PopUartQueue
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       LPLD_UART_PutChar
    243                  }
   \   0000002A   0x1C76             ADDS     R6,R6,#+1
   \   0000002C   0xE7EE             B.N      ??SendSeveralUartQueueData_0
    244                  else
    245                  {
    246                      return 0;
   \                     ??SendSeveralUartQueueData_2:
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xE000             B.N      ??SendSeveralUartQueueData_3
    247                  }
    248              }
    249          
    250              return 1;
   \                     ??SendSeveralUartQueueData_1:
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??SendSeveralUartQueueData_3:
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    251          }
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void InitUartRecvQueue(UART_Type * uartx, int16 buf_size)
    254          {
   \                     InitUartRecvQueue:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    255              if(uartx == UART0)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   0000000A   0x4284             CMP      R4,R0
   \   0000000C   0xD107             BNE.N    ??InitUartRecvQueue_0
    256              {
    257                  s_sUARTRecvQueue[0] = CreateMyQueue(buf_size);
   \   0000000E   0x0028             MOVS     R0,R5
   \   00000010   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   0x.... 0x....      BL       CreateMyQueue
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE03A             B.N      ??InitUartRecvQueue_1
    258              }
    259              else if(uartx == UART1)
   \                     ??InitUartRecvQueue_0:
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   00000022   0x4284             CMP      R4,R0
   \   00000024   0xD107             BNE.N    ??InitUartRecvQueue_2
    260              {
    261                  s_sUARTRecvQueue[1] = CreateMyQueue(buf_size);
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0x.... 0x....      BL       CreateMyQueue
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000032   0x6048             STR      R0,[R1, #+4]
   \   00000034   0xE02E             B.N      ??InitUartRecvQueue_1
    262              }
    263              else if(uartx == UART2)
   \                     ??InitUartRecvQueue_2:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD107             BNE.N    ??InitUartRecvQueue_3
    264              {
    265                  s_sUARTRecvQueue[2] = CreateMyQueue(buf_size);
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000042   0x.... 0x....      BL       CreateMyQueue
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   0000004A   0x6088             STR      R0,[R1, #+8]
   \   0000004C   0xE022             B.N      ??InitUartRecvQueue_1
    266              }
    267              else if(uartx == UART3)
   \                     ??InitUartRecvQueue_3:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD107             BNE.N    ??InitUartRecvQueue_4
    268              {
    269                  s_sUARTRecvQueue[3] = CreateMyQueue(buf_size);
   \   00000056   0x0028             MOVS     R0,R5
   \   00000058   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005A   0x.... 0x....      BL       CreateMyQueue
   \   0000005E   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000062   0x60C8             STR      R0,[R1, #+12]
   \   00000064   0xE016             B.N      ??InitUartRecvQueue_1
    270              }
    271              else if(uartx == UART4)
   \                     ??InitUartRecvQueue_4:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   0000006A   0x4284             CMP      R4,R0
   \   0000006C   0xD107             BNE.N    ??InitUartRecvQueue_5
    272              {
    273                  s_sUARTRecvQueue[4] = CreateMyQueue(buf_size);
   \   0000006E   0x0028             MOVS     R0,R5
   \   00000070   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000072   0x.... 0x....      BL       CreateMyQueue
   \   00000076   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   0000007A   0x6108             STR      R0,[R1, #+16]
   \   0000007C   0xE00A             B.N      ??InitUartRecvQueue_1
    274              }
    275              else if(uartx == UART5)
   \                     ??InitUartRecvQueue_5:
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x400eb000
   \   00000082   0x4284             CMP      R4,R0
   \   00000084   0xD106             BNE.N    ??InitUartRecvQueue_1
    276              {
    277                  s_sUARTRecvQueue[5] = CreateMyQueue(buf_size);
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000008A   0x.... 0x....      BL       CreateMyQueue
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable15_7
   \   00000092   0x6148             STR      R0,[R1, #+20]
    278              }
    279          }
   \                     ??InitUartRecvQueue_1:
   \   00000094   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    280          

   \                                 In section .text, align 2, keep-with-next
    281          void DestoryUartRecvQueue(UART_Type * uartx)
    282          {
   \                     DestoryUartRecvQueue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    283              if(uartx == UART0)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD105             BNE.N    ??DestoryUartRecvQueue_0
    284              {
    285                  DestoryMyQueue(s_sUARTRecvQueue[0]);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       DestoryMyQueue
   \   00000016   0xE030             B.N      ??DestoryUartRecvQueue_1
    286              }
    287              else if(uartx == UART1)
   \                     ??DestoryUartRecvQueue_0:
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD105             BNE.N    ??DestoryUartRecvQueue_2
    288              {
    289                  DestoryMyQueue(s_sUARTRecvQueue[1]);
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       DestoryMyQueue
   \   0000002A   0xE026             B.N      ??DestoryUartRecvQueue_1
    290              }
    291              else if(uartx == UART2)
   \                     ??DestoryUartRecvQueue_2:
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD105             BNE.N    ??DestoryUartRecvQueue_3
    292              {
    293                  DestoryMyQueue(s_sUARTRecvQueue[2]);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x.... 0x....      BL       DestoryMyQueue
   \   0000003E   0xE01C             B.N      ??DestoryUartRecvQueue_1
    294              }
    295              else if(uartx == UART3)
   \                     ??DestoryUartRecvQueue_3:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD105             BNE.N    ??DestoryUartRecvQueue_4
    296              {
    297                  DestoryMyQueue(s_sUARTRecvQueue[3]);
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   0000004C   0x68C0             LDR      R0,[R0, #+12]
   \   0000004E   0x.... 0x....      BL       DestoryMyQueue
   \   00000052   0xE012             B.N      ??DestoryUartRecvQueue_1
    298              }
    299              else if(uartx == UART4)
   \                     ??DestoryUartRecvQueue_4:
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD105             BNE.N    ??DestoryUartRecvQueue_5
    300              {
    301                  DestoryMyQueue(s_sUARTRecvQueue[4]);
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   00000060   0x6900             LDR      R0,[R0, #+16]
   \   00000062   0x.... 0x....      BL       DestoryMyQueue
   \   00000066   0xE008             B.N      ??DestoryUartRecvQueue_1
    302              }
    303              else if(uartx == UART5)
   \                     ??DestoryUartRecvQueue_5:
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_6  ;; 0x400eb000
   \   0000006C   0x4284             CMP      R4,R0
   \   0000006E   0xD104             BNE.N    ??DestoryUartRecvQueue_1
    304              {
    305                  DestoryMyQueue(s_sUARTRecvQueue[5]);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \   00000074   0x6940             LDR      R0,[R0, #+20]
   \   00000076   0x.... 0x....      BL       DestoryMyQueue
    306              }    
    307          }
   \                     ??DestoryUartRecvQueue_1:
   \   0000007A   0xBD10             POP      {R4,PC}          ;; return
    308          

   \                                 In section .text, align 2, keep-with-next
    309          int16 GetUartRecvQueueSize(UART_Type* uartx)
    310          {
   \                     GetUartRecvQueueSize:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    311              if(uartx == UART0)
   \   00000004   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD104             BNE.N    ??GetUartRecvQueueSize_0
    312              {
    313                  return GetMyQueueSize(s_sUARTRecvQueue[0]);
   \   0000000A   0x....             LDR.N    R0,??DataTable15_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       GetMyQueueSize
   \   00000012   0xE023             B.N      ??GetUartRecvQueueSize_1
    314              }
    315              else if(uartx == UART1)
   \                     ??GetUartRecvQueueSize_0:
   \   00000014   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD104             BNE.N    ??GetUartRecvQueueSize_2
    316              {
    317                  return GetMyQueueSize(s_sUARTRecvQueue[1]);
   \   0000001A   0x....             LDR.N    R0,??DataTable15_7
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       GetMyQueueSize
   \   00000022   0xE01B             B.N      ??GetUartRecvQueueSize_1
    318              }
    319              else if(uartx == UART2)
   \                     ??GetUartRecvQueueSize_2:
   \   00000024   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD104             BNE.N    ??GetUartRecvQueueSize_3
    320              {
    321                  return GetMyQueueSize(s_sUARTRecvQueue[2]);
   \   0000002A   0x....             LDR.N    R0,??DataTable15_7
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x.... 0x....      BL       GetMyQueueSize
   \   00000032   0xE013             B.N      ??GetUartRecvQueueSize_1
    322              }
    323              else if(uartx == UART3)
   \                     ??GetUartRecvQueueSize_3:
   \   00000034   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD104             BNE.N    ??GetUartRecvQueueSize_4
    324              {
    325                  return GetMyQueueSize(s_sUARTRecvQueue[3]);
   \   0000003A   0x....             LDR.N    R0,??DataTable15_7
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      BL       GetMyQueueSize
   \   00000042   0xE00B             B.N      ??GetUartRecvQueueSize_1
    326              }
    327              else if(uartx == UART4)
   \                     ??GetUartRecvQueueSize_4:
   \   00000044   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD104             BNE.N    ??GetUartRecvQueueSize_5
    328              {
    329                  return GetMyQueueSize(s_sUARTRecvQueue[4]);
   \   0000004A   0x....             LDR.N    R0,??DataTable15_7
   \   0000004C   0x6900             LDR      R0,[R0, #+16]
   \   0000004E   0x.... 0x....      BL       GetMyQueueSize
   \   00000052   0xE003             B.N      ??GetUartRecvQueueSize_1
    330              }
    331              else
    332              {
    333                  return GetMyQueueSize(s_sUARTRecvQueue[5]);
   \                     ??GetUartRecvQueueSize_5:
   \   00000054   0x....             LDR.N    R0,??DataTable15_7
   \   00000056   0x6940             LDR      R0,[R0, #+20]
   \   00000058   0x.... 0x....      BL       GetMyQueueSize
   \                     ??GetUartRecvQueueSize_1:
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
    334              }        
    335          }
    336          

   \                                 In section .text, align 2, keep-with-next
    337          uint8 IsUartRecvQueueEmpty(UART_Type * uartx)
    338          {
   \                     IsUartRecvQueueEmpty:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    339              if(uartx == UART0)
   \   00000004   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD104             BNE.N    ??IsUartRecvQueueEmpty_0
    340              {
    341                  return IsMyQueueEmpty(s_sUARTRecvQueue[0]);
   \   0000000A   0x....             LDR.N    R0,??DataTable15_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000012   0xE023             B.N      ??IsUartRecvQueueEmpty_1
    342              }
    343              else if(uartx == UART1)
   \                     ??IsUartRecvQueueEmpty_0:
   \   00000014   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD104             BNE.N    ??IsUartRecvQueueEmpty_2
    344              {
    345                  return IsMyQueueEmpty(s_sUARTRecvQueue[1]);
   \   0000001A   0x....             LDR.N    R0,??DataTable15_7
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000022   0xE01B             B.N      ??IsUartRecvQueueEmpty_1
    346              }
    347              else if(uartx == UART2)
   \                     ??IsUartRecvQueueEmpty_2:
   \   00000024   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD104             BNE.N    ??IsUartRecvQueueEmpty_3
    348              {
    349                  return IsMyQueueEmpty(s_sUARTRecvQueue[2]);
   \   0000002A   0x....             LDR.N    R0,??DataTable15_7
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000032   0xE013             B.N      ??IsUartRecvQueueEmpty_1
    350              }
    351              else if(uartx == UART3)
   \                     ??IsUartRecvQueueEmpty_3:
   \   00000034   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD104             BNE.N    ??IsUartRecvQueueEmpty_4
    352              {
    353                  return IsMyQueueEmpty(s_sUARTRecvQueue[3]);
   \   0000003A   0x....             LDR.N    R0,??DataTable15_7
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000042   0xE00B             B.N      ??IsUartRecvQueueEmpty_1
    354              }
    355              else if(uartx == UART4)
   \                     ??IsUartRecvQueueEmpty_4:
   \   00000044   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD104             BNE.N    ??IsUartRecvQueueEmpty_5
    356              {
    357                  return IsMyQueueEmpty(s_sUARTRecvQueue[4]);
   \   0000004A   0x....             LDR.N    R0,??DataTable15_7
   \   0000004C   0x6900             LDR      R0,[R0, #+16]
   \   0000004E   0x.... 0x....      BL       IsMyQueueEmpty
   \   00000052   0xE003             B.N      ??IsUartRecvQueueEmpty_1
    358              }
    359              else
    360              {
    361                  return IsMyQueueEmpty(s_sUARTRecvQueue[5]);
   \                     ??IsUartRecvQueueEmpty_5:
   \   00000054   0x....             LDR.N    R0,??DataTable15_7
   \   00000056   0x6940             LDR      R0,[R0, #+20]
   \   00000058   0x.... 0x....      BL       IsMyQueueEmpty
   \                     ??IsUartRecvQueueEmpty_1:
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
    362              }            
    363          }
    364          

   \                                 In section .text, align 2, keep-with-next
    365          uint8 IsUartRecvQueueFull(UART_Type * uartx)
    366          {
   \                     IsUartRecvQueueFull:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    367              if(uartx == UART0)
   \   00000004   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD104             BNE.N    ??IsUartRecvQueueFull_0
    368              {
    369                  return IsMyQueueFull(s_sUARTRecvQueue[0]);
   \   0000000A   0x....             LDR.N    R0,??DataTable15_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       IsMyQueueFull
   \   00000012   0xE023             B.N      ??IsUartRecvQueueFull_1
    370              }
    371              else if(uartx == UART1)
   \                     ??IsUartRecvQueueFull_0:
   \   00000014   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD104             BNE.N    ??IsUartRecvQueueFull_2
    372              {
    373                  return IsMyQueueFull(s_sUARTRecvQueue[1]);
   \   0000001A   0x....             LDR.N    R0,??DataTable15_7
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       IsMyQueueFull
   \   00000022   0xE01B             B.N      ??IsUartRecvQueueFull_1
    374              }
    375              else if(uartx == UART2)
   \                     ??IsUartRecvQueueFull_2:
   \   00000024   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD104             BNE.N    ??IsUartRecvQueueFull_3
    376              {
    377                  return IsMyQueueFull(s_sUARTRecvQueue[2]);
   \   0000002A   0x....             LDR.N    R0,??DataTable15_7
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x.... 0x....      BL       IsMyQueueFull
   \   00000032   0xE013             B.N      ??IsUartRecvQueueFull_1
    378              }
    379              else if(uartx == UART3)
   \                     ??IsUartRecvQueueFull_3:
   \   00000034   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD104             BNE.N    ??IsUartRecvQueueFull_4
    380              {
    381                  return IsMyQueueFull(s_sUARTRecvQueue[3]);
   \   0000003A   0x....             LDR.N    R0,??DataTable15_7
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      BL       IsMyQueueFull
   \   00000042   0xE00B             B.N      ??IsUartRecvQueueFull_1
    382              }
    383              else if(uartx == UART4)
   \                     ??IsUartRecvQueueFull_4:
   \   00000044   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD104             BNE.N    ??IsUartRecvQueueFull_5
    384              {
    385                  return IsMyQueueFull(s_sUARTRecvQueue[4]);
   \   0000004A   0x....             LDR.N    R0,??DataTable15_7
   \   0000004C   0x6900             LDR      R0,[R0, #+16]
   \   0000004E   0x.... 0x....      BL       IsMyQueueFull
   \   00000052   0xE003             B.N      ??IsUartRecvQueueFull_1
    386              }
    387              else
    388              {
    389                  return IsMyQueueFull(s_sUARTRecvQueue[5]);
   \                     ??IsUartRecvQueueFull_5:
   \   00000054   0x....             LDR.N    R0,??DataTable15_7
   \   00000056   0x6940             LDR      R0,[R0, #+20]
   \   00000058   0x.... 0x....      BL       IsMyQueueFull
   \                     ??IsUartRecvQueueFull_1:
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
    390              }                
    391          }
    392          

   \                                 In section .text, align 2, keep-with-next
    393          uint8 PushUartRecvQueue(UART_Type * uartx, int8 data)
    394          {
   \                     PushUartRecvQueue:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    395              if(uartx == UART0)
   \   00000006   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000008   0x4284             CMP      R4,R0
   \   0000000A   0xD106             BNE.N    ??PushUartRecvQueue_0
    396              {
    397                  return PushMyQueue(s_sUARTRecvQueue[0], data);
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000010   0x....             LDR.N    R0,??DataTable15_7
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x.... 0x....      BL       PushMyQueue
   \   00000018   0xE02D             B.N      ??PushUartRecvQueue_1
    398              }
    399              else if(uartx == UART1)
   \                     ??PushUartRecvQueue_0:
   \   0000001A   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD106             BNE.N    ??PushUartRecvQueue_2
    400              {
    401                  return PushMyQueue(s_sUARTRecvQueue[1], data);
   \   00000020   0x0029             MOVS     R1,R5
   \   00000022   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000024   0x....             LDR.N    R0,??DataTable15_7
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x.... 0x....      BL       PushMyQueue
   \   0000002C   0xE023             B.N      ??PushUartRecvQueue_1
    402              }
    403              else if(uartx == UART2)
   \                     ??PushUartRecvQueue_2:
   \   0000002E   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   00000030   0x4284             CMP      R4,R0
   \   00000032   0xD106             BNE.N    ??PushUartRecvQueue_3
    404              {
    405                  return PushMyQueue(s_sUARTRecvQueue[2], data);
   \   00000034   0x0029             MOVS     R1,R5
   \   00000036   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000038   0x....             LDR.N    R0,??DataTable15_7
   \   0000003A   0x6880             LDR      R0,[R0, #+8]
   \   0000003C   0x.... 0x....      BL       PushMyQueue
   \   00000040   0xE019             B.N      ??PushUartRecvQueue_1
    406              }
    407              else if(uartx == UART3)
   \                     ??PushUartRecvQueue_3:
   \   00000042   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD106             BNE.N    ??PushUartRecvQueue_4
    408              {
    409                  return PushMyQueue(s_sUARTRecvQueue[3], data);
   \   00000048   0x0029             MOVS     R1,R5
   \   0000004A   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000004C   0x....             LDR.N    R0,??DataTable15_7
   \   0000004E   0x68C0             LDR      R0,[R0, #+12]
   \   00000050   0x.... 0x....      BL       PushMyQueue
   \   00000054   0xE00F             B.N      ??PushUartRecvQueue_1
    410              }
    411              else if(uartx == UART4)
   \                     ??PushUartRecvQueue_4:
   \   00000056   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000058   0x4284             CMP      R4,R0
   \   0000005A   0xD106             BNE.N    ??PushUartRecvQueue_5
    412              {
    413                  return PushMyQueue(s_sUARTRecvQueue[4], data);
   \   0000005C   0x0029             MOVS     R1,R5
   \   0000005E   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000060   0x....             LDR.N    R0,??DataTable15_7
   \   00000062   0x6900             LDR      R0,[R0, #+16]
   \   00000064   0x.... 0x....      BL       PushMyQueue
   \   00000068   0xE005             B.N      ??PushUartRecvQueue_1
    414              }
    415              else
    416              {
    417                  return PushMyQueue(s_sUARTRecvQueue[5], data);
   \                     ??PushUartRecvQueue_5:
   \   0000006A   0x0029             MOVS     R1,R5
   \   0000006C   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   0000006E   0x....             LDR.N    R0,??DataTable15_7
   \   00000070   0x6940             LDR      R0,[R0, #+20]
   \   00000072   0x.... 0x....      BL       PushMyQueue
   \                     ??PushUartRecvQueue_1:
   \   00000076   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    418              }                
    419          }
    420          

   \                                 In section .text, align 2, keep-with-next
    421          int8 PopUartRecvQueue(UART_Type * uartx)
    422          {
   \                     PopUartRecvQueue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    423              if(uartx == UART0)
   \   00000004   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD104             BNE.N    ??PopUartRecvQueue_0
    424              {
    425                  return PopMyQueue(s_sUARTRecvQueue[0]);
   \   0000000A   0x....             LDR.N    R0,??DataTable15_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       PopMyQueue
   \   00000012   0xE023             B.N      ??PopUartRecvQueue_1
    426              }
    427              else if(uartx == UART1)
   \                     ??PopUartRecvQueue_0:
   \   00000014   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD104             BNE.N    ??PopUartRecvQueue_2
    428              {
    429                  return PopMyQueue(s_sUARTRecvQueue[1]);
   \   0000001A   0x....             LDR.N    R0,??DataTable15_7
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       PopMyQueue
   \   00000022   0xE01B             B.N      ??PopUartRecvQueue_1
    430              }
    431              else if(uartx == UART2)
   \                     ??PopUartRecvQueue_2:
   \   00000024   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD104             BNE.N    ??PopUartRecvQueue_3
    432              {
    433                  return PopMyQueue(s_sUARTRecvQueue[2]);
   \   0000002A   0x....             LDR.N    R0,??DataTable15_7
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x.... 0x....      BL       PopMyQueue
   \   00000032   0xE013             B.N      ??PopUartRecvQueue_1
    434              }
    435              else if(uartx == UART3)
   \                     ??PopUartRecvQueue_3:
   \   00000034   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD104             BNE.N    ??PopUartRecvQueue_4
    436              {
    437                  return PopMyQueue(s_sUARTRecvQueue[3]);
   \   0000003A   0x....             LDR.N    R0,??DataTable15_7
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      BL       PopMyQueue
   \   00000042   0xE00B             B.N      ??PopUartRecvQueue_1
    438              }
    439              else if(uartx == UART4)
   \                     ??PopUartRecvQueue_4:
   \   00000044   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD104             BNE.N    ??PopUartRecvQueue_5
    440              {
    441                  return PopMyQueue(s_sUARTRecvQueue[4]);
   \   0000004A   0x....             LDR.N    R0,??DataTable15_7
   \   0000004C   0x6900             LDR      R0,[R0, #+16]
   \   0000004E   0x.... 0x....      BL       PopMyQueue
   \   00000052   0xE003             B.N      ??PopUartRecvQueue_1
    442              }
    443              else
    444              {
    445                  return PopMyQueue(s_sUARTRecvQueue[5]);
   \                     ??PopUartRecvQueue_5:
   \   00000054   0x....             LDR.N    R0,??DataTable15_7
   \   00000056   0x6940             LDR      R0,[R0, #+20]
   \   00000058   0x.... 0x....      BL       PopMyQueue
   \                     ??PopUartRecvQueue_1:
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
    446              }                
    447          }
    448          

   \                                 In section .text, align 2, keep-with-next
    449          void ClearUartRecvQueue(UART_Type * uartx)
    450          {
   \                     ClearUartRecvQueue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    451              if(uartx == UART0)
   \   00000004   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000006   0x4284             CMP      R4,R0
   \   00000008   0xD104             BNE.N    ??ClearUartRecvQueue_0
    452              {
    453                  ClearMyQueue(s_sUARTRecvQueue[0]);
   \   0000000A   0x....             LDR.N    R0,??DataTable15_7
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      BL       ClearMyQueue
   \   00000012   0xE026             B.N      ??ClearUartRecvQueue_1
    454              }
    455              else if(uartx == UART1)
   \                     ??ClearUartRecvQueue_0:
   \   00000014   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   00000016   0x4284             CMP      R4,R0
   \   00000018   0xD104             BNE.N    ??ClearUartRecvQueue_2
    456              {
    457                  ClearMyQueue(s_sUARTRecvQueue[1]);
   \   0000001A   0x....             LDR.N    R0,??DataTable15_7
   \   0000001C   0x6840             LDR      R0,[R0, #+4]
   \   0000001E   0x.... 0x....      BL       ClearMyQueue
   \   00000022   0xE01E             B.N      ??ClearUartRecvQueue_1
    458              }
    459              else if(uartx == UART2)
   \                     ??ClearUartRecvQueue_2:
   \   00000024   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   00000026   0x4284             CMP      R4,R0
   \   00000028   0xD104             BNE.N    ??ClearUartRecvQueue_3
    460              {
    461                  ClearMyQueue(s_sUARTRecvQueue[2]);
   \   0000002A   0x....             LDR.N    R0,??DataTable15_7
   \   0000002C   0x6880             LDR      R0,[R0, #+8]
   \   0000002E   0x.... 0x....      BL       ClearMyQueue
   \   00000032   0xE016             B.N      ??ClearUartRecvQueue_1
    462              }
    463              else if(uartx == UART3)
   \                     ??ClearUartRecvQueue_3:
   \   00000034   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000036   0x4284             CMP      R4,R0
   \   00000038   0xD104             BNE.N    ??ClearUartRecvQueue_4
    464              {
    465                  ClearMyQueue(s_sUARTRecvQueue[3]);
   \   0000003A   0x....             LDR.N    R0,??DataTable15_7
   \   0000003C   0x68C0             LDR      R0,[R0, #+12]
   \   0000003E   0x.... 0x....      BL       ClearMyQueue
   \   00000042   0xE00E             B.N      ??ClearUartRecvQueue_1
    466              }
    467              else if(uartx == UART4)
   \                     ??ClearUartRecvQueue_4:
   \   00000044   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000046   0x4284             CMP      R4,R0
   \   00000048   0xD104             BNE.N    ??ClearUartRecvQueue_5
    468              {
    469                  ClearMyQueue(s_sUARTRecvQueue[4]);
   \   0000004A   0x....             LDR.N    R0,??DataTable15_7
   \   0000004C   0x6900             LDR      R0,[R0, #+16]
   \   0000004E   0x.... 0x....      BL       ClearMyQueue
   \   00000052   0xE006             B.N      ??ClearUartRecvQueue_1
    470              }
    471              else if(uartx == UART5)
   \                     ??ClearUartRecvQueue_5:
   \   00000054   0x....             LDR.N    R0,??DataTable15_6  ;; 0x400eb000
   \   00000056   0x4284             CMP      R4,R0
   \   00000058   0xD103             BNE.N    ??ClearUartRecvQueue_1
    472              {
    473                  ClearMyQueue(s_sUARTRecvQueue[5]);
   \   0000005A   0x....             LDR.N    R0,??DataTable15_7
   \   0000005C   0x6940             LDR      R0,[R0, #+20]
   \   0000005E   0x.... 0x....      BL       ClearMyQueue
    474              }    
    475          }
   \                     ??ClearUartRecvQueue_1:
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
    476          

   \                                 In section .text, align 2, keep-with-next
    477          MyQueue * GetUartRecvQueue(UART_Type * uartx)
    478          {
   \                     GetUartRecvQueue:
   \   00000000   0x0001             MOVS     R1,R0
    479              if(uartx == UART0)
   \   00000002   0x....             LDR.N    R0,??DataTable15  ;; 0x4006a000
   \   00000004   0x4281             CMP      R1,R0
   \   00000006   0xD102             BNE.N    ??GetUartRecvQueue_0
    480              {
    481                  return s_sUARTRecvQueue[0];
   \   00000008   0x....             LDR.N    R0,??DataTable15_7
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xE019             B.N      ??GetUartRecvQueue_1
    482              }
    483              else if(uartx == UART1)
   \                     ??GetUartRecvQueue_0:
   \   0000000E   0x....             LDR.N    R0,??DataTable15_2  ;; 0x4006b000
   \   00000010   0x4281             CMP      R1,R0
   \   00000012   0xD102             BNE.N    ??GetUartRecvQueue_2
    484              {
    485                  return s_sUARTRecvQueue[1];
   \   00000014   0x....             LDR.N    R0,??DataTable15_7
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0xE013             B.N      ??GetUartRecvQueue_1
    486              }
    487              else if(uartx == UART2)
   \                     ??GetUartRecvQueue_2:
   \   0000001A   0x....             LDR.N    R0,??DataTable15_3  ;; 0x4006c000
   \   0000001C   0x4281             CMP      R1,R0
   \   0000001E   0xD102             BNE.N    ??GetUartRecvQueue_3
    488              {
    489                  return s_sUARTRecvQueue[2];
   \   00000020   0x....             LDR.N    R0,??DataTable15_7
   \   00000022   0x6880             LDR      R0,[R0, #+8]
   \   00000024   0xE00D             B.N      ??GetUartRecvQueue_1
    490              }
    491              else if(uartx == UART3)
   \                     ??GetUartRecvQueue_3:
   \   00000026   0x....             LDR.N    R0,??DataTable15_4  ;; 0x4006d000
   \   00000028   0x4281             CMP      R1,R0
   \   0000002A   0xD102             BNE.N    ??GetUartRecvQueue_4
    492              {
    493                  return s_sUARTRecvQueue[3];
   \   0000002C   0x....             LDR.N    R0,??DataTable15_7
   \   0000002E   0x68C0             LDR      R0,[R0, #+12]
   \   00000030   0xE007             B.N      ??GetUartRecvQueue_1
    494              }
    495              else if(uartx == UART4)
   \                     ??GetUartRecvQueue_4:
   \   00000032   0x....             LDR.N    R0,??DataTable15_5  ;; 0x400ea000
   \   00000034   0x4281             CMP      R1,R0
   \   00000036   0xD102             BNE.N    ??GetUartRecvQueue_5
    496              {
    497                  return s_sUARTRecvQueue[4];
   \   00000038   0x....             LDR.N    R0,??DataTable15_7
   \   0000003A   0x6900             LDR      R0,[R0, #+16]
   \   0000003C   0xE001             B.N      ??GetUartRecvQueue_1
    498              }
    499              else
    500              {
    501                  return s_sUARTRecvQueue[5];
   \                     ??GetUartRecvQueue_5:
   \   0000003E   0x....             LDR.N    R0,??DataTable15_7
   \   00000040   0x6940             LDR      R0,[R0, #+20]
   \                     ??GetUartRecvQueue_1:
   \   00000042   0x4770             BX       LR               ;; return
    502              }      
    503          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     s_sUARTQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x4006D000         DC32     0x4006d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x400EB000         DC32     0x400eb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x........         DC32     s_sUARTRecvQueue

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ClearUartRecvQueue
              8 -> ClearMyQueue
        8  DestoryUartQueue
              8 -> DestoryMyQueue
        8  DestoryUartRecvQueue
              8 -> DestoryMyQueue
        8  GetUartQueueSize
              8 -> GetMyQueueSize
        0  GetUartRecvQueue
        8  GetUartRecvQueueSize
              8 -> GetMyQueueSize
       16  InitUartQueue
             16 -> CreateMyQueue
       16  InitUartRecvQueue
             16 -> CreateMyQueue
        8  IsUartQueueEmpty
              8 -> IsMyQueueEmpty
        8  IsUartQueueFull
              8 -> IsMyQueueFull
        8  IsUartRecvQueueEmpty
              8 -> IsMyQueueEmpty
        8  IsUartRecvQueueFull
              8 -> IsMyQueueFull
        8  PopUartQueue
              8 -> PopMyQueue
        8  PopUartRecvQueue
              8 -> PopMyQueue
       16  PushUartQueue
             16 -> PushMyQueue
       16  PushUartRecvQueue
             16 -> PushMyQueue
       16  PutCharUartQueue
             16 -> PushUartQueue
       16  PutStringUartQueue
             16 -> PutCharUartQueue
       16  SendSeveralUartQueueData
             16 -> IsUartQueueEmpty
             16 -> LPLD_UART_PutChar
             16 -> PopUartQueue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
     100  ClearUartRecvQueue
     124  DestoryUartQueue
     124  DestoryUartRecvQueue
     116  GetUartQueueSize
      68  GetUartRecvQueue
      94  GetUartRecvQueueSize
     150  InitUartQueue
     150  InitUartRecvQueue
     116  IsUartQueueEmpty
     116  IsUartQueueFull
      94  IsUartRecvQueueEmpty
      94  IsUartRecvQueueFull
     116  PopUartQueue
      94  PopUartRecvQueue
     142  PushUartQueue
     120  PushUartRecvQueue
      18  PutCharUartQueue
      40  PutStringUartQueue
      54  SendSeveralUartQueueData
      24  s_sUARTQueue
      24  s_sUARTRecvQueue

 
    48 bytes in section .bss
 1 962 bytes in section .text
 
 1 962 bytes of CODE memory
    48 bytes of DATA memory

Errors: none
Warnings: none
