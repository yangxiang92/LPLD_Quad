###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:28 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\HCSR04.c                                              #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\HCSR04.c -D LPLD_K60 -lCN                             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\HCSR04.lst                                      #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\HCSR04.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\HCSR04.c
      1          /****************************************************************************** 
      2           *       HCSR04.c ----- The sona sensor driver          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  HCSR04.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/1 11:21:42                                                       *
     10           ******************************************************************************/
     11          #include "HCSR04.h"
     12          

   \                                 In section .bss, align 2
     13          uint16 g_sonar_measure_distance_mm = 0;
   \                     g_sonar_measure_distance_mm:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     14          uint8 g_sonar_measure_error_flag = 0;
   \                     g_sonar_measure_error_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15          static uint8 s_get_input_flag = 0;
   \                     s_get_input_flag:
   \   00000000                      DS8 1
     16          

   \                                 In section .bss, align 4
     17          PIT_InitTypeDef HCSR04_pluse_signal_timer_init_struct;
   \                     HCSR04_pluse_signal_timer_init_struct:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     18          GPIO_InitTypeDef HCSR04_echo_pin_init_struct;
   \                     HCSR04_echo_pin_init_struct:
   \   00000000                      DS8 20
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void InitHCSR04(void)
     21          {
   \                     InitHCSR04:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     22              GPIO_InitTypeDef HCSR04_trlg_pin_init_struct ={0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2114             MOVS     R1,#+20
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     23          
     24              HCSR04_pluse_signal_timer_init_struct.PIT_Pitx = HCSR04_PLUSE_SIGNAL_TIMER_PITX;
   \   0000000C   0x....             LDR.N    R0,??DataTable2
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x7001             STRB     R1,[R0, #+0]
     25              HCSR04_pluse_signal_timer_init_struct.PIT_PeriodS = 0;
   \   00000012   0x....             LDR.N    R0,??DataTable2
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x60C1             STR      R1,[R0, #+12]
     26              HCSR04_pluse_signal_timer_init_struct.PIT_PeriodMs = HCSR04_PLUSE_SIGNAL_PERIOD_MS - 1;    
   \   00000018   0x....             LDR.N    R0,??DataTable2
   \   0000001A   0x213B             MOVS     R1,#+59
   \   0000001C   0x6081             STR      R1,[R0, #+8]
     27              HCSR04_pluse_signal_timer_init_struct.PIT_PeriodUs = 1000 - HCSR04_PLUSE_SIGNAL_WIDTH_US;
   \   0000001E   0x....             LDR.N    R0,??DataTable2
   \   00000020   0xF44F 0x7175      MOV      R1,#+980
   \   00000024   0x6041             STR      R1,[R0, #+4]
     28              HCSR04_pluse_signal_timer_init_struct.PIT_Isr = HCSR04_PluseTriggerIsr;
   \   00000026   0x....             LDR.N    R0,??DataTable2
   \   00000028   0x.... 0x....      ADR.W    R1,HCSR04_PluseTriggerIsr
   \   0000002C   0x6101             STR      R1,[R0, #+16]
     29              LPLD_PIT_Init(HCSR04_pluse_signal_timer_init_struct);
   \   0000002E   0x....             LDR.N    R1,??DataTable2
   \   00000030   0xB084             SUB      SP,SP,#+16
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0xBC0F             POP      {R0-R3}
   \   0000003C   0x.... 0x....      BL       LPLD_PIT_Init
     30              LPLD_PIT_EnableIrq(HCSR04_pluse_signal_timer_init_struct);
   \   00000040   0x....             LDR.N    R1,??DataTable2
   \   00000042   0xB084             SUB      SP,SP,#+16
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x2214             MOVS     R2,#+20
   \   00000048   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000004C   0xBC0F             POP      {R0-R3}
   \   0000004E   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     31          
     32              HCSR04_echo_pin_init_struct.GPIO_PTx = HCSR04_ECHO_PIN_PORT;
   \   00000052   0x....             LDR.N    R0,??DataTable2_1
   \   00000054   0x....             LDR.N    R1,??DataTable2_2  ;; 0x400ff080
   \   00000056   0x6001             STR      R1,[R0, #+0]
     33              HCSR04_echo_pin_init_struct.GPIO_Pins = PinNum2GpioPin(HCSR04_ECHO_PIN_NUM);
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      BL       PinNum2GpioPin
   \   0000005E   0x....             LDR.N    R1,??DataTable2_1
   \   00000060   0x6048             STR      R0,[R1, #+4]
     34              HCSR04_echo_pin_init_struct.GPIO_Dir = DIR_INPUT;
   \   00000062   0x....             LDR.N    R0,??DataTable2_1
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x7301             STRB     R1,[R0, #+12]
     35              HCSR04_echo_pin_init_struct.GPIO_PinControl = IRQC_ET;
   \   00000068   0x....             LDR.N    R0,??DataTable2_1
   \   0000006A   0xF45F 0x2130      MOVS     R1,#+720896
   \   0000006E   0x6081             STR      R1,[R0, #+8]
     36              HCSR04_echo_pin_init_struct.GPIO_Isr = HCSR04_InputPluseMeasureIsr;
   \   00000070   0x....             LDR.N    R0,??DataTable2_1
   \   00000072   0x.... 0x....      ADR.W    R1,HCSR04_InputPluseMeasureIsr
   \   00000076   0x6101             STR      R1,[R0, #+16]
     37              LPLD_GPIO_Init(HCSR04_echo_pin_init_struct);
   \   00000078   0x....             LDR.N    R1,??DataTable2_1
   \   0000007A   0xB084             SUB      SP,SP,#+16
   \   0000007C   0x4668             MOV      R0,SP
   \   0000007E   0x2214             MOVS     R2,#+20
   \   00000080   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000084   0xBC0F             POP      {R0-R3}
   \   00000086   0x.... 0x....      BL       LPLD_GPIO_Init
     38              LPLD_GPIO_EnableIrq(HCSR04_echo_pin_init_struct);
   \   0000008A   0x....             LDR.N    R1,??DataTable2_1
   \   0000008C   0xB084             SUB      SP,SP,#+16
   \   0000008E   0x4668             MOV      R0,SP
   \   00000090   0x2214             MOVS     R2,#+20
   \   00000092   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000096   0xBC0F             POP      {R0-R3}
   \   00000098   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     39          
     40              HCSR04_trlg_pin_init_struct.GPIO_PTx = HSCR04_TRLG_PIN_PORT;
   \   0000009C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x400ff040
   \   0000009E   0x9001             STR      R0,[SP, #+4]
     41              HCSR04_trlg_pin_init_struct.GPIO_Pins = PinNum2GpioPin(HSCR04_TRLG_PIN_NUM);
   \   000000A0   0x2017             MOVS     R0,#+23
   \   000000A2   0x.... 0x....      BL       PinNum2GpioPin
   \   000000A6   0x9002             STR      R0,[SP, #+8]
     42              HCSR04_trlg_pin_init_struct.GPIO_Dir = DIR_OUTPUT;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xF88D 0x0010      STRB     R0,[SP, #+16]
     43              HCSR04_trlg_pin_init_struct.GPIO_Output = OUTPUT_L;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xF88D 0x0011      STRB     R0,[SP, #+17]
     44              LPLD_GPIO_Init(HCSR04_trlg_pin_init_struct);
   \   000000B4   0xA901             ADD      R1,SP,#+4
   \   000000B6   0xB084             SUB      SP,SP,#+16
   \   000000B8   0x4668             MOV      R0,SP
   \   000000BA   0x2214             MOVS     R2,#+20
   \   000000BC   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000C0   0xBC0F             POP      {R0-R3}
   \   000000C2   0x.... 0x....      BL       LPLD_GPIO_Init
     45          }
   \   000000C6   0xB007             ADD      SP,SP,#+28
   \   000000C8   0xBD00             POP      {PC}             ;; return
     46          

   \                                 In section .text, align 4, keep-with-next
     47          void HCSR04_PluseTriggerIsr(void)
     48          {
   \                     HCSR04_PluseTriggerIsr:
   \   00000000   0xB580             PUSH     {R7,LR}
     49              static uint8 last_state = OUTPUT_L;
     50          
     51              if(last_state == OUTPUT_L)
   \   00000002   0x....             LDR.N    R0,??DataTable2_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD134             BNE.N    ??HCSR04_PluseTriggerIsr_0
     52              {
     53                  HCSR04_pluse_signal_timer_init_struct.PIT_PeriodS = 0;
   \   0000000A   0x....             LDR.N    R0,??DataTable2
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x60C1             STR      R1,[R0, #+12]
     54                  HCSR04_pluse_signal_timer_init_struct.PIT_PeriodMs = 0;
   \   00000010   0x....             LDR.N    R0,??DataTable2
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6081             STR      R1,[R0, #+8]
     55                  HCSR04_pluse_signal_timer_init_struct.PIT_PeriodUs = HCSR04_PLUSE_SIGNAL_WIDTH_US;
   \   00000016   0x....             LDR.N    R0,??DataTable2
   \   00000018   0x2114             MOVS     R1,#+20
   \   0000001A   0x6041             STR      R1,[R0, #+4]
     56                  LPLD_PIT_Init(HCSR04_pluse_signal_timer_init_struct);
   \   0000001C   0x....             LDR.N    R1,??DataTable2
   \   0000001E   0xB084             SUB      SP,SP,#+16
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x2214             MOVS     R2,#+20
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000028   0xBC0F             POP      {R0-R3}
   \   0000002A   0x.... 0x....      BL       LPLD_PIT_Init
     57                  LPLD_PIT_EnableIrq(HCSR04_pluse_signal_timer_init_struct);
   \   0000002E   0x....             LDR.N    R1,??DataTable2
   \   00000030   0xB084             SUB      SP,SP,#+16
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0xBC0F             POP      {R0-R3}
   \   0000003C   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     58                  HCSR04_TRLG_PIN_OUTPUT = 1;                             // TRLG_PIN 
   \   00000040   0x....             LDR.N    R0,??DataTable2_5  ;; 0x43fe085c
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x6001             STR      R1,[R0, #+0]
     59                  last_state = OUTPUT_H;
   \   00000046   0x....             LDR.N    R0,??DataTable2_4
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x7001             STRB     R1,[R0, #+0]
     60          
     61                  LPLD_GPIO_DisableIrq(HCSR04_echo_pin_init_struct);
   \   0000004C   0x....             LDR.N    R1,??DataTable2_1
   \   0000004E   0xB084             SUB      SP,SP,#+16
   \   00000050   0x4668             MOV      R0,SP
   \   00000052   0x2214             MOVS     R2,#+20
   \   00000054   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000058   0xBC0F             POP      {R0-R3}
   \   0000005A   0x.... 0x....      BL       LPLD_GPIO_DisableIrq
     62                  
     63                  if(s_get_input_flag == 0)
   \   0000005E   0x....             LDR.N    R0,??DataTable2_6
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD102             BNE.N    ??HCSR04_PluseTriggerIsr_1
     64                  {
     65                      g_sonar_measure_error_flag = 1;
   \   00000066   0x....             LDR.N    R0,??DataTable2_7
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x7001             STRB     R1,[R0, #+0]
     66                  }
     67                  s_get_input_flag = 0;
   \                     ??HCSR04_PluseTriggerIsr_1:
   \   0000006C   0x....             LDR.N    R0,??DataTable2_6
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x7001             STRB     R1,[R0, #+0]
   \   00000072   0xE02A             B.N      ??HCSR04_PluseTriggerIsr_2
     68              }
     69              else
     70              {
     71                  HCSR04_pluse_signal_timer_init_struct.PIT_PeriodS = 0;
   \                     ??HCSR04_PluseTriggerIsr_0:
   \   00000074   0x....             LDR.N    R0,??DataTable2
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x60C1             STR      R1,[R0, #+12]
     72                  HCSR04_pluse_signal_timer_init_struct.PIT_PeriodMs = HCSR04_PLUSE_SIGNAL_PERIOD_MS - 1;    
   \   0000007A   0x....             LDR.N    R0,??DataTable2
   \   0000007C   0x213B             MOVS     R1,#+59
   \   0000007E   0x6081             STR      R1,[R0, #+8]
     73                  HCSR04_pluse_signal_timer_init_struct.PIT_PeriodUs = 1000 - HCSR04_PLUSE_SIGNAL_WIDTH_US;
   \   00000080   0x....             LDR.N    R0,??DataTable2
   \   00000082   0xF44F 0x7175      MOV      R1,#+980
   \   00000086   0x6041             STR      R1,[R0, #+4]
     74                  LPLD_PIT_Init(HCSR04_pluse_signal_timer_init_struct);
   \   00000088   0x....             LDR.N    R1,??DataTable2
   \   0000008A   0xB084             SUB      SP,SP,#+16
   \   0000008C   0x4668             MOV      R0,SP
   \   0000008E   0x2214             MOVS     R2,#+20
   \   00000090   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000094   0xBC0F             POP      {R0-R3}
   \   00000096   0x.... 0x....      BL       LPLD_PIT_Init
     75                  LPLD_PIT_EnableIrq(HCSR04_pluse_signal_timer_init_struct);
   \   0000009A   0x....             LDR.N    R1,??DataTable2
   \   0000009C   0xB084             SUB      SP,SP,#+16
   \   0000009E   0x4668             MOV      R0,SP
   \   000000A0   0x2214             MOVS     R2,#+20
   \   000000A2   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000A6   0xBC0F             POP      {R0-R3}
   \   000000A8   0x.... 0x....      BL       LPLD_PIT_EnableIrq
     76                  HCSR04_TRLG_PIN_OUTPUT = 0;                             // TRLG_PIN 
   \   000000AC   0x....             LDR.N    R0,??DataTable2_5  ;; 0x43fe085c
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x6001             STR      R1,[R0, #+0]
     77                  last_state = OUTPUT_L; 
   \   000000B2   0x....             LDR.N    R0,??DataTable2_4
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x7001             STRB     R1,[R0, #+0]
     78          
     79                  LPLD_GPIO_EnableIrq(HCSR04_echo_pin_init_struct);
   \   000000B8   0x....             LDR.N    R1,??DataTable2_1
   \   000000BA   0xB084             SUB      SP,SP,#+16
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x2214             MOVS     R2,#+20
   \   000000C0   0x.... 0x....      BL       __aeabi_memcpy4
   \   000000C4   0xBC0F             POP      {R0-R3}
   \   000000C6   0x.... 0x....      BL       LPLD_GPIO_EnableIrq
     80              }
     81          }
   \                     ??HCSR04_PluseTriggerIsr_2:
   \   000000CA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 1
   \                     ??last_state:
   \   00000000                      DS8 1
     82          

   \                                 In section .text, align 4, keep-with-next
     83          void HCSR04_InputPluseMeasureIsr(void)
     84          {
   \                     HCSR04_InputPluseMeasureIsr:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     85              static uint32 last_sonar_measure_reg_time = 0;
     86              uint32 sonar_measure_reg_time = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     87              uint32 sonar_measure_time_100ns = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     88          
     89              if(LPLD_GPIO_IsPinxExt(PORTC, PinNum2GpioPin(HCSR04_ECHO_PIN_NUM)))
   \   00000006   0x....             LDR.N    R0,??DataTable2_8  ;; 0x4004b0a0
   \   00000008   0x6806             LDR      R6,[R0, #+0]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       PinNum2GpioPin
   \   00000010   0x4206             TST      R6,R0
   \   00000012   0xD02E             BEQ.N    ??HCSR04_InputPluseMeasureIsr_0
     90              {
     91                  if(HCSR04_ECHO_PIN_INPUT == 1)                          // ECHO_PIN 
   \   00000014   0x....             LDR.N    R0,??DataTable2_9  ;; 0x43fe1200
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD104             BNE.N    ??HCSR04_InputPluseMeasureIsr_1
     92                  {
     93                      last_sonar_measure_reg_time = PIT->CHANNEL[HCSR04_PLUSE_SIGNAL_TIMER_PITX].CVAL; 
   \   0000001C   0x....             LDR.N    R0,??DataTable2_10
   \   0000001E   0x....             LDR.N    R1,??DataTable2_11  ;; 0x40037114
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \   00000024   0xE025             B.N      ??HCSR04_InputPluseMeasureIsr_0
     94                  }
     95                  else
     96                  {
     97                      sonar_measure_reg_time = PIT->CHANNEL[HCSR04_PLUSE_SIGNAL_TIMER_PITX].CVAL;
   \                     ??HCSR04_InputPluseMeasureIsr_1:
   \   00000026   0x....             LDR.N    R0,??DataTable2_11  ;; 0x40037114
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x0004             MOVS     R4,R0
     98                      if(sonar_measure_reg_time > last_sonar_measure_reg_time)
   \   0000002C   0x....             LDR.N    R0,??DataTable2_10
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x42A0             CMP      R0,R4
   \   00000032   0xD208             BCS.N    ??HCSR04_InputPluseMeasureIsr_2
     99                      {
    100                          sonar_measure_time_100ns = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x0005             MOVS     R5,R0
    101                          g_sonar_measure_distance_mm = 0;
   \   00000038   0x....             LDR.N    R0,??DataTable2_12
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x8001             STRH     R1,[R0, #+0]
    102                          g_sonar_measure_error_flag = 1;
   \   0000003E   0x....             LDR.N    R0,??DataTable2_7
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x7001             STRB     R1,[R0, #+0]
   \   00000044   0xE012             B.N      ??HCSR04_InputPluseMeasureIsr_3
    103                      }
    104                      else
    105                      {
    106                          sonar_measure_reg_time = last_sonar_measure_reg_time - sonar_measure_reg_time;
   \                     ??HCSR04_InputPluseMeasureIsr_2:
   \   00000046   0x....             LDR.N    R0,??DataTable2_10
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x1B04             SUBS     R4,R0,R4
    107                          sonar_measure_time_100ns = sonar_measure_reg_time / (g_bus_clock / 10000000);
   \   0000004C   0x....             LDR.N    R0,??DataTable2_13
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x....             LDR.N    R1,??DataTable2_14  ;; 0x989680
   \   00000052   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000056   0xFBB4 0xF0F0      UDIV     R0,R4,R0
   \   0000005A   0x0005             MOVS     R5,R0
    108                          g_sonar_measure_distance_mm = sonar_measure_time_100ns / 58;
   \   0000005C   0x203A             MOVS     R0,#+58
   \   0000005E   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000062   0x....             LDR.N    R1,??DataTable2_12
   \   00000064   0x8008             STRH     R0,[R1, #+0]
    109                          g_sonar_measure_error_flag = 0;
   \   00000066   0x....             LDR.N    R0,??DataTable2_7
   \   00000068   0x2100             MOVS     R1,#+0
   \   0000006A   0x7001             STRB     R1,[R0, #+0]
    110                      }
    111          
    112                      s_get_input_flag = 1;
   \                     ??HCSR04_InputPluseMeasureIsr_3:
   \   0000006C   0x....             LDR.N    R0,??DataTable2_6
   \   0000006E   0x2101             MOVS     R1,#+1
   \   00000070   0x7001             STRB     R1,[R0, #+0]
    113                  }
    114              }
    115          }
   \                     ??HCSR04_InputPluseMeasureIsr_0:
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??last_sonar_measure_reg_time:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     HCSR04_pluse_signal_timer_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     HCSR04_echo_pin_init_struct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x400FF080         DC32     0x400ff080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x400FF040         DC32     0x400ff040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ??last_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x43FE085C         DC32     0x43fe085c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     s_get_input_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     g_sonar_measure_error_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x43FE1200         DC32     0x43fe1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ??last_sonar_measure_reg_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40037114         DC32     0x40037114

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     g_sonar_measure_distance_mm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x........         DC32     g_bus_clock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x00989680         DC32     0x989680

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  HCSR04_InputPluseMeasureIsr
             16 -> PinNum2GpioPin
       24  HCSR04_PluseTriggerIsr
              8 -> LPLD_GPIO_DisableIrq
              8 -> LPLD_GPIO_EnableIrq
              8 -> LPLD_PIT_EnableIrq
              8 -> LPLD_PIT_Init
             24 -> __aeabi_memcpy4
       48  InitHCSR04
             32 -> LPLD_GPIO_EnableIrq
             32 -> LPLD_GPIO_Init
             32 -> LPLD_PIT_EnableIrq
             32 -> LPLD_PIT_Init
             32 -> PinNum2GpioPin
             32 -> __aeabi_memclr4
             48 -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant {(GPIO_Type *)0}>
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     116  HCSR04_InputPluseMeasureIsr
     204  HCSR04_PluseTriggerIsr
      20  HCSR04_echo_pin_init_struct
      20  HCSR04_pluse_signal_timer_init_struct
     202  InitHCSR04
       2  g_sonar_measure_distance_mm
       1  g_sonar_measure_error_flag
       4  last_sonar_measure_reg_time
       1  last_state
       1  s_get_input_flag

 
  49 bytes in section .bss
  20 bytes in section .rodata
 582 bytes in section .text
 
 582 bytes of CODE  memory
  20 bytes of CONST memory
  49 bytes of DATA  memory

Errors: none
Warnings: none
