###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     04/Apr/2014  10:11:52 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\app\ #
#                    LPLD_Quad_V2.c                                           #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\app\ #
#                    LPLD_Quad_V2.c -D LPLD_K60 -lCN                          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V2\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V2\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\ #
#                    iar\..\source\module\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V2\iar\..\source\module\eMPL\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\CPU\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad #
#                    _V2\iar\..\source\lib\common\ -I                         #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\LPLD\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qua #
#                    d_V2\iar\..\source\lib\LPLD\HW\ -I                       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\LPLD\DEV\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD #
#                    _Quad_V2\iar\..\source\lib\uCOS-II\Ports\ -I             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\uCOS-II\Source\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V2\iar\..\source\lib\FatFs\ -I               #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\FatFs\option\ -I E:\ShawnDocuments\IAR_WorkSpace\ #
#                    LPLD_Quad_V2\iar\..\source\lib\USB\common\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\USB\driver\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V2\iar\..\source\lib\USB\descriptor\ -I          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\..\sour #
#                    ce\lib\USB\class\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V2\iar\..\source\lib\MyLib\ -On -I "D:\Program    #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\CMSIS\Include\" -D ARM_MATH_CM4                  #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\FLASH_M #
#                    INE\List\LPLD_Quad_V2.lst                                #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\iar\FLASH_M #
#                    INE\Obj\LPLD_Quad_V2.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V2\source\app\LPLD_Quad_V2.c
      1          /**
      2           * --------------基于"拉普兰德K60底层库V3"的工程（LPLD_Quad_V2）-----------------
      3           * @file LPLD_Quad_V2.c
      4           * @version 0.0
      5           * @date 2013-9-29
      6           * @brief 关于该工程的描述
      7           *
      8           * 版权所有:北京拉普兰德电子技术有限公司
      9           * http://www.lpld.cn
     10           * mail:support@lpld.cn
     11           * 硬件平台:  LPLD K60 Card / LPLD K60 Nano
     12           *
     13           * 本工程基于"拉普兰德K60底层库V3"开发，
     14           * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
     15           * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
     16           * 底层库使用方法见相关文档。 
     17           *
     18           */
     19          #include "includes.h"
     20          

   \                                 In section .text, align 4, keep-with-next
     21          void main (void)
     22          {
   \                     main:
   \   00000000   0xB082             SUB      SP,SP,#+8
     23              //int8 recv;
     24              uint32 counts = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     25              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     26              //uint8 temp = 0x01;
     27              uint8 data[4] = {1,2,3,4};
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x495A             LDR.N    R1,??main_0+0x8
   \   0000000A   0x680A             LDR      R2,[R1, #0]
   \   0000000C   0x6002             STR      R2,[R0, #+0]
     28              uint8 buf[4] = {0,0,0,0};
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x6001             STR      R1,[R0, #+0]
     29          
     30              DisableInterrupts;
   \   00000014   0xB672             CPSID    I
     31              InitDebugUart();
   \   00000016   0x.... 0x....      BL       InitDebugUart
     32              InitLight();
   \   0000001A   0x.... 0x....      BL       InitLight
     33              InitBuzzer();
   \   0000001E   0x.... 0x....      BL       InitBuzzer
     34              InitFourRotorPWM();
   \   00000022   0x.... 0x....      BL       InitFourRotorPWM
     35              InitSwitches();
   \   00000026   0x.... 0x....      BL       InitSwitches
     36              InitMPU9150();
   \   0000002A   0x.... 0x....      BL       InitMPU9150
     37              InitHCSR04();
   \   0000002E   0x.... 0x....      BL       InitHCSR04
     38              InitTimer();
   \   00000032   0x.... 0x....      BL       InitTimer
     39              InitMS5611();
   \   00000036   0x.... 0x....      BL       InitMS5611
     40              EnableInterrupts;
   \   0000003A   0xB662             CPSIE    I
     41          
     42              MPU6050_DMP_MultiWriteReg(0x68, 0x63, 4, data);
   \   0000003C   0xAB01             ADD      R3,SP,#+4
   \   0000003E   0x2204             MOVS     R2,#+4
   \   00000040   0x2163             MOVS     R1,#+99
   \   00000042   0x2068             MOVS     R0,#+104
   \   00000044   0x.... 0x....      BL       MPU6050_DMP_MultiWriteReg
     43          
     44              //TurnOnLights(0xff);
     45          
     46              //LPLD_UART_PutCharArr(DEBUG_UART, "Input something:\r\n", 18);
     47          
     48              while(1)
     49              {
     50                  if(counts > 50)
   \                     ??main_1:
   \   00000048   0x2C33             CMP      R4,#+51
   \   0000004A   0xD30C             BCC.N    ??main_2
     51                  {
     52                      ToggleLights(ReadSwitches(0xff));
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0x.... 0x....      BL       ReadSwitches
   \   00000052   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000054   0x.... 0x....      BL       ToggleLights
     53                      //ToggleBuzzer();
     54                      counts = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x0004             MOVS     R4,R0
     55                      i++;
   \   0000005C   0x1C6D             ADDS     R5,R5,#+1
     56                      //SetBuzzerMode(i);
     57                      if(i > 4)
   \   0000005E   0x2D05             CMP      R5,#+5
   \   00000060   0xDB01             BLT.N    ??main_2
     58                      {
     59                        i = 0;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x0005             MOVS     R5,R0
     60                      }
     61                  }
     62                  MS5611_Read(&MS5611_data_struct, MS5611_D1_OSR_4096);
   \                     ??main_2:
   \   00000066   0x2148             MOVS     R1,#+72
   \   00000068   0x4843             LDR.N    R0,??main_0+0xC
   \   0000006A   0x.... 0x....      BL       MS5611_Read
     63                  AK8975C_StartMeasure();
   \   0000006E   0x.... 0x....      BL       AK8975C_StartMeasure
     64                  printf("%d\t", MPU6050_GetData(ACCEL_XOUT_H));
   \   00000072   0x203B             MOVS     R0,#+59
   \   00000074   0x.... 0x....      BL       MPU6050_GetData
   \   00000078   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000007A   0x0001             MOVS     R1,R0
   \   0000007C   0xA03B             ADR.N    R0,??main_0      ;; "%d\t"
   \   0000007E   0x.... 0x....      BL       printf
     65                  printf("%d\t", MPU6050_GetData(ACCEL_YOUT_H));
   \   00000082   0x203D             MOVS     R0,#+61
   \   00000084   0x.... 0x....      BL       MPU6050_GetData
   \   00000088   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000008A   0x0001             MOVS     R1,R0
   \   0000008C   0xA037             ADR.N    R0,??main_0      ;; "%d\t"
   \   0000008E   0x.... 0x....      BL       printf
     66                  printf("%d\t", MPU6050_GetData(ACCEL_ZOUT_H));
   \   00000092   0x203F             MOVS     R0,#+63
   \   00000094   0x.... 0x....      BL       MPU6050_GetData
   \   00000098   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000009A   0x0001             MOVS     R1,R0
   \   0000009C   0xA033             ADR.N    R0,??main_0      ;; "%d\t"
   \   0000009E   0x.... 0x....      BL       printf
     67                  printf("%d\t", MPU6050_GetData(GYRO_XOUT_H));
   \   000000A2   0x2043             MOVS     R0,#+67
   \   000000A4   0x.... 0x....      BL       MPU6050_GetData
   \   000000A8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000AA   0x0001             MOVS     R1,R0
   \   000000AC   0xA02F             ADR.N    R0,??main_0      ;; "%d\t"
   \   000000AE   0x.... 0x....      BL       printf
     68                  printf("%d\t", MPU6050_GetData(GYRO_YOUT_H));
   \   000000B2   0x2045             MOVS     R0,#+69
   \   000000B4   0x.... 0x....      BL       MPU6050_GetData
   \   000000B8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000BA   0x0001             MOVS     R1,R0
   \   000000BC   0xA02B             ADR.N    R0,??main_0      ;; "%d\t"
   \   000000BE   0x.... 0x....      BL       printf
     69                  printf("%d\t", MPU6050_GetData(GYRO_ZOUT_H));
   \   000000C2   0x2047             MOVS     R0,#+71
   \   000000C4   0x.... 0x....      BL       MPU6050_GetData
   \   000000C8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000CA   0x0001             MOVS     R1,R0
   \   000000CC   0xA027             ADR.N    R0,??main_0      ;; "%d\t"
   \   000000CE   0x.... 0x....      BL       printf
     70                  AK8975C_WaitMeasureComplete();
   \   000000D2   0x.... 0x....      BL       AK8975C_WaitMeasureComplete
     71                  printf("%d\t", AK8975C_GetData(HXL));
   \   000000D6   0x2003             MOVS     R0,#+3
   \   000000D8   0x.... 0x....      BL       AK8975C_GetData
   \   000000DC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000DE   0x0001             MOVS     R1,R0
   \   000000E0   0xA022             ADR.N    R0,??main_0      ;; "%d\t"
   \   000000E2   0x.... 0x....      BL       printf
     72                  printf("%d\t", AK8975C_GetData(HYL));
   \   000000E6   0x2005             MOVS     R0,#+5
   \   000000E8   0x.... 0x....      BL       AK8975C_GetData
   \   000000EC   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000EE   0x0001             MOVS     R1,R0
   \   000000F0   0xA01E             ADR.N    R0,??main_0      ;; "%d\t"
   \   000000F2   0x.... 0x....      BL       printf
     73                  printf("%d\t", AK8975C_GetData(HZL));   
   \   000000F6   0x2007             MOVS     R0,#+7
   \   000000F8   0x.... 0x....      BL       AK8975C_GetData
   \   000000FC   0x0001             MOVS     R1,R0
   \   000000FE   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000100   0xA01A             ADR.N    R0,??main_0      ;; "%d\t"
   \   00000102   0x.... 0x....      BL       printf
     74                  MPU6050_DMP_MultiReadReg(0x68, 0x63, 4,buf);
   \   00000106   0xAB00             ADD      R3,SP,#+0
   \   00000108   0x2204             MOVS     R2,#+4
   \   0000010A   0x2163             MOVS     R1,#+99
   \   0000010C   0x2068             MOVS     R0,#+104
   \   0000010E   0x.... 0x....      BL       MPU6050_DMP_MultiReadReg
     75                  printf("%d\t", buf[0]);
   \   00000112   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000116   0xA015             ADR.N    R0,??main_0      ;; "%d\t"
   \   00000118   0x.... 0x....      BL       printf
     76                  printf("%d\t", buf[1]);
   \   0000011C   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000120   0xA012             ADR.N    R0,??main_0      ;; "%d\t"
   \   00000122   0x.... 0x....      BL       printf
     77                  printf("%d\t", buf[2]);
   \   00000126   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   0000012A   0xA010             ADR.N    R0,??main_0      ;; "%d\t"
   \   0000012C   0x.... 0x....      BL       printf
     78                  printf("%d\t", buf[3]);
   \   00000130   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000134   0xA00D             ADR.N    R0,??main_0      ;; "%d\t"
   \   00000136   0x.... 0x....      BL       printf
     79                  printf("%d\t", (int)MS5611_data_struct.rPress);
   \   0000013A   0x480F             LDR.N    R0,??main_0+0xC
   \   0000013C   0x6B81             LDR      R1,[R0, #+56]
   \   0000013E   0xA00B             ADR.N    R0,??main_0      ;; "%d\t"
   \   00000140   0x.... 0x....      BL       printf
     80                  //printf("%d\t", MPU6050_SingleReadReg(0x63));
     81                  //printf("%d\t", MPU6050_SingleReadReg(0x64));
     82                  //printf("%d\t", MPU6050_SingleReadReg(0x65));
     83                  //printf("%d\t", MPU6050_SingleReadReg(0x66));        
     84                  //printf("%d\t", g_sonar_measure_distance_cm);
     85                  printf("%d\t",  LPLD_ADC_Get(ADC0, DAD1));
   \   00000144   0x2101             MOVS     R1,#+1
   \   00000146   0x480D             LDR.N    R0,??main_0+0x10  ;; 0x4003b000
   \   00000148   0x.... 0x....      BL       LPLD_ADC_Get
   \   0000014C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000014E   0x0001             MOVS     R1,R0
   \   00000150   0xA006             ADR.N    R0,??main_0      ;; "%d\t"
   \   00000152   0x.... 0x....      BL       printf
     86                  printf("%d\t", g_timer_cnt);
   \   00000156   0x480A             LDR.N    R0,??main_0+0x14
   \   00000158   0x6801             LDR      R1,[R0, #+0]
   \   0000015A   0xA004             ADR.N    R0,??main_0      ;; "%d\t"
   \   0000015C   0x.... 0x....      BL       printf
     87                  printf("\n\r");
   \   00000160   0xA003             ADR.N    R0,??main_0+0x4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000162   0x.... 0x....      BL       printf
     88                  //printf("Hello Wrold!!!\n\r");
     89                  /*temp = 0x01;
     90                  for(i = 0; i < 8; i++)
     91                  {
     92                      recv = (!!ReadSwitches(temp)) + '0';
     93                      LPLD_UART_PutChar(DEBUG_UART, recv);
     94                      temp = temp << 1;
     95                  }
     96                  LPLD_UART_PutChar(DEBUG_UART, '\n');
     97                  LPLD_UART_PutChar(DEBUG_UART, '\r');
     98                  //recv = LPLD_UART_GetChar(DEBUG_UART);
     99                  //LPLD_UART_PutChar(DEBUG_UART, recv);
    100                  PWMOutOneRotor(1, 7);
    101                  PWMOutOneRotor(2, 30);
    102                  PWMOutOneRotor(3, 7);
    103                  PWMOutOneRotor(4, 7);*/
    104                  counts ++;
   \   00000166   0x1C64             ADDS     R4,R4,#+1
   \   00000168   0xE76E             B.N      ??main_1
   \   0000016A   0xBF00             Nop      
   \                     ??main_0:
   \   0000016C   0x25 0x64          DC8      "%d\t"
   \              0x09 0x00    
   \   00000170   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    
   \   00000174   0x........         DC32     `?<Constant {1, 2, 3, 4}>`
   \   00000178   0x........         DC32     MS5611_data_struct
   \   0000017C   0x4003B000         DC32     0x4003b000
   \   00000180   0x........         DC32     g_timer_cnt
    105              } 
    106          }

   \                                 In section .rodata, align 4
   \                     `?<Constant {1, 2, 3, 4}>`:
   \   00000000   0x01 0x02          DC8 1, 2, 3, 4
   \              0x03 0x04    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d\t"
   \              0x09 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0
    107          
    108          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  main
             8 -> AK8975C_GetData
             8 -> AK8975C_StartMeasure
             8 -> AK8975C_WaitMeasureComplete
             8 -> InitBuzzer
             8 -> InitDebugUart
             8 -> InitFourRotorPWM
             8 -> InitHCSR04
             8 -> InitLight
             8 -> InitMPU9150
             8 -> InitMS5611
             8 -> InitSwitches
             8 -> InitTimer
             8 -> LPLD_ADC_Get
             8 -> MPU6050_DMP_MultiReadReg
             8 -> MPU6050_DMP_MultiWriteReg
             8 -> MPU6050_GetData
             8 -> MS5611_Read
             8 -> ReadSwitches
             8 -> ToggleLights
             8 -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d\t">
       4  ?<Constant "\n\r">
       4  ?<Constant {0, 0, 0, 0}>
       4  ?<Constant {1, 2, 3, 4}>
     388  main

 
  16 bytes in section .rodata
 388 bytes in section .text
 
 388 bytes of CODE  memory
  16 bytes of CONST memory

Errors: none
Warnings: none
