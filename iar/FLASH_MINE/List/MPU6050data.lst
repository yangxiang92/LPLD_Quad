###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:14 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\MPU6050data.c                              #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\MPU6050data.c -D LPLD_K60 -lCN             #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\MPU6050data.lst                                 #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\MPU6050data.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\SignalProcess\MPU6050data.c
      1          /****************************************************************************** 
      2           *       MPU6050data.c ----- The data process of the MPU6050          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  MPU6050data.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/4/7 8:52:25                                                       *
     10           ******************************************************************************/
     11          #include "MPU6050data.h"
     12          

   \                                 In section .bss, align 4
     13          MPU6050_RawDataType g_sMPU6050RawData;
   \                     g_sMPU6050RawData:
   \   00000000                      DS8 16

   \                                 In section .data, align 4
     14          float g_f32AccGain[3] = {0.0005981445f, 0.0005981445f, 0.0005981445f};
   \                     g_f32AccGain:
   \   00000000   0x3A1CCCCC         DC32 3A1CCCCCH, 3A1CCCCCH, 3A1CCCCCH
   \              0x3A1CCCCC   
   \              0x3A1CCCCC   

   \                                 In section .data, align 4
     15          float g_f32GyrGain[3] = {0.001065264f, 0.001065264f, 0.001065264f};
   \                     g_f32GyrGain:
   \   00000000   0x3A8BA054         DC32 3A8BA054H, 3A8BA054H, 3A8BA054H
   \              0x3A8BA054   
   \              0x3A8BA054   
     16          

   \                                 In section .text, align 2, keep-with-next
     17          void MPU6050_InitRawData(void)
     18          {
     19              int i = 0;
   \                     MPU6050_InitRawData:
   \   00000000   0x2000             MOVS     R0,#+0
     20              for(i = 0; i < 3; i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \                     ??MPU6050_InitRawData_0:
   \   00000006   0x2803             CMP      R0,#+3
   \   00000008   0xDA0A             BGE.N    ??MPU6050_InitRawData_1
     21              {
     22                  g_sMPU6050RawData.acc[i] = 0;
   \   0000000A   0x....             LDR.N    R1,??DataTable3
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xF821 0x2010      STRH     R2,[R1, R0, LSL #+1]
     23                  g_sMPU6050RawData.gyr[i] = 0;
   \   00000012   0x....             LDR.N    R1,??DataTable3
   \   00000014   0xEB11 0x0140      ADDS     R1,R1,R0, LSL #+1
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x810A             STRH     R2,[R1, #+8]
     24              }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F2             B.N      ??MPU6050_InitRawData_0
     25              g_sMPU6050RawData.tem = 0;
   \                     ??MPU6050_InitRawData_1:
   \   00000020   0x....             LDR.N    R1,??DataTable3
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x80CA             STRH     R2,[R1, #+6]
     26          }
   \   00000026   0x4770             BX       LR               ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void MPU6050_RefreshRawData(void)
     29          {
   \                     MPU6050_RefreshRawData:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
     30              int16 buf[7];
     31              int i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     32          
     33              MPU6050_GetRawData(buf);
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      BL       MPU6050_GetRawData
     34          
     35              for(i = 0; i < 3; i++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0004             MOVS     R4,R0
   \                     ??MPU6050_RefreshRawData_0:
   \   0000000E   0x2C03             CMP      R4,#+3
   \   00000010   0xDA0F             BGE.N    ??MPU6050_RefreshRawData_1
     36              {
     37                  g_sMPU6050RawData.acc[i] = buf[i];
   \   00000012   0x....             LDR.N    R0,??DataTable3
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0xF831 0x1014      LDRH     R1,[R1, R4, LSL #+1]
   \   0000001A   0xF820 0x1014      STRH     R1,[R0, R4, LSL #+1]
     38                  g_sMPU6050RawData.gyr[i] = buf[4+i];
   \   0000001E   0x....             LDR.N    R0,??DataTable3
   \   00000020   0xEB10 0x0044      ADDS     R0,R0,R4, LSL #+1
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0xEB11 0x0144      ADDS     R1,R1,R4, LSL #+1
   \   0000002A   0x8909             LDRH     R1,[R1, #+8]
   \   0000002C   0x8101             STRH     R1,[R0, #+8]
     39              }
   \   0000002E   0x1C64             ADDS     R4,R4,#+1
   \   00000030   0xE7ED             B.N      ??MPU6050_RefreshRawData_0
     40              g_sMPU6050RawData.tem = buf[3];
   \                     ??MPU6050_RefreshRawData_1:
   \   00000032   0x....             LDR.N    R0,??DataTable3
   \   00000034   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000038   0x80C1             STRH     R1,[R0, #+6]
     41          }
   \   0000003A   0xBD1F             POP      {R0-R4,PC}       ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void MPU6050_GetCalibratedAcc(float * acc)
     44          {
   \                     MPU6050_GetCalibratedAcc:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     45              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     46          
     47              for(i = 0; i < 2; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \                     ??MPU6050_GetCalibratedAcc_0:
   \   0000000A   0x2D02             CMP      R5,#+2
   \   0000000C   0xDA11             BGE.N    ??MPU6050_GetCalibratedAcc_1
     48              {
     49                  acc[i] = (g_sMPU6050RawData.acc[i] - g_i16AccOffset[i]) * g_f32AccGain[i];
   \   0000000E   0x....             LDR.N    R0,??DataTable3
   \   00000010   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   00000014   0x....             LDR.N    R1,??DataTable3_1
   \   00000016   0xF931 0x1015      LDRSH    R1,[R1, R5, LSL #+1]
   \   0000001A   0x1A40             SUBS     R0,R0,R1
   \   0000001C   0x.... 0x....      BL       __aeabi_i2f
   \   00000020   0x....             LDR.N    R1,??DataTable3_2
   \   00000022   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   00000026   0x.... 0x....      BL       __aeabi_fmul
   \   0000002A   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
     50              }
   \   0000002E   0x1C6D             ADDS     R5,R5,#+1
   \   00000030   0xE7EB             B.N      ??MPU6050_GetCalibratedAcc_0
     51          
     52              if(g_sQuadSystemFlag.sys_setting.use_ak8975c)
   \                     ??MPU6050_GetCalibratedAcc_1:
   \   00000032   0x....             LDR.N    R0,??DataTable3_3
   \   00000034   0x7A40             LDRB     R0,[R0, #+9]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD00B             BEQ.N    ??MPU6050_GetCalibratedAcc_2
     53              {
     54                  acc[2] = (g_sMPU6050RawData.acc[i] - 54) * g_f32AccGain[2];
   \   0000003A   0x....             LDR.N    R0,??DataTable3
   \   0000003C   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   00000040   0x3836             SUBS     R0,R0,#+54
   \   00000042   0x.... 0x....      BL       __aeabi_i2f
   \   00000046   0x....             LDR.N    R1,??DataTable3_2
   \   00000048   0x6889             LDR      R1,[R1, #+8]
   \   0000004A   0x.... 0x....      BL       __aeabi_fmul
   \   0000004E   0x60A0             STR      R0,[R4, #+8]
   \   00000050   0xE009             B.N      ??MPU6050_GetCalibratedAcc_3
     55              }
     56              else
     57              {
     58                  acc[2] = (g_sMPU6050RawData.acc[i]) * g_f32AccGain[2];
   \                     ??MPU6050_GetCalibratedAcc_2:
   \   00000052   0x....             LDR.N    R0,??DataTable3
   \   00000054   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x....             LDR.N    R1,??DataTable3_2
   \   0000005E   0x6889             LDR      R1,[R1, #+8]
   \   00000060   0x.... 0x....      BL       __aeabi_fmul
   \   00000064   0x60A0             STR      R0,[R4, #+8]
     59              }
     60          }
   \                     ??MPU6050_GetCalibratedAcc_3:
   \   00000066   0xBD30             POP      {R4,R5,PC}       ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void MPU6050_GetCalibratedGyr(float * gyr)
     63          {
   \                     MPU6050_GetCalibratedGyr:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     64              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     65          
     66              for(i = 0; i < 3; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \                     ??MPU6050_GetCalibratedGyr_0:
   \   0000000A   0x2D03             CMP      R5,#+3
   \   0000000C   0xDA13             BGE.N    ??MPU6050_GetCalibratedGyr_1
     67              {
     68                  gyr[i] = (g_sMPU6050RawData.gyr[i] - g_i16GyrOffset[i]) * g_f32GyrGain[i];
   \   0000000E   0x....             LDR.N    R0,??DataTable3
   \   00000010   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   00000014   0xF9B0 0x0008      LDRSH    R0,[R0, #+8]
   \   00000018   0x....             LDR.N    R1,??DataTable3_4
   \   0000001A   0xF931 0x1015      LDRSH    R1,[R1, R5, LSL #+1]
   \   0000001E   0x1A40             SUBS     R0,R0,R1
   \   00000020   0x.... 0x....      BL       __aeabi_i2f
   \   00000024   0x....             LDR.N    R1,??DataTable3_5
   \   00000026   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   0000002A   0x.... 0x....      BL       __aeabi_fmul
   \   0000002E   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
     69              }
   \   00000032   0x1C6D             ADDS     R5,R5,#+1
   \   00000034   0xE7E9             B.N      ??MPU6050_GetCalibratedGyr_0
     70          }
   \                     ??MPU6050_GetCalibratedGyr_1:
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     g_sMPU6050RawData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     g_i16AccOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     g_f32AccGain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     g_sQuadSystemFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     g_i16GyrOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     g_f32GyrGain

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       12  MPU6050_GetCalibratedAcc
             12 -> __aeabi_fmul
             12 -> __aeabi_i2f
       12  MPU6050_GetCalibratedGyr
             12 -> __aeabi_fmul
             12 -> __aeabi_i2f
        0  MPU6050_InitRawData
       24  MPU6050_RefreshRawData
             24 -> MPU6050_GetRawData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
     104  MPU6050_GetCalibratedAcc
      56  MPU6050_GetCalibratedGyr
      40  MPU6050_InitRawData
      60  MPU6050_RefreshRawData
      12  g_f32AccGain
      12  g_f32GyrGain
      16  g_sMPU6050RawData

 
  16 bytes in section .bss
  24 bytes in section .data
 284 bytes in section .text
 
 284 bytes of CODE memory
  40 bytes of DATA memory

Errors: none
Warnings: none
