###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:16 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\ADNS3080.c                                            #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\ADNS3080.c -D LPLD_K60 -lCN                           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ADNS3080.lst                                    #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\ADNS3080.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\ADNS3080.c
      1          /****************************************************************************** 
      2           *       ADNS3080.c ----- The Optic Flow Sensor Driving Module          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  ADNS3080.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/7/10 14:08:12                                                       *
     10           ******************************************************************************/
     11          #include "ADNS3080.h"
     12          

   \                                 In section .text, align 2, keep-with-next
     13          void InitADNS3080_SPI(void)
     14          {
   \                     InitADNS3080_SPI:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB097             SUB      SP,SP,#+92
     15              SPI_InitTypeDef ADNS3080_spi_init_struct = {0};
   \   00000004   0xA809             ADD      R0,SP,#+36
   \   00000006   0x2134             MOVS     R1,#+52
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     16              ADNS3080_spi_init_struct.SPI_SPIx = ADNS3080_SPIX;
   \   0000000C   0x....             LDR.N    R0,??DataTable1  ;; 0x400ac000
   \   0000000E   0x9009             STR      R0,[SP, #+36]
     17              ADNS3080_spi_init_struct.SPI_SckDivider = SPI_SCK_DIV_32;
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0xF88D 0x0029      STRB     R0,[SP, #+41]
     18              ADNS3080_spi_init_struct.SPI_Pcs0Pin = ADNS3080_NCS;
   \   00000016   0x2067             MOVS     R0,#+103
   \   00000018   0xF88D 0x0034      STRB     R0,[SP, #+52]
     19              ADNS3080_spi_init_struct.SPI_SckPin = ADNS3080_SCLK;
   \   0000001C   0x2068             MOVS     R0,#+104
   \   0000001E   0xF88D 0x003A      STRB     R0,[SP, #+58]
     20              ADNS3080_spi_init_struct.SPI_MosiPin = ADNS3080_MOSI;
   \   00000022   0x2069             MOVS     R0,#+105
   \   00000024   0xF88D 0x003B      STRB     R0,[SP, #+59]
     21              ADNS3080_spi_init_struct.SPI_MisoPin = ADNS3080_MISO;
   \   00000028   0x206A             MOVS     R0,#+106
   \   0000002A   0xF88D 0x003C      STRB     R0,[SP, #+60]
     22          
     23              ADNS3080_spi_init_struct.SPI_TxCompleteIntIsr = NULL;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9010             STR      R0,[SP, #+64]
     24              ADNS3080_spi_init_struct.SPI_QueueEndIntIsr = NULL;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9011             STR      R0,[SP, #+68]
     25              ADNS3080_spi_init_struct.SPI_TxFIFO_FillIntIsr = NULL;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9014             STR      R0,[SP, #+80]
     26              ADNS3080_spi_init_struct.SPI_TxFIFO_UnderflowIntIsr = NULL;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9012             STR      R0,[SP, #+72]
     27              ADNS3080_spi_init_struct.SPI_RxFIFO_DrainIntIsr = NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x9015             STR      R0,[SP, #+84]
     28              ADNS3080_spi_init_struct.SPI_RxFIFO_OverflowIntIsr = NULL;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9013             STR      R0,[SP, #+76]
     29          
     30              LPLD_SPI_Init(ADNS3080_spi_init_struct);
   \   00000046   0xA909             ADD      R1,SP,#+36
   \   00000048   0xB084             SUB      SP,SP,#+16
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x2234             MOVS     R2,#+52
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000052   0xBC0F             POP      {R0-R3}
   \   00000054   0x.... 0x....      BL       LPLD_SPI_Init
     31          }
   \   00000058   0xB017             ADD      SP,SP,#+92
   \   0000005A   0xBD00             POP      {PC}             ;; return
     32          

   \                                 In section .text, align 2, keep-with-next
     33          uint8 ADNS3080_SPI_WriteRead(uint8 data, uint8 pcs_state)
     34          {
   \                     ADNS3080_SPI_WriteRead:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     35              uint8 ret = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     36              if(pcs_state == 1)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D01             CMP      R5,#+1
   \   0000000C   0xD108             BNE.N    ??ADNS3080_SPI_WriteRead_0
     37              {
     38                  ret = LPLD_SPI_Master_WriteRead(ADNS3080_SPIX, data, SPI_PCS0, SPI_PCS_ASSERTED);
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x0021             MOVS     R1,R4
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x....             LDR.N    R0,??DataTable1  ;; 0x400ac000
   \   00000018   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   0000001C   0x0006             MOVS     R6,R0
   \   0000001E   0xE00D             B.N      ??ADNS3080_SPI_WriteRead_1
     39              }
     40              else if(pcs_state == 0)
   \                     ??ADNS3080_SPI_WriteRead_0:
   \   00000020   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000022   0x2D00             CMP      R5,#+0
   \   00000024   0xD108             BNE.N    ??ADNS3080_SPI_WriteRead_2
     41              {
     42                  ret = LPLD_SPI_Master_WriteRead(ADNS3080_SPIX, data, SPI_PCS0, SPI_PCS_INACTIVE);
   \   00000026   0x2300             MOVS     R3,#+0
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0x0021             MOVS     R1,R4
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x....             LDR.N    R0,??DataTable1  ;; 0x400ac000
   \   00000030   0x.... 0x....      BL       LPLD_SPI_Master_WriteRead
   \   00000034   0x0006             MOVS     R6,R0
   \   00000036   0xE001             B.N      ??ADNS3080_SPI_WriteRead_1
     43              }
     44              else
     45              {
     46                  ret = 0;
   \                     ??ADNS3080_SPI_WriteRead_2:
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x0006             MOVS     R6,R0
     47              }
     48              return ret;
   \                     ??ADNS3080_SPI_WriteRead_1:
   \   0000003C   0x0030             MOVS     R0,R6
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
     49          }
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void ADNS3080_WriteOneReg(uint8 address, uint8 data)
     52          {
   \                     ADNS3080_WriteOneReg:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     53              ADNS3080_SPI_WriteRead(address|0x80, 1);
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0xF054 0x0080      ORRS     R0,R4,#0x80
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
     54              ADNS3080_SPI_WriteRead(data, 0);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
     55              delayus(50);
   \   0000001C   0x2032             MOVS     R0,#+50
   \   0000001E   0x.... 0x....      BL       delayus
     56          }
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     57          

   \                                 In section .text, align 2, keep-with-next
     58          uint8 ADNS3080_ReadOneReg(uint8 address)
     59          {
   \                     ADNS3080_ReadOneReg:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     60              uint8 ret = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     61              ADNS3080_SPI_WriteRead(address, 1);
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
     62              delayus(50);
   \   00000010   0x2032             MOVS     R0,#+50
   \   00000012   0x.... 0x....      BL       delayus
     63              ret = ADNS3080_SPI_WriteRead(0x00, 0);
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
   \   0000001E   0x0005             MOVS     R5,R0
     64              delayus(1);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       delayus
     65              return ret;
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     66          }
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void ADNS3080_MotionBurst(uint8 data[7])
     69          {
   \                     ADNS3080_MotionBurst:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     70              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     71              ADNS3080_SPI_WriteRead(0x50, 1);
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2050             MOVS     R0,#+80
   \   0000000A   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
     72              delayus(80);
   \   0000000E   0x2050             MOVS     R0,#+80
   \   00000010   0x.... 0x....      BL       delayus
     73              for(i = 0; i < 6; i++)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0005             MOVS     R5,R0
   \                     ??ADNS3080_MotionBurst_0:
   \   00000018   0x2D06             CMP      R5,#+6
   \   0000001A   0xDA06             BGE.N    ??ADNS3080_MotionBurst_1
     74              {
     75                  data[i] = ADNS3080_SPI_WriteRead(0x00, 1);
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
   \   00000024   0x5528             STRB     R0,[R5, R4]
     76              }
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
   \   00000028   0xE7F6             B.N      ??ADNS3080_MotionBurst_0
     77              data[6] = ADNS3080_SPI_WriteRead(0x00, 0);
   \                     ??ADNS3080_MotionBurst_1:
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
   \   00000032   0x71A0             STRB     R0,[R4, #+6]
     78              delayus(1);
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       delayus
     79          }
   \   0000003A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void ADNS3080_PixelBurst(uint8 data[900])
     82          {
   \                     ADNS3080_PixelBurst:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     83              int frame_count = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     84          
     85              ADNS3080_WriteOneReg(0x13, 0x83);
   \   00000006   0x2183             MOVS     R1,#+131
   \   00000008   0x2013             MOVS     R0,#+19
   \   0000000A   0x.... 0x....      BL       ADNS3080_WriteOneReg
     86              delayms(3);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       delayms
     87              ADNS3080_SPI_WriteRead(0x40, 1);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2040             MOVS     R0,#+64
   \   00000018   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
     88              delayus(50);
   \   0000001C   0x2032             MOVS     R0,#+50
   \   0000001E   0x.... 0x....      BL       delayus
     89          
     90              for(frame_count = 0; frame_count < 899; frame_count ++)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x0005             MOVS     R5,R0
   \                     ??ADNS3080_PixelBurst_0:
   \   00000026   0xF240 0x3083      MOVW     R0,#+899
   \   0000002A   0x4285             CMP      R5,R0
   \   0000002C   0xDA09             BGE.N    ??ADNS3080_PixelBurst_1
     91              {
     92                  data[frame_count] = ADNS3080_SPI_WriteRead(0x00, 1);
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
   \   00000036   0x5528             STRB     R0,[R5, R4]
     93                  delayus(10);
   \   00000038   0x200A             MOVS     R0,#+10
   \   0000003A   0x.... 0x....      BL       delayus
     94              }
   \   0000003E   0x1C6D             ADDS     R5,R5,#+1
   \   00000040   0xE7F1             B.N      ??ADNS3080_PixelBurst_0
     95          
     96              data[frame_count] = ADNS3080_SPI_WriteRead(0x00, 0);
   \                     ??ADNS3080_PixelBurst_1:
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x.... 0x....      BL       ADNS3080_SPI_WriteRead
   \   0000004A   0x5528             STRB     R0,[R5, R4]
     97              delayus(20);
   \   0000004C   0x2014             MOVS     R0,#+20
   \   0000004E   0x.... 0x....      BL       delayus
     98          }
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x400AC000         DC32     0x400ac000

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ADNS3080_MotionBurst
              16 -> ADNS3080_SPI_WriteRead
              16 -> delayus
       16  ADNS3080_PixelBurst
              16 -> ADNS3080_SPI_WriteRead
              16 -> ADNS3080_WriteOneReg
              16 -> delayms
              16 -> delayus
       16  ADNS3080_ReadOneReg
              16 -> ADNS3080_SPI_WriteRead
              16 -> delayus
       16  ADNS3080_SPI_WriteRead
              16 -> LPLD_SPI_Master_WriteRead
       16  ADNS3080_WriteOneReg
              16 -> ADNS3080_SPI_WriteRead
              16 -> delayus
      112  InitADNS3080_SPI
              96 -> LPLD_SPI_Init
              96 -> __aeabi_memclr4
             112 -> __aeabi_memcpy4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      52  ?<Constant {(SPI_Type *)0}>
       4  ??DataTable1
      60  ADNS3080_MotionBurst
      84  ADNS3080_PixelBurst
      44  ADNS3080_ReadOneReg
      66  ADNS3080_SPI_WriteRead
      36  ADNS3080_WriteOneReg
      92  InitADNS3080_SPI

 
  52 bytes in section .rodata
 386 bytes in section .text
 
 386 bytes of CODE  memory
  52 bytes of CONST memory

Errors: none
Warnings: none
