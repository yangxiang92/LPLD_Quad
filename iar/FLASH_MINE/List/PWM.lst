###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     07/Aug/2014  15:34:35 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\PWM.c                                                 #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\modu #
#                    le\PWM.c -D LPLD_K60 -lCN E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\FLASH_MINE\List\ -lB                  #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -o E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V #
#                    3\iar\FLASH_MINE\Obj\ --no_cse --no_unroll --no_inline   #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "D:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\i #
#                    ar\..\source\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\Control\ -I                  #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\PWM.lst                                         #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\PWM.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\module\PWM.c
      1          /****************************************************************************** 
      2           *       PWM.c ----- PWM related          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  PWM.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/3/22 18:43:02                                                       *
     10           ******************************************************************************/
     11          #include "PWM.h"
     12          

   \                                 In section .bss, align 4
     13          static PWMData s_sPWMDataStruct;
   \                     s_sPWMDataStruct:
   \   00000000                      DS8 48
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void InitSixRotorPWM(void)
     16          {
   \                     InitSixRotorPWM:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     17              /* Init FTM */
     18              FTM_InitTypeDef four_rotor_ftm_init_struct = {0};
   \   00000004   0xA803             ADD      R0,SP,#+12
   \   00000006   0x211C             MOVS     R1,#+28
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
     19          
     20              four_rotor_ftm_init_struct.FTM_Ftmx = SIX_ROTOR_FTM_PORT;
   \   0000000C   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   0000000E   0x9003             STR      R0,[SP, #+12]
     21              four_rotor_ftm_init_struct.FTM_Mode = FTM_MODE_PWM;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0010      STRB     R0,[SP, #+16]
     22              four_rotor_ftm_init_struct.FTM_PwmFreq = ROTOR_PWM_FREQUENCY;
   \   00000016   0x20FA             MOVS     R0,#+250
   \   00000018   0x9005             STR      R0,[SP, #+20]
     23          
     24              LPLD_FTM_Init(four_rotor_ftm_init_struct);
   \   0000001A   0xA903             ADD      R1,SP,#+12
   \   0000001C   0xB084             SUB      SP,SP,#+16
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x221C             MOVS     R2,#+28
   \   00000022   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000026   0xBC0F             POP      {R0-R3}
   \   00000028   0x.... 0x....      BL       LPLD_FTM_Init
     25          
     26              /* Init 4 PWM channel */
     27              // Rotor One
     28              LPLD_FTM_PWM_Enable(SIX_ROTOR_FTM_PORT,
     29                                  ROTOR_0_CHANNEL,
     30                                  0,
     31                                  ROTOR_0_PIN,
     32                                  ALIGN_LEFT);
   \   0000002C   0x2028             MOVS     R0,#+40
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x233D             MOVS     R3,#+61
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000038   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     33              // Rotor Two
     34              LPLD_FTM_PWM_Enable(SIX_ROTOR_FTM_PORT,
     35                                  ROTOR_1_CHANNEL,
     36                                  0,
     37                                  ROTOR_1_PIN,
     38                                  ALIGN_LEFT);
   \   0000003C   0x2028             MOVS     R0,#+40
   \   0000003E   0x9000             STR      R0,[SP, #+0]
   \   00000040   0x233E             MOVS     R3,#+62
   \   00000042   0x2200             MOVS     R2,#+0
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000048   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     39              // Rotor Three
     40              LPLD_FTM_PWM_Enable(SIX_ROTOR_FTM_PORT,
     41                                  ROTOR_2_CHANNEL,
     42                                  0,
     43                                  ROTOR_2_PIN,
     44                                  ALIGN_LEFT);
   \   0000004C   0x2028             MOVS     R0,#+40
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x233F             MOVS     R3,#+63
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x2102             MOVS     R1,#+2
   \   00000056   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000058   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     45              // Rotor Four
     46              LPLD_FTM_PWM_Enable(SIX_ROTOR_FTM_PORT,
     47                                  ROTOR_3_CHANNEL,
     48                                  0,
     49                                  ROTOR_3_PIN,
     50                                  ALIGN_LEFT);
   \   0000005C   0x2028             MOVS     R0,#+40
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0x2340             MOVS     R3,#+64
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x2103             MOVS     R1,#+3
   \   00000066   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000068   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     51              // Rotor Five
     52              LPLD_FTM_PWM_Enable(SIX_ROTOR_FTM_PORT,
     53                                  ROTOR_4_CHANNEL,
     54                                  0,
     55                                  ROTOR_4_PIN,
     56                                  ALIGN_LEFT);
   \   0000006C   0x2028             MOVS     R0,#+40
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x2360             MOVS     R3,#+96
   \   00000072   0x2200             MOVS     R2,#+0
   \   00000074   0x2104             MOVS     R1,#+4
   \   00000076   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000078   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     57              // Rotor Six
     58              LPLD_FTM_PWM_Enable(SIX_ROTOR_FTM_PORT,
     59                                  ROTOR_5_CHANNEL,
     60                                  0,
     61                                  ROTOR_5_PIN,
     62                                  ALIGN_LEFT);
   \   0000007C   0x2028             MOVS     R0,#+40
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0x2361             MOVS     R3,#+97
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x2105             MOVS     R1,#+5
   \   00000086   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000088   0x.... 0x....      BL       LPLD_FTM_PWM_Enable
     63              
     64              InitPWMData();
   \   0000008C   0x.... 0x....      BL       InitPWMData
     65              InitPWMOutPut();
   \   00000090   0x.... 0x....      BL       InitPWMOutPut
     66          }
   \   00000094   0xB00B             ADD      SP,SP,#+44
   \   00000096   0xBD00             POP      {PC}             ;; return
     67          

   \                                 In section .text, align 2, keep-with-next
     68          void PWMChangeDuty(uint8 channel, uint32 duty)
     69          {
   \                     PWMChangeDuty:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     70              if(channel >= 6)
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C06             CMP      R4,#+6
   \   0000000A   0xD22F             BCS.N    ??PWMChangeDuty_0
     71              {
     72                  return;
     73              }
     74          
     75              switch(channel)
   \                     ??PWMChangeDuty_1:
   \   0000000C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xD008             BEQ.N    ??PWMChangeDuty_2
   \   00000012   0x2C02             CMP      R4,#+2
   \   00000014   0xD012             BEQ.N    ??PWMChangeDuty_3
   \   00000016   0xD30B             BCC.N    ??PWMChangeDuty_4
   \   00000018   0x2C04             CMP      R4,#+4
   \   0000001A   0xD01B             BEQ.N    ??PWMChangeDuty_5
   \   0000001C   0xD314             BCC.N    ??PWMChangeDuty_6
   \   0000001E   0x2C05             CMP      R4,#+5
   \   00000020   0xD01E             BEQ.N    ??PWMChangeDuty_7
   \   00000022   0xE023             B.N      ??PWMChangeDuty_8
     76              {
     77                  case 0: LPLD_FTM_PWM_ChangeDuty(SIX_ROTOR_FTM_PORT, 
     78                                                  ROTOR_0_CHANNEL,
     79                                                  duty);
   \                     ??PWMChangeDuty_2:
   \   00000024   0x002A             MOVS     R2,R5
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   0000002A   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     80                          break;
   \   0000002E   0xE01D             B.N      ??PWMChangeDuty_9
     81                  case 1: LPLD_FTM_PWM_ChangeDuty(SIX_ROTOR_FTM_PORT, 
     82                                                  ROTOR_1_CHANNEL,
     83                                                  duty);
   \                     ??PWMChangeDuty_4:
   \   00000030   0x002A             MOVS     R2,R5
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000036   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     84                          break;
   \   0000003A   0xE017             B.N      ??PWMChangeDuty_9
     85                  case 2: LPLD_FTM_PWM_ChangeDuty(SIX_ROTOR_FTM_PORT, 
     86                                                  ROTOR_2_CHANNEL,
     87                                                  duty);
   \                     ??PWMChangeDuty_3:
   \   0000003C   0x002A             MOVS     R2,R5
   \   0000003E   0x2102             MOVS     R1,#+2
   \   00000040   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000042   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     88                          break;
   \   00000046   0xE011             B.N      ??PWMChangeDuty_9
     89                  case 3: LPLD_FTM_PWM_ChangeDuty(SIX_ROTOR_FTM_PORT, 
     90                                                  ROTOR_3_CHANNEL,
     91                                                  duty);
   \                     ??PWMChangeDuty_6:
   \   00000048   0x002A             MOVS     R2,R5
   \   0000004A   0x2103             MOVS     R1,#+3
   \   0000004C   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   0000004E   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     92                          break;
   \   00000052   0xE00B             B.N      ??PWMChangeDuty_9
     93                  case 4: LPLD_FTM_PWM_ChangeDuty(SIX_ROTOR_FTM_PORT, 
     94                                                  ROTOR_4_CHANNEL,
     95                                                  duty);
   \                     ??PWMChangeDuty_5:
   \   00000054   0x002A             MOVS     R2,R5
   \   00000056   0x2104             MOVS     R1,#+4
   \   00000058   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   0000005A   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
     96                          break;
   \   0000005E   0xE005             B.N      ??PWMChangeDuty_9
     97                  case 5: LPLD_FTM_PWM_ChangeDuty(SIX_ROTOR_FTM_PORT, 
     98                                                  ROTOR_5_CHANNEL,
     99                                                  duty);
   \                     ??PWMChangeDuty_7:
   \   00000060   0x002A             MOVS     R2,R5
   \   00000062   0x2105             MOVS     R1,#+5
   \   00000064   0x....             LDR.N    R0,??DataTable7  ;; 0x40038000
   \   00000066   0x.... 0x....      BL       LPLD_FTM_PWM_ChangeDuty
    100                          break;                
   \   0000006A   0xE7FF             B.N      ??PWMChangeDuty_9
    101                  default:
    102                          break;
    103              }
    104          }
   \                     ??PWMChangeDuty_8:
   \                     ??PWMChangeDuty_9:
   \                     ??PWMChangeDuty_0:
   \   0000006C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    105          

   \                                 In section .text, align 2, keep-with-next
    106          void InitPWMOutPut(void)
    107          {
   \                     InitPWMOutPut:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    108              int pwm[6] = {0,0,0,0,0,0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2118             MOVS     R1,#+24
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    109          
    110              PWMOutSixRotor(pwm);
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       PWMOutSixRotor
    111          }
   \   00000012   0xB007             ADD      SP,SP,#+28
   \   00000014   0xBD00             POP      {PC}             ;; return
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void InitPWMData(void)
    114          {
    115              int i = 0;
   \                     InitPWMData:
   \   00000000   0x2000             MOVS     R0,#+0
    116              for(i = 0; i < 6; i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \                     ??InitPWMData_0:
   \   00000006   0x2806             CMP      R0,#+6
   \   00000008   0xDA0A             BGE.N    ??InitPWMData_1
    117              {
    118                  s_sPWMDataStruct.real_PWM_duty[i] = 0;
   \   0000000A   0x....             LDR.N    R1,??DataTable7_1
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
    119                  s_sPWMDataStruct.ESC_PWM[i] = 0;
   \   00000012   0x....             LDR.N    R1,??DataTable7_1
   \   00000014   0xEB11 0x0180      ADDS     R1,R1,R0, LSL #+2
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x618A             STR      R2,[R1, #+24]
    120              }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xE7F2             B.N      ??InitPWMData_0
    121          }
   \                     ??InitPWMData_1:
   \   00000020   0x4770             BX       LR               ;; return
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void PWMOutOneRotor(uint8 rotor_num, int PWM)
    124          {
   \                     PWMOutOneRotor:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    125              uint32 duty_out = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    126              int abs_PWM = PWM;
   \   00000008   0x002F             MOVS     R7,R5
    127          
    128              if(rotor_num >= 6)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C06             CMP      R4,#+6
   \   0000000E   0xD23D             BCS.N    ??PWMOutOneRotor_0
    129              {
    130                  return;
    131              }
    132          
    133              if(PWM < 0)
   \                     ??PWMOutOneRotor_1:
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD501             BPL.N    ??PWMOutOneRotor_2
    134              {
    135                  PWM = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0005             MOVS     R5,R0
    136              }
    137              if(PWM > 100)
   \                     ??PWMOutOneRotor_2:
   \   00000018   0x2D65             CMP      R5,#+101
   \   0000001A   0xDB01             BLT.N    ??PWMOutOneRotor_3
    138              {
    139                  PWM = 100;
   \   0000001C   0x2064             MOVS     R0,#+100
   \   0000001E   0x0005             MOVS     R5,R0
    140              }
    141          
    142              if(abs_PWM >= 0)
   \                     ??PWMOutOneRotor_3:
   \   00000020   0x2F00             CMP      R7,#+0
   \   00000022   0xD401             BMI.N    ??PWMOutOneRotor_4
    143              {
    144                  abs_PWM = PWM;
   \   00000024   0x002F             MOVS     R7,R5
   \   00000026   0xE001             B.N      ??PWMOutOneRotor_5
    145              }
    146              else
    147              {
    148                  abs_PWM = -PWM;
   \                     ??PWMOutOneRotor_4:
   \   00000028   0x4268             RSBS     R0,R5,#+0
   \   0000002A   0x0007             MOVS     R7,R0
    149              }
    150          
    151              duty_out = abs_PWM * 100;
   \                     ??PWMOutOneRotor_5:
   \   0000002C   0x2064             MOVS     R0,#+100
   \   0000002E   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000032   0x0006             MOVS     R6,R0
    152          
    153              s_sPWMDataStruct.real_PWM_duty[rotor_num] = duty_out;
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0x....             LDR.N    R0,??DataTable7_1
   \   00000038   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
    154              if(duty_out < ESC_MIN_PWM)
   \   0000003C   0xF640 0x10C4      MOVW     R0,#+2500
   \   00000040   0x4286             CMP      R6,R0
   \   00000042   0xD206             BCS.N    ??PWMOutOneRotor_6
    155              {
    156                  s_sPWMDataStruct.ESC_PWM[rotor_num] = 0;
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x....             LDR.N    R0,??DataTable7_1
   \   00000048   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6181             STR      R1,[R0, #+24]
   \   00000050   0xE017             B.N      ??PWMOutOneRotor_7
    157              }
    158              else if(duty_out < ESC_MAX_PWM)
   \                     ??PWMOutOneRotor_6:
   \   00000052   0xF241 0x3088      MOVW     R0,#+5000
   \   00000056   0x4286             CMP      R6,R0
   \   00000058   0xD20D             BCS.N    ??PWMOutOneRotor_8
    159              {
    160                  s_sPWMDataStruct.ESC_PWM[rotor_num] = ((duty_out - ESC_MIN_PWM) * 100) / (ESC_MAX_PWM - ESC_MIN_PWM);     
   \   0000005A   0xF6A6 0x10C4      SUBW     R0,R6,#+2500
   \   0000005E   0x2164             MOVS     R1,#+100
   \   00000060   0x4348             MULS     R0,R1,R0
   \   00000062   0xF640 0x11C4      MOVW     R1,#+2500
   \   00000066   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x....             LDR.N    R1,??DataTable7_1
   \   0000006E   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000072   0x6188             STR      R0,[R1, #+24]
   \   00000074   0xE005             B.N      ??PWMOutOneRotor_7
    161              }
    162              else
    163              {
    164                  s_sPWMDataStruct.ESC_PWM[rotor_num] = 100;
   \                     ??PWMOutOneRotor_8:
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0x....             LDR.N    R0,??DataTable7_1
   \   0000007A   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000007E   0x2164             MOVS     R1,#+100
   \   00000080   0x6181             STR      R1,[R0, #+24]
    165              }
    166          
    167              PWMChangeDuty(rotor_num, duty_out);
   \                     ??PWMOutOneRotor_7:
   \   00000082   0x0031             MOVS     R1,R6
   \   00000084   0x0020             MOVS     R0,R4
   \   00000086   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000088   0x.... 0x....      BL       PWMChangeDuty
    168          }
   \                     ??PWMOutOneRotor_0:
   \   0000008C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void PWMOutOneESC(uint8 ESC_num, int PWM)
    171          {
   \                     PWMOutOneESC:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    172              uint32 duty_out = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    173              int abs_PWM = PWM;
   \   00000008   0x002F             MOVS     R7,R5
    174          
    175              if(ESC_num >= 6)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C06             CMP      R4,#+6
   \   0000000E   0xD225             BCS.N    ??PWMOutOneESC_0
    176              {
    177                  return ;
    178              }
    179          
    180              if(PWM < 0)
   \                     ??PWMOutOneESC_1:
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD501             BPL.N    ??PWMOutOneESC_2
    181              {
    182                  PWM = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0005             MOVS     R5,R0
    183              }
    184              if(PWM > 100)
   \                     ??PWMOutOneESC_2:
   \   00000018   0x2D65             CMP      R5,#+101
   \   0000001A   0xDB01             BLT.N    ??PWMOutOneESC_3
    185              {
    186                  PWM = 100;
   \   0000001C   0x2064             MOVS     R0,#+100
   \   0000001E   0x0005             MOVS     R5,R0
    187              }
    188          
    189              if(PWM >= 0)
   \                     ??PWMOutOneESC_3:
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD401             BMI.N    ??PWMOutOneESC_4
    190              {
    191                  abs_PWM = PWM;
   \   00000024   0x002F             MOVS     R7,R5
   \   00000026   0xE001             B.N      ??PWMOutOneESC_5
    192              }
    193              else
    194              {
    195                  abs_PWM = -PWM;
   \                     ??PWMOutOneESC_4:
   \   00000028   0x4268             RSBS     R0,R5,#+0
   \   0000002A   0x0007             MOVS     R7,R0
    196              }
    197          
    198              duty_out = ((ESC_MAX_PWM - ESC_MIN_PWM) * abs_PWM) / 100 + ESC_MIN_PWM;
   \                     ??PWMOutOneESC_5:
   \   0000002C   0xF640 0x10C4      MOVW     R0,#+2500
   \   00000030   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000034   0x2164             MOVS     R1,#+100
   \   00000036   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000003A   0xF600 0x10C4      ADDW     R0,R0,#+2500
   \   0000003E   0x0006             MOVS     R6,R0
    199          
    200              s_sPWMDataStruct.ESC_PWM[ESC_num] = abs_PWM;
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x....             LDR.N    R0,??DataTable7_1
   \   00000044   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   00000048   0x6187             STR      R7,[R0, #+24]
    201              s_sPWMDataStruct.real_PWM_duty[ESC_num] = duty_out;
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x....             LDR.N    R0,??DataTable7_1
   \   0000004E   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
    202          
    203              PWMChangeDuty(ESC_num, duty_out);
   \   00000052   0x0031             MOVS     R1,R6
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x.... 0x....      BL       PWMChangeDuty
    204          }
   \                     ??PWMOutOneESC_0:
   \   0000005C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    205          

   \                                 In section .text, align 2, keep-with-next
    206          void ThrottleOutSixESC(float throttle[6])
    207          {
   \                     ThrottleOutSixESC:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
    208              int ESC_PWM_output[6];
    209              int i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    210          
    211              for(i = 0; i < 6; i++)
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x0005             MOVS     R5,R0
   \                     ??ThrottleOutSixESC_0:
   \   0000000C   0x2D06             CMP      R5,#+6
   \   0000000E   0xDA0B             BGE.N    ??ThrottleOutSixESC_1
    212              {
    213          #ifdef PWM_OUT_IN_1000_SCALE
    214                  
    215                  ESC_PWM_output[i] = (int)(throttle[i] * 1000);
   \   00000010   0xF854 0x1025      LDR      R1,[R4, R5, LSL #+2]
   \   00000014   0x....             LDR.N    R0,??DataTable7_2  ;; 0x447a0000
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0xF841 0x0025      STR      R0,[R1, R5, LSL #+2]
    216          #else
    217                  ESC_PWM_output[i] = (int)(throttle[i] * 100);
    218          #endif
    219              }
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \   00000026   0xE7F1             B.N      ??ThrottleOutSixESC_0
    220              
    221          #ifdef PWM_OUT_IN_1000_SCALE    
    222              PWMOutSixESC_1000Scale(ESC_PWM_output);
   \                     ??ThrottleOutSixESC_1:
   \   00000028   0xA800             ADD      R0,SP,#+0
   \   0000002A   0x.... 0x....      BL       PWMOutSixESC_1000Scale
    223          #else
    224              PWMOutSixESC(ESC_PWM_output);
    225          #endif
    226          }
   \   0000002E   0xB007             ADD      SP,SP,#+28
   \   00000030   0xBD30             POP      {R4,R5,PC}       ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          void PWMOutSixESC(int esc_pwm[6])
    229          {
   \                     PWMOutSixESC:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    230              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    231          
    232              for(i = 0; i < 6; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \                     ??PWMOutSixESC_0:
   \   0000000A   0x2D06             CMP      R5,#+6
   \   0000000C   0xDA07             BGE.N    ??PWMOutSixESC_1
    233              {
    234                  PWMOutOneESC(i, esc_pwm[i]);
   \   0000000E   0xF854 0x1025      LDR      R1,[R4, R5, LSL #+2]
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       PWMOutOneESC
    235              }
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \   0000001C   0xE7F5             B.N      ??PWMOutSixESC_0
    236          }
   \                     ??PWMOutSixESC_1:
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    237          

   \                                 In section .text, align 2, keep-with-next
    238          void PWMOutSixRotor(int pwm[6])
    239          {
   \                     PWMOutSixRotor:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    240              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    241          
    242              for(i = 0; i < 6; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \                     ??PWMOutSixRotor_0:
   \   0000000A   0x2D06             CMP      R5,#+6
   \   0000000C   0xDA07             BGE.N    ??PWMOutSixRotor_1
    243              {
    244                  PWMOutOneRotor(i, pwm[i]);
   \   0000000E   0xF854 0x1025      LDR      R1,[R4, R5, LSL #+2]
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       PWMOutOneRotor
    245              }
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \   0000001C   0xE7F5             B.N      ??PWMOutSixRotor_0
    246          }
   \                     ??PWMOutSixRotor_1:
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    247          

   \                                 In section .text, align 2, keep-with-next
    248          PWMData * GetPWMData(void)
    249          {
    250              return & s_sPWMDataStruct;
   \                     GetPWMData:
   \   00000000   0x....             LDR.N    R0,??DataTable7_1
   \   00000002   0x4770             BX       LR               ;; return
    251          }
    252          

   \                                 In section .text, align 2, keep-with-next
    253          void PWMOutOneESC_1000Scale(uint8 ESC_num, int PWM)
    254          {
   \                     PWMOutOneESC_1000Scale:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    255              uint32 duty_out = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    256              int abs_PWM = PWM;
   \   00000008   0x002F             MOVS     R7,R5
    257          
    258              if(ESC_num >= 6)
   \   0000000A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   0x2C06             CMP      R4,#+6
   \   0000000E   0xD22B             BCS.N    ??PWMOutOneESC_1000Scale_0
    259              {
    260                  return ;
    261              }
    262          
    263              if(PWM < 0)
   \                     ??PWMOutOneESC_1000Scale_1:
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD501             BPL.N    ??PWMOutOneESC_1000Scale_2
    264              {
    265                  PWM = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x0005             MOVS     R5,R0
    266              }
    267              if(PWM > 1000)
   \                     ??PWMOutOneESC_1000Scale_2:
   \   00000018   0xF5B5 0x7F7A      CMP      R5,#+1000
   \   0000001C   0xDD02             BLE.N    ??PWMOutOneESC_1000Scale_3
    268              {
    269                  PWM = 1000;
   \   0000001E   0xF44F 0x707A      MOV      R0,#+1000
   \   00000022   0x0005             MOVS     R5,R0
    270              }
    271          
    272              if(PWM >= 0)
   \                     ??PWMOutOneESC_1000Scale_3:
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD401             BMI.N    ??PWMOutOneESC_1000Scale_4
    273              {
    274                  abs_PWM = PWM;
   \   00000028   0x002F             MOVS     R7,R5
   \   0000002A   0xE001             B.N      ??PWMOutOneESC_1000Scale_5
    275              }
    276              else
    277              {
    278                  abs_PWM = -PWM;
   \                     ??PWMOutOneESC_1000Scale_4:
   \   0000002C   0x4268             RSBS     R0,R5,#+0
   \   0000002E   0x0007             MOVS     R7,R0
    279              }
    280          
    281              duty_out = ((ESC_MAX_PWM - ESC_MIN_PWM) * (int32)abs_PWM) / 1000 + ESC_MIN_PWM;
   \                     ??PWMOutOneESC_1000Scale_5:
   \   00000030   0xF640 0x10C4      MOVW     R0,#+2500
   \   00000034   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000038   0xF44F 0x717A      MOV      R1,#+1000
   \   0000003C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000040   0xF600 0x10C4      ADDW     R0,R0,#+2500
   \   00000044   0x0006             MOVS     R6,R0
    282          
    283              s_sPWMDataStruct.ESC_PWM[ESC_num] = abs_PWM / 10;
   \   00000046   0x200A             MOVS     R0,#+10
   \   00000048   0xFB97 0xF0F0      SDIV     R0,R7,R0
   \   0000004C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004E   0x....             LDR.N    R1,??DataTable7_1
   \   00000050   0xEB11 0x0184      ADDS     R1,R1,R4, LSL #+2
   \   00000054   0x6188             STR      R0,[R1, #+24]
    284              s_sPWMDataStruct.real_PWM_duty[ESC_num] = duty_out;
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0x....             LDR.N    R0,??DataTable7_1
   \   0000005A   0xF840 0x6024      STR      R6,[R0, R4, LSL #+2]
    285          
    286              PWMChangeDuty(ESC_num, duty_out);
   \   0000005E   0x0031             MOVS     R1,R6
   \   00000060   0x0020             MOVS     R0,R4
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x.... 0x....      BL       PWMChangeDuty
    287          }
   \                     ??PWMOutOneESC_1000Scale_0:
   \   00000068   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    288          

   \                                 In section .text, align 2, keep-with-next
    289          void PWMOutSixESC_1000Scale(int esc_pwm[6])
    290          {
   \                     PWMOutSixESC_1000Scale:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    291              int i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    292          
    293              for(i = 0; i < 6; i++)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x0005             MOVS     R5,R0
   \                     ??PWMOutSixESC_1000Scale_0:
   \   0000000A   0x2D06             CMP      R5,#+6
   \   0000000C   0xDA07             BGE.N    ??PWMOutSixESC_1000Scale_1
    294              {
    295                  PWMOutOneESC_1000Scale(i, esc_pwm[i]);
   \   0000000E   0xF854 0x1025      LDR      R1,[R4, R5, LSL #+2]
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       PWMOutOneESC_1000Scale
    296              }
   \   0000001A   0x1C6D             ADDS     R5,R5,#+1
   \   0000001C   0xE7F5             B.N      ??PWMOutSixESC_1000Scale_0
    297          }
   \                     ??PWMOutSixESC_1000Scale_1:
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     s_sPWMDataStruct

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  GetPWMData
        0  InitPWMData
       32  InitPWMOutPut
             32 -> PWMOutSixRotor
             32 -> __aeabi_memclr4
       64  InitSixRotorPWM
             48 -> InitPWMData
             48 -> InitPWMOutPut
             48 -> LPLD_FTM_Init
             48 -> LPLD_FTM_PWM_Enable
             48 -> __aeabi_memclr4
             64 -> __aeabi_memcpy4
       16  PWMChangeDuty
             16 -> LPLD_FTM_PWM_ChangeDuty
       24  PWMOutOneESC
             24 -> PWMChangeDuty
       24  PWMOutOneESC_1000Scale
             24 -> PWMChangeDuty
       24  PWMOutOneRotor
             24 -> PWMChangeDuty
       16  PWMOutSixESC
             16 -> PWMOutOneESC
       16  PWMOutSixESC_1000Scale
             16 -> PWMOutOneESC_1000Scale
       16  PWMOutSixRotor
             16 -> PWMOutOneRotor
       40  ThrottleOutSixESC
             40 -> PWMOutSixESC_1000Scale
             40 -> __aeabi_f2iz
             40 -> __aeabi_fmul


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant {(FTM_Type *)0}>
      24  ?<Constant {0, 0, 0, 0, 0, 0}>
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  GetPWMData
      34  InitPWMData
      22  InitPWMOutPut
     152  InitSixRotorPWM
     110  PWMChangeDuty
      94  PWMOutOneESC
     106  PWMOutOneESC_1000Scale
     142  PWMOutOneRotor
      32  PWMOutSixESC
      32  PWMOutSixESC_1000Scale
      32  PWMOutSixRotor
      50  ThrottleOutSixESC
      48  s_sPWMDataStruct

 
  48 bytes in section .bss
  52 bytes in section .rodata
 822 bytes in section .text
 
 822 bytes of CODE  memory
  52 bytes of CONST memory
  48 bytes of DATA  memory

Errors: none
Warnings: none
