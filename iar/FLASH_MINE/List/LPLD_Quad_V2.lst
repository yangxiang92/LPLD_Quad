###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     08/Aug/2014  19:52:17 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    LPLD_Quad_V2.c                                           #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    LPLD_Quad_V2.c -D LPLD_K60 -lCN                          #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\LPLD_Quad_V2.lst                                #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\LPLD_Quad_V2.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\LPLD_Quad_V2.c
      1          /**
      2           * --------------基于"拉普兰德K60底层库V3"的工程（LPLD_Quad_V2）-----------------
      3           * @file LPLD_Quad_V2.c
      4           * @version 0.0
      5           * @date 2013-9-29
      6           * @brief 关于该工程的描述
      7           *
      8           * 版权所有:北京拉普兰德电子技术有限公司
      9           * http://www.lpld.cn
     10           * mail:support@lpld.cn
     11           * 硬件平台:  LPLD K60 Card / LPLD K60 Nano
     12           *
     13           * 本工程基于"拉普兰德K60底层库V3"开发，
     14           * 所有开源代码均在"lib"文件夹下，用户不必更改该目录下代码，
     15           * 所有用户工程需保存在"project"文件夹下，以工程名定义文件夹名，
     16           * 底层库使用方法见相关文档。 
     17           *
     18           */
     19          #include "LPLD_Quad_V2.h"
     20          
     21          void Test(void);
     22          void InitHW(void);
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void main (void)
     25          {
   \                     main:
   \   00000000   0xB086             SUB      SP,SP,#+24
     26              int i = 0;
   \   00000002   0x2400             MOVS     R4,#+0
     27          
     28              InitHW();
   \   00000004   0x.... 0x....      BL       InitHW
     29              Test();
   \   00000008   0x.... 0x....      BL       Test
     30              
     31              GetAccGyrOffsetOpe();
   \   0000000C   0x.... 0x....      BL       GetAccGyrOffsetOpe
     32          
     33              MPU6050_InitRawData();
   \   00000010   0x.... 0x....      BL       MPU6050_InitRawData
     34              AK8975C_InitRawData();
   \   00000014   0x.... 0x....      BL       AK8975C_InitRawData
     35              AttitudeInit();    
   \   00000018   0x.... 0x....      BL       AttitudeInit
     36              miniAHRS_InitUartQueue();
   \   0000001C   0x.... 0x....      BL       miniAHRS_InitUartQueue
     37              float yaw, pitch, roll;    
     38              while(1)
     39              {
     40                  while(g_u32ProgramPeriodTimerCnt < PROGRAM_PERIOD_MS)
   \                     ??main_0:
   \                     ??main_1:
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x2804             CMP      R0,#+4
   \   00000028   0xD3FA             BCC.N    ??main_1
     41                  {
     42          
     43                  }
     44                  g_u32ProgramPeriodTimerCnt = 0;
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x6001             STR      R1,[R0, #+0]
     45                  
     46                  TriggerBatteryADC();
   \   00000032   0x.... 0x....      BL       TriggerBatteryADC
     47                  MPU6050_RefreshRawData(); 
   \   00000036   0x.... 0x....      BL       MPU6050_RefreshRawData
     48                  AK8975C_RefreshRawData();
   \   0000003A   0x.... 0x....      BL       AK8975C_RefreshRawData
     49                  MS5611_RefreshData();
   \   0000003E   0x.... 0x....      BL       MS5611_RefreshData
     50                  RefreshAttitude();
   \   00000042   0x.... 0x....      BL       RefreshAttitude
     51                 
     52                  yaw = GetEulerAttitude()->yaw * 10; 
   \   00000046   0x.... 0x....      BL       GetEulerAttitude
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000050   0x.... 0x....      BL       __aeabi_fmul
   \   00000054   0x0005             MOVS     R5,R0
     53                  pitch = GetEulerAttitude()->pitch * 10; 
   \   00000056   0x.... 0x....      BL       GetEulerAttitude
   \   0000005A   0x6840             LDR      R0,[R0, #+4]
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000060   0x.... 0x....      BL       __aeabi_fmul
   \   00000064   0x0006             MOVS     R6,R0
     54                  roll = GetEulerAttitude()->roll * 10;
   \   00000066   0x.... 0x....      BL       GetEulerAttitude
   \   0000006A   0x6880             LDR      R0,[R0, #+8]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000070   0x.... 0x....      BL       __aeabi_fmul
   \   00000074   0x0007             MOVS     R7,R0
     55          
     56                  PWMOutOneESC(1, g_u32DebugPWM[0]);
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable1_3
   \   0000007A   0x6801             LDR      R1,[R0, #+0]
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x.... 0x....      BL       PWMOutOneESC
     57                  PWMOutOneESC(2, g_u32DebugPWM[1]);
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable1_3
   \   00000086   0x6841             LDR      R1,[R0, #+4]
   \   00000088   0x2002             MOVS     R0,#+2
   \   0000008A   0x.... 0x....      BL       PWMOutOneESC
     58                  PWMOutOneESC(3, g_u32DebugPWM[2]);
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable1_3
   \   00000092   0x6881             LDR      R1,[R0, #+8]
   \   00000094   0x2003             MOVS     R0,#+3
   \   00000096   0x.... 0x....      BL       PWMOutOneESC
     59                  PWMOutOneESC(4, g_u32DebugPWM[3]);
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable1_3
   \   0000009E   0x68C1             LDR      R1,[R0, #+12]
   \   000000A0   0x2004             MOVS     R0,#+4
   \   000000A2   0x.... 0x....      BL       PWMOutOneESC
     60          
     61          
     62          
     63          #ifdef MINIAHRS_CLIENT_USE
     64                  if(!miniAHRS_IsUartQueueEmpty())
   \   000000A6   0x.... 0x....      BL       miniAHRS_IsUartQueueEmpty
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD10E             BNE.N    ??main_2
     65                  {
     66                      for(i = 0; i < 5; i ++)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x0004             MOVS     R4,R0
   \                     ??main_3:
   \   000000B2   0x2C05             CMP      R4,#+5
   \   000000B4   0xDAB4             BGE.N    ??main_0
     67                      {
     68                          if(!miniAHRS_IsUartQueueEmpty())
   \   000000B6   0x.... 0x....      BL       miniAHRS_IsUartQueueEmpty
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD104             BNE.N    ??main_4
     69                          {
     70                              miniAHRS_SendOneByte(miniAHRS_PopUartQueue());            
   \   000000BE   0x.... 0x....      BL       miniAHRS_PopUartQueue
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x.... 0x....      BL       miniAHRS_SendOneByte
     71                          }
     72                      }
   \                     ??main_4:
   \   000000C8   0x1C64             ADDS     R4,R4,#+1
   \   000000CA   0xE7F2             B.N      ??main_3
     73                  }
     74                  else
     75                  {
     76                     miniAHRS_ReportIMU_Queue((int)(GetEulerAttitude()->yaw * 10), (int)(GetEulerAttitude()->pitch * 10), (int)(GetEulerAttitude()->roll * 10), (int)g_sMS5611DataCopy.High, (int)(g_sMS5611DataCopy.Temp * 10), (int)(g_sMS5611DataCopy.Press * 10), 200); 
   \                     ??main_2:
   \   000000CC   0x.... 0x....      BL       GetEulerAttitude
   \   000000D0   0x4680             MOV      R8,R0
   \   000000D2   0x.... 0x....      BL       GetEulerAttitude
   \   000000D6   0x4681             MOV      R9,R0
   \   000000D8   0x.... 0x....      BL       GetEulerAttitude
   \   000000DC   0x4682             MOV      R10,R0
   \   000000DE   0x20C8             MOVS     R0,#+200
   \   000000E0   0x9002             STR      R0,[SP, #+8]
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000E6   0x6C00             LDR      R0,[R0, #+64]
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   000000EC   0x.... 0x....      BL       __aeabi_fmul
   \   000000F0   0x.... 0x....      BL       __aeabi_f2iz
   \   000000F4   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000F6   0x9001             STR      R0,[SP, #+4]
   \   000000F8   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   000000FC   0x6BC0             LDR      R0,[R0, #+60]
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000102   0x.... 0x....      BL       __aeabi_fmul
   \   00000106   0x.... 0x....      BL       __aeabi_f2iz
   \   0000010A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000010C   0x9000             STR      R0,[SP, #+0]
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable1_4
   \   00000112   0x6C40             LDR      R0,[R0, #+68]
   \   00000114   0x.... 0x....      BL       __aeabi_f2iz
   \   00000118   0x0003             MOVS     R3,R0
   \   0000011A   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   0000011C   0x469B             MOV      R11,R3
   \   0000011E   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000126   0x.... 0x....      BL       __aeabi_fmul
   \   0000012A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000012E   0x0002             MOVS     R2,R0
   \   00000130   0x465B             MOV      R3,R11
   \   00000132   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   00000134   0x4690             MOV      R8,R2
   \   00000136   0x469B             MOV      R11,R3
   \   00000138   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   0000013C   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000140   0x.... 0x....      BL       __aeabi_fmul
   \   00000144   0x.... 0x....      BL       __aeabi_f2iz
   \   00000148   0x0001             MOVS     R1,R0
   \   0000014A   0x465B             MOV      R3,R11
   \   0000014C   0x4642             MOV      R2,R8
   \   0000014E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000150   0x4688             MOV      R8,R1
   \   00000152   0x4691             MOV      R9,R2
   \   00000154   0x469B             MOV      R11,R3
   \   00000156   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000015A   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   0000015E   0x.... 0x....      BL       __aeabi_fmul
   \   00000162   0x.... 0x....      BL       __aeabi_f2iz
   \   00000166   0x465B             MOV      R3,R11
   \   00000168   0x464A             MOV      R2,R9
   \   0000016A   0x4641             MOV      R1,R8
   \   0000016C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000016E   0x.... 0x....      BL       miniAHRS_ReportIMU_Queue
     77                     miniAHRS_ReportMotion_Queue(g_sMPU6050RawData.acc[0], g_sMPU6050RawData.acc[1], g_sMPU6050RawData.acc[2], g_sMPU6050RawData.gyr[0], g_sMPU6050RawData.gyr[1], g_sMPU6050RawData.gyr[2], g_sAK8975CRawData.mag[0], g_sAK8975CRawData.mag[1], g_sAK8975CRawData.mag[2]);
   \   00000172   0x.... 0x....      LDR.W    R0,??DataTable1_6
   \   00000176   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   0000017A   0x9004             STR      R0,[SP, #+16]
   \   0000017C   0x.... 0x....      LDR.W    R0,??DataTable1_6
   \   00000180   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   00000184   0x9003             STR      R0,[SP, #+12]
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable1_6
   \   0000018A   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000018E   0x9002             STR      R0,[SP, #+8]
   \   00000190   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   00000194   0xF9B0 0x000C      LDRSH    R0,[R0, #+12]
   \   00000198   0x9001             STR      R0,[SP, #+4]
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   0000019E   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   000001A2   0x9000             STR      R0,[SP, #+0]
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   000001A8   0xF9B0 0x3008      LDRSH    R3,[R0, #+8]
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   000001B0   0xF9B0 0x2004      LDRSH    R2,[R0, #+4]
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   000001B8   0xF9B0 0x1002      LDRSH    R1,[R0, #+2]
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable1_7
   \   000001C0   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   000001C4   0x.... 0x....      BL       miniAHRS_ReportMotion_Queue
   \   000001C8   0xE72A             B.N      ??main_0
     78                  }
     79          #endif
     80                 
     81              }    
     82          }
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void Test(void)
     85          {
   \                     Test:
   \   00000000   0xB0C4             SUB      SP,SP,#+272
     86              int i = 0;
   \   00000002   0x2500             MOVS     R5,#+0
     87              int8 str_buff[128];
     88              int program_running_count = 0;
   \   00000004   0x2700             MOVS     R7,#+0
     89              int max_program_period_time = 0;
   \   00000006   0x2400             MOVS     R4,#+0
     90          
     91              //ADNS3080_ImageTest(DEBUG_UART);
     92              
     93              //////////////////////////////////////////////////////////////////////////////////////
     94              GetSystemSettingOnSwitch();
   \   00000008   0x.... 0x....      BL       GetSystemSettingOnSwitch
     95          
     96              if(!CheckLastSystemSettingTheSame())
   \   0000000C   0x.... 0x....      BL       CheckLastSystemSettingTheSame
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD103             BNE.N    ??Test_0
     97              {
     98                  g_sQuadSystemFlag.switch_setting_unvalid = 1;
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x7041             STRB     R1,[R0, #+1]
     99              }
    100          
    101              if(g_sQuadSystemFlag.switch_setting_unvalid)
   \                     ??Test_0:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   00000020   0x7840             LDRB     R0,[R0, #+1]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD01E             BEQ.N    ??Test_1
    102              {
    103                  SetBuzzerMode(4);
   \   00000026   0x2004             MOVS     R0,#+4
   \   00000028   0x.... 0x....      BL       SetBuzzerMode
    104                  while(!!ReadSwitches(WAITTING_COMFIRM_SYSTEM_SETTING_SWITCH_BIT_MASK))
   \                     ??Test_2:
   \   0000002C   0x2080             MOVS     R0,#+128
   \   0000002E   0x.... 0x....      BL       ReadSwitches
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD006             BEQ.N    ??Test_3
    105                  {
    106                      SetLightsOnOff(ReadSwitches(0x7F));
   \   00000036   0x207F             MOVS     R0,#+127
   \   00000038   0x.... 0x....      BL       ReadSwitches
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x.... 0x....      BL       SetLightsOnOff
   \   00000042   0xE7F3             B.N      ??Test_2
    107                  }
    108                  while(!ReadSwitches(WAITTING_COMFIRM_SYSTEM_SETTING_SWITCH_BIT_MASK))
   \                     ??Test_3:
   \   00000044   0x2080             MOVS     R0,#+128
   \   00000046   0x.... 0x....      BL       ReadSwitches
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD106             BNE.N    ??Test_4
    109                  {
    110                      SetLightsOnOff(ReadSwitches(0x7F));
   \   0000004E   0x207F             MOVS     R0,#+127
   \   00000050   0x.... 0x....      BL       ReadSwitches
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x.... 0x....      BL       SetLightsOnOff
   \   0000005A   0xE7F3             B.N      ??Test_3
    111                  }
    112                  SetBuzzerMode(0);
   \                     ??Test_4:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x.... 0x....      BL       SetBuzzerMode
   \   00000062   0xE013             B.N      ??Test_5
    113              }
    114              else
    115              {
    116                  SetBuzzerMode(4);
   \                     ??Test_1:
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x.... 0x....      BL       SetBuzzerMode
    117                  while(!ReadSwitches(WAITTING_COMFIRM_SYSTEM_SETTING_SWITCH_BIT_MASK))
   \                     ??Test_6:
   \   0000006A   0x2080             MOVS     R0,#+128
   \   0000006C   0x.... 0x....      BL       ReadSwitches
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD106             BNE.N    ??Test_7
    118                  {
    119                      SetLightsOnOff(ReadSwitches(0x7F));
   \   00000074   0x207F             MOVS     R0,#+127
   \   00000076   0x.... 0x....      BL       ReadSwitches
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x.... 0x....      BL       SetLightsOnOff
   \   00000080   0xE7F3             B.N      ??Test_6
    120                  }
    121                  SetBuzzerMode(0);
   \                     ??Test_7:
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x.... 0x....      BL       SetBuzzerMode
    122                  GetSystemSettingOnSwitch(); 
   \   00000088   0x.... 0x....      BL       GetSystemSettingOnSwitch
    123              }
    124          
    125              SetLightsOnOff(0x00);
   \                     ??Test_5:
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      BL       SetLightsOnOff
    126          
    127              GetSystemSettingOnSwitch(); 
   \   00000092   0x.... 0x....      BL       GetSystemSettingOnSwitch
    128              g_sQuadSystemFlag.switch_setting_unvalid = 0;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x7041             STRB     R1,[R0, #+1]
    129          
    130              if(!SaveThisSystemSettingToFlash())
   \   0000009E   0x.... 0x....      BL       SaveThisSystemSettingToFlash
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD104             BNE.N    ??Test_8
    131              {
    132                  g_sQuadSystemFlag.save_system_setting_error = 1;
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0x7081             STRB     R1,[R0, #+2]
   \   000000AE   0xE003             B.N      ??Test_9
    133              }
    134              else
    135              {
    136                  g_sQuadSystemFlag.save_system_setting_error = 0;
   \                     ??Test_8:
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x7081             STRB     R1,[R0, #+2]
    137              }
    138          
    139              //////////////////////////////////////////////////////////////////////////////
    140              
    141              if(!InitQuadParam())
   \                     ??Test_9:
   \   000000B8   0x.... 0x....      BL       InitQuadParam
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD103             BNE.N    ??Test_10
    142              {
    143                  g_sQuadSystemFlag.flash_param_error = 1;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000000C4   0x2101             MOVS     R1,#+1
   \   000000C6   0x7001             STRB     R1,[R0, #+0]
    144              }    
    145              
    146              if(g_sQuadSystemFlag.flash_param_error && g_sQuadSystemFlag.sys_setting.save_default_param_to_flash)
   \                     ??Test_10:
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD01D             BEQ.N    ??Test_11
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000000D6   0x7A00             LDRB     R0,[R0, #+8]
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD018             BEQ.N    ??Test_11
    147              {
    148                  SetLightsOnOff(WAITTING_SAVE_DEFAULT_PARAM_TO_FLASH_LED_HINT);
   \   000000DC   0x204F             MOVS     R0,#+79
   \   000000DE   0x.... 0x....      BL       SetLightsOnOff
    149                  SetBuzzerMode(4);
   \   000000E2   0x2004             MOVS     R0,#+4
   \   000000E4   0x.... 0x....      BL       SetBuzzerMode
    150                  while(ReadSwitches(SAVE_DEFAULT_PARAM_TO_FLASH_SWITCH_BIT_MASK));
   \                     ??Test_12:
   \   000000E8   0x2040             MOVS     R0,#+64
   \   000000EA   0x.... 0x....      BL       ReadSwitches
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xD1FA             BNE.N    ??Test_12
    151                  SaveQuadParamToFlash(*GetQuadParamInRam());
   \   000000F2   0x.... 0x....      BL       GetQuadParamInRam
   \   000000F6   0x0001             MOVS     R1,R0
   \   000000F8   0xB084             SUB      SP,SP,#+16
   \   000000FA   0x4668             MOV      R0,SP
   \   000000FC   0x229D             MOVS     R2,#+157
   \   000000FE   0x.... 0x....      BL       __aeabi_memcpy
   \   00000102   0xBC0F             POP      {R0-R3}
   \   00000104   0x.... 0x....      BL       SaveQuadParamToFlash
    152                  SetBuzzerMode(0);        
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x.... 0x....      BL       SetBuzzerMode
    153              }
    154             
    155              if(g_sQuadSystemFlag.sys_setting.acc_getoffset && g_sQuadSystemFlag.sys_setting.gyr_getoffset)
   \                     ??Test_11:
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   00000112   0x7940             LDRB     R0,[R0, #+5]
   \   00000114   0x2800             CMP      R0,#+0
   \   00000116   0xD03F             BEQ.N    ??Test_13
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000011C   0x7980             LDRB     R0,[R0, #+6]
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD03A             BEQ.N    ??Test_13
    156              {
    157                  SetLightsOnOff(WAITTING_START_GET_ACC_GYR_OFFSET_OPE_LED_HINT);
   \   00000122   0x20F3             MOVS     R0,#+243
   \   00000124   0x.... 0x....      BL       SetLightsOnOff
    158                  SetBuzzerMode(4);
   \   00000128   0x2004             MOVS     R0,#+4
   \   0000012A   0x.... 0x....      BL       SetBuzzerMode
    159                  while(ReadSwitches(GET_ACC_OFFSET_SWITCH_BIT_MASK) || ReadSwitches(GET_GYR_OFFSET_SWITCH_BIT_MASK));
   \                     ??Test_14:
   \   0000012E   0x2002             MOVS     R0,#+2
   \   00000130   0x.... 0x....      BL       ReadSwitches
   \   00000134   0x2800             CMP      R0,#+0
   \   00000136   0xD1FA             BNE.N    ??Test_14
   \   00000138   0x2001             MOVS     R0,#+1
   \   0000013A   0x.... 0x....      BL       ReadSwitches
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD1F5             BNE.N    ??Test_14
    160                  GetAccGyrOffsetOpe();
   \   00000142   0x.... 0x....      BL       GetAccGyrOffsetOpe
    161                  for(i = 0; i < 3; i++)
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x0005             MOVS     R5,R0
   \                     ??Test_15:
   \   0000014A   0x2D03             CMP      R5,#+3
   \   0000014C   0xDA15             BGE.N    ??Test_16
    162                  {
    163                      GetQuadParamInRam()->acc_offset[i] = g_i16AccOffset[i];
   \   0000014E   0x.... 0x....      BL       GetQuadParamInRam
   \   00000152   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   00000156   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \   0000015A   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   0000015E   0xF8A0 0x1001      STRH     R1,[R0, #+1]
    164                      GetQuadParamInRam()->gyr_offset[i] = g_i16GyrOffset[i];
   \   00000162   0x.... 0x....      BL       GetQuadParamInRam
   \   00000166   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \   0000016E   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   00000172   0xF8A0 0x1013      STRH     R1,[R0, #+19]
    165                  }
   \   00000176   0x1C6D             ADDS     R5,R5,#+1
   \   00000178   0xE7E7             B.N      ??Test_15
    166                  SaveQuadParamToFlash(*GetQuadParamInRam());
   \                     ??Test_16:
   \   0000017A   0x.... 0x....      BL       GetQuadParamInRam
   \   0000017E   0x0001             MOVS     R1,R0
   \   00000180   0xB084             SUB      SP,SP,#+16
   \   00000182   0x4668             MOV      R0,SP
   \   00000184   0x229D             MOVS     R2,#+157
   \   00000186   0x.... 0x....      BL       __aeabi_memcpy
   \   0000018A   0xBC0F             POP      {R0-R3}
   \   0000018C   0x.... 0x....      BL       SaveQuadParamToFlash
    167                  SetBuzzerMode(0);
   \   00000190   0x2000             MOVS     R0,#+0
   \   00000192   0x.... 0x....      BL       SetBuzzerMode
   \   00000196   0xE060             B.N      ??Test_17
    168              }
    169              else if(g_sQuadSystemFlag.sys_setting.acc_getoffset)
   \                     ??Test_13:
   \   00000198   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000019C   0x7940             LDRB     R0,[R0, #+5]
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xD02B             BEQ.N    ??Test_18
    170              {
    171                  SetLightsOnOff(WAITTING_START_GET_ACC_OFFSET_OPE_LED_HINT);
   \   000001A2   0x20F2             MOVS     R0,#+242
   \   000001A4   0x.... 0x....      BL       SetLightsOnOff
    172                  SetBuzzerMode(4);
   \   000001A8   0x2004             MOVS     R0,#+4
   \   000001AA   0x.... 0x....      BL       SetBuzzerMode
    173                  while(ReadSwitches(GET_ACC_OFFSET_SWITCH_BIT_MASK));
   \                     ??Test_19:
   \   000001AE   0x2002             MOVS     R0,#+2
   \   000001B0   0x.... 0x....      BL       ReadSwitches
   \   000001B4   0x2800             CMP      R0,#+0
   \   000001B6   0xD1FA             BNE.N    ??Test_19
    174                  GetAccOffsetOpe();
   \   000001B8   0x.... 0x....      BL       GetAccOffsetOpe
    175                  for(i = 0; i < 3; i++)
   \   000001BC   0x2000             MOVS     R0,#+0
   \   000001BE   0x0005             MOVS     R5,R0
   \                     ??Test_20:
   \   000001C0   0x2D03             CMP      R5,#+3
   \   000001C2   0xDA0B             BGE.N    ??Test_21
    176                  {
    177                      GetQuadParamInRam()->acc_offset[i] = g_i16AccOffset[i];
   \   000001C4   0x.... 0x....      BL       GetQuadParamInRam
   \   000001C8   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   000001CC   0x.... 0x....      LDR.W    R1,??DataTable1_9
   \   000001D0   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   000001D4   0xF8A0 0x1001      STRH     R1,[R0, #+1]
    178                  }        
   \   000001D8   0x1C6D             ADDS     R5,R5,#+1
   \   000001DA   0xE7F1             B.N      ??Test_20
    179                  SaveQuadParamToFlash(*GetQuadParamInRam());
   \                     ??Test_21:
   \   000001DC   0x.... 0x....      BL       GetQuadParamInRam
   \   000001E0   0x0001             MOVS     R1,R0
   \   000001E2   0xB084             SUB      SP,SP,#+16
   \   000001E4   0x4668             MOV      R0,SP
   \   000001E6   0x229D             MOVS     R2,#+157
   \   000001E8   0x.... 0x....      BL       __aeabi_memcpy
   \   000001EC   0xBC0F             POP      {R0-R3}
   \   000001EE   0x.... 0x....      BL       SaveQuadParamToFlash
    180                  SetBuzzerMode(0);
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0x.... 0x....      BL       SetBuzzerMode
   \   000001F8   0xE02F             B.N      ??Test_17
    181              }
    182              else if(g_sQuadSystemFlag.sys_setting.gyr_getoffset)
   \                     ??Test_18:
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000001FE   0x7980             LDRB     R0,[R0, #+6]
   \   00000200   0x2800             CMP      R0,#+0
   \   00000202   0xD02A             BEQ.N    ??Test_17
    183              {
    184                  SetLightsOnOff(WAITTING_START_GET_GYR_OFFSET_OPE_LED_HINT);
   \   00000204   0x20F1             MOVS     R0,#+241
   \   00000206   0x.... 0x....      BL       SetLightsOnOff
    185                  SetBuzzerMode(4);
   \   0000020A   0x2004             MOVS     R0,#+4
   \   0000020C   0x.... 0x....      BL       SetBuzzerMode
    186                  while(ReadSwitches(GET_GYR_OFFSET_SWITCH_BIT_MASK));
   \                     ??Test_22:
   \   00000210   0x2001             MOVS     R0,#+1
   \   00000212   0x.... 0x....      BL       ReadSwitches
   \   00000216   0x2800             CMP      R0,#+0
   \   00000218   0xD1FA             BNE.N    ??Test_22
    187                  GetGyrOffsetOpe();
   \   0000021A   0x.... 0x....      BL       GetGyrOffsetOpe
    188                  for(i = 0; i < 3; i++)
   \   0000021E   0x2000             MOVS     R0,#+0
   \   00000220   0x0005             MOVS     R5,R0
   \                     ??Test_23:
   \   00000222   0x2D03             CMP      R5,#+3
   \   00000224   0xDA0B             BGE.N    ??Test_24
    189                  {
    190                      GetQuadParamInRam()->gyr_offset[i] = g_i16GyrOffset[i];
   \   00000226   0x.... 0x....      BL       GetQuadParamInRam
   \   0000022A   0xEB10 0x0045      ADDS     R0,R0,R5, LSL #+1
   \   0000022E   0x.... 0x....      LDR.W    R1,??DataTable1_10
   \   00000232   0xF831 0x1015      LDRH     R1,[R1, R5, LSL #+1]
   \   00000236   0xF8A0 0x1013      STRH     R1,[R0, #+19]
    191                  }
   \   0000023A   0x1C6D             ADDS     R5,R5,#+1
   \   0000023C   0xE7F1             B.N      ??Test_23
    192                  SaveQuadParamToFlash(*GetQuadParamInRam());
   \                     ??Test_24:
   \   0000023E   0x.... 0x....      BL       GetQuadParamInRam
   \   00000242   0x0001             MOVS     R1,R0
   \   00000244   0xB084             SUB      SP,SP,#+16
   \   00000246   0x4668             MOV      R0,SP
   \   00000248   0x229D             MOVS     R2,#+157
   \   0000024A   0x.... 0x....      BL       __aeabi_memcpy
   \   0000024E   0xBC0F             POP      {R0-R3}
   \   00000250   0x.... 0x....      BL       SaveQuadParamToFlash
    193                  SetBuzzerMode(0);        
   \   00000254   0x2000             MOVS     R0,#+0
   \   00000256   0x.... 0x....      BL       SetBuzzerMode
    194              }
    195              
    196              if(g_sQuadSystemFlag.sys_setting.WFLY_RC_getoffset)
   \                     ??Test_17:
   \   0000025A   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000025E   0x79C0             LDRB     R0,[R0, #+7]
   \   00000260   0x2800             CMP      R0,#+0
   \   00000262   0xD047             BEQ.N    ??Test_25
    197              {
    198                  SetLightsOnOff(WAITTING_START_GET_WFLY_RC_OFFSET_LED_HINT);
   \   00000264   0x20F4             MOVS     R0,#+244
   \   00000266   0x.... 0x....      BL       SetLightsOnOff
    199                  SetBuzzerMode(4);
   \   0000026A   0x2004             MOVS     R0,#+4
   \   0000026C   0x.... 0x....      BL       SetBuzzerMode
    200                  while(ReadSwitches(GET_WFLY_RC_OFFSET_SWITCH_BIT_MASK));
   \                     ??Test_26:
   \   00000270   0x2004             MOVS     R0,#+4
   \   00000272   0x.... 0x....      BL       ReadSwitches
   \   00000276   0x2800             CMP      R0,#+0
   \   00000278   0xD1FA             BNE.N    ??Test_26
    201                  WFLY_RC_GetOffsetOpe();
   \   0000027A   0x.... 0x....      BL       WFLY_RC_GetOffsetOpe
    202                  while(!ReadSwitches(GET_WFLY_RC_OFFSET_SWITCH_BIT_MASK));
   \                     ??Test_27:
   \   0000027E   0x2004             MOVS     R0,#+4
   \   00000280   0x.... 0x....      BL       ReadSwitches
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xD0FA             BEQ.N    ??Test_27
    203                  SetBuzzerMode(2);
   \   00000288   0x2002             MOVS     R0,#+2
   \   0000028A   0x.... 0x....      BL       SetBuzzerMode
    204                  delayms(400);
   \   0000028E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000292   0x.... 0x....      BL       delayms
    205                  while(ReadSwitches(GET_WFLY_RC_OFFSET_SWITCH_BIT_MASK));
   \                     ??Test_28:
   \   00000296   0x2004             MOVS     R0,#+4
   \   00000298   0x.... 0x....      BL       ReadSwitches
   \   0000029C   0x2800             CMP      R0,#+0
   \   0000029E   0xD1FA             BNE.N    ??Test_28
    206                  WFLY_RC_GetMaxRangeOpe();
   \   000002A0   0x.... 0x....      BL       WFLY_RC_GetMaxRangeOpe
    207                  for(i = 0; i < 4; i++)
   \   000002A4   0x2000             MOVS     R0,#+0
   \   000002A6   0x0005             MOVS     R5,R0
   \                     ??Test_29:
   \   000002A8   0x2D04             CMP      R5,#+4
   \   000002AA   0xDA15             BGE.N    ??Test_30
    208                  {
    209                      GetQuadParamInRam()->WFLY_RC_offset[i] = g_u32WFLY_RC_offset[i];
   \   000002AC   0x.... 0x....      BL       GetQuadParamInRam
   \   000002B0   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   000002B4   0x.... 0x....      LDR.W    R1,??DataTable1_11
   \   000002B8   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   000002BC   0xF8C0 0x1037      STR      R1,[R0, #+55]
    210                      GetQuadParamInRam()->WFLY_RC_max_range[i] = g_u32WFLY_RC_max_range[i];
   \   000002C0   0x.... 0x....      BL       GetQuadParamInRam
   \   000002C4   0xEB10 0x0085      ADDS     R0,R0,R5, LSL #+2
   \   000002C8   0x.... 0x....      LDR.W    R1,??DataTable1_12
   \   000002CC   0xF851 0x1025      LDR      R1,[R1, R5, LSL #+2]
   \   000002D0   0xF8C0 0x1047      STR      R1,[R0, #+71]
    211                  }     
   \   000002D4   0x1C6D             ADDS     R5,R5,#+1
   \   000002D6   0xE7E7             B.N      ??Test_29
    212                  SaveQuadParamToFlash(*GetQuadParamInRam());
   \                     ??Test_30:
   \   000002D8   0x.... 0x....      BL       GetQuadParamInRam
   \   000002DC   0x0001             MOVS     R1,R0
   \   000002DE   0xB084             SUB      SP,SP,#+16
   \   000002E0   0x4668             MOV      R0,SP
   \   000002E2   0x229D             MOVS     R2,#+157
   \   000002E4   0x.... 0x....      BL       __aeabi_memcpy
   \   000002E8   0xBC0F             POP      {R0-R3}
   \   000002EA   0x.... 0x....      BL       SaveQuadParamToFlash
    213                  SetBuzzerMode(0);
   \   000002EE   0x2000             MOVS     R0,#+0
   \   000002F0   0x.... 0x....      BL       SetBuzzerMode
    214              }
    215          
    216              ApplyQuadParam(*GetQuadParamInRam());
   \                     ??Test_25:
   \   000002F4   0x.... 0x....      BL       GetQuadParamInRam
   \   000002F8   0x0001             MOVS     R1,R0
   \   000002FA   0xB084             SUB      SP,SP,#+16
   \   000002FC   0x4668             MOV      R0,SP
   \   000002FE   0x229D             MOVS     R2,#+157
   \   00000300   0x.... 0x....      BL       __aeabi_memcpy
   \   00000304   0xBC0F             POP      {R0-R3}
   \   00000306   0x.... 0x....      BL       ApplyQuadParam
    217          
    218              SetLightsOnOff(0x00);
   \   0000030A   0x2000             MOVS     R0,#+0
   \   0000030C   0x.... 0x....      BL       SetLightsOnOff
    219          
    220              ///////////////////////////////////////////////////////////////////////////////////////
    221          
    222              InitUartQueue(GPS_UART, 128);
   \   00000310   0x2180             MOVS     R1,#+128
   \   00000312   0x.... 0x....      LDR.W    R0,??DataTable1_13  ;; 0x400eb000
   \   00000316   0x.... 0x....      BL       InitUartQueue
    223              InitUartQueue(COMMUNICATE_UART, 128);
   \   0000031A   0x2180             MOVS     R1,#+128
   \   0000031C   0x.... 0x....      LDR.W    R0,??DataTable1_14  ;; 0x4006c000
   \   00000320   0x.... 0x....      BL       InitUartQueue
    224              InitUartQueue(DEBUG_UART, 128);
   \   00000324   0x2180             MOVS     R1,#+128
   \   00000326   0x.... 0x....      LDR.W    R0,??DataTable1_15  ;; 0x400ea000
   \   0000032A   0x.... 0x....      BL       InitUartQueue
    225              InitUartRecvQueue(GPS_UART, 64);
   \   0000032E   0x2140             MOVS     R1,#+64
   \   00000330   0x.... 0x....      LDR.W    R0,??DataTable1_13  ;; 0x400eb000
   \   00000334   0x.... 0x....      BL       InitUartRecvQueue
    226              miniAHRS_InitUartQueue();
   \   00000338   0x.... 0x....      BL       miniAHRS_InitUartQueue
    227          
    228              MPU6050_InitRawData();
   \   0000033C   0x.... 0x....      BL       MPU6050_InitRawData
    229              if(g_sQuadSystemFlag.sys_setting.use_ak8975c)
   \   00000340   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   00000344   0x7A40             LDRB     R0,[R0, #+9]
   \   00000346   0x2800             CMP      R0,#+0
   \   00000348   0xD001             BEQ.N    ??Test_31
    230              {
    231                  AK8975C_InitRawData();
   \   0000034A   0x.... 0x....      BL       AK8975C_InitRawData
    232              }
    233              AttitudeInit();    
   \                     ??Test_31:
   \   0000034E   0x.... 0x....      BL       AttitudeInit
    234              InitAltitude();
   \   00000352   0x.... 0x....      BL       InitAltitude
    235              InitControl();
   \   00000356   0x.... 0x....      BL       InitControl
    236          
    237              if(g_sQuadSystemFlag.flash_param_error)
   \   0000035A   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000035E   0x7800             LDRB     R0,[R0, #+0]
   \   00000360   0x2800             CMP      R0,#+0
   \   00000362   0xD002             BEQ.N    ??Test_32
    238              {
    239                  TurnOnLights(FLASH_PARAM_ERROR_LED_LIGHT_BIT_MASK);
   \   00000364   0x2020             MOVS     R0,#+32
   \   00000366   0x.... 0x....      BL       TurnOnLights
    240              } 
    241          
    242              float yaw, pitch, roll; 
    243              g_u32ProgramPeriodTimerCnt = 0;
   \                     ??Test_32:
   \   0000036A   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   0000036E   0x2100             MOVS     R1,#+0
   \   00000370   0x6001             STR      R1,[R0, #+0]
    244              while(1)
    245              {
    246                  if(g_sQuadSystemFlag.flash_param_error)
   \                     ??Test_33:
   \   00000372   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   00000376   0x7800             LDRB     R0,[R0, #+0]
   \   00000378   0x2800             CMP      R0,#+0
   \   0000037A   0xD002             BEQ.N    ??Test_34
    247                  {
    248                      TurnOnLights(FLASH_PARAM_ERROR_LED_LIGHT_BIT_MASK);
   \   0000037C   0x2020             MOVS     R0,#+32
   \   0000037E   0x.... 0x....      BL       TurnOnLights
    249                  }
    250                  if(g_u32ProgramPeriodTimerCnt >= PROGRAM_PERIOD_MS)
   \                     ??Test_34:
   \   00000382   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000386   0x6800             LDR      R0,[R0, #+0]
   \   00000388   0x2804             CMP      R0,#+4
   \   0000038A   0xD302             BCC.N    ??Test_35
    251                  {
    252                      TurnOnLights(PROGRAM_RUNNING_OVER_TIME_LIGHT_BIT_MASK);
   \   0000038C   0x2040             MOVS     R0,#+64
   \   0000038E   0x.... 0x....      BL       TurnOnLights
    253                  }
    254                  else
    255                  {
    256                      //TurnOffLights(PROGRAM_RUNNING_OVER_TIME_LIGHT_BIT_MASK);
    257                  }        
    258                  if(g_u32ProgramPeriodTimerCnt > max_program_period_time)
   \                     ??Test_35:
   \   00000392   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   00000396   0x6800             LDR      R0,[R0, #+0]
   \   00000398   0x4284             CMP      R4,R0
   \   0000039A   0xD203             BCS.N    ??Test_36
    259                  {
    260                      max_program_period_time = g_u32ProgramPeriodTimerCnt;
   \   0000039C   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000003A0   0x6800             LDR      R0,[R0, #+0]
   \   000003A2   0x0004             MOVS     R4,R0
    261                  }               
    262                  while(g_u32ProgramPeriodTimerCnt < PROGRAM_PERIOD_MS)
   \                     ??Test_36:
   \   000003A4   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000003A8   0x6800             LDR      R0,[R0, #+0]
   \   000003AA   0x2804             CMP      R0,#+4
   \   000003AC   0xD3FA             BCC.N    ??Test_36
    263                  {
    264          
    265                  }
    266                  g_u32ProgramPeriodTimerCnt = 0;
   \   000003AE   0x.... 0x....      LDR.W    R0,??DataTable1_1
   \   000003B2   0x2100             MOVS     R1,#+0
   \   000003B4   0x6001             STR      R1,[R0, #+0]
    267          
    268                  if(program_running_count < PROGRAM_RUNNING_PERIOD_MS / PROGRAM_PERIOD_MS)
   \   000003B6   0x2F3E             CMP      R7,#+62
   \   000003B8   0xDA01             BGE.N    ??Test_37
    269                  {
    270                      program_running_count ++;
   \   000003BA   0x1C7F             ADDS     R7,R7,#+1
   \   000003BC   0xE004             B.N      ??Test_38
    271                  }
    272                  else
    273                  {
    274                      ToggleLights(PROGRAM_RUNNING_LED_LIGHT_BIT_MASK);
   \                     ??Test_37:
   \   000003BE   0x2080             MOVS     R0,#+128
   \   000003C0   0x.... 0x....      BL       ToggleLights
    275                      program_running_count = 0;
   \   000003C4   0x2000             MOVS     R0,#+0
   \   000003C6   0x0007             MOVS     R7,R0
    276                  }
    277                  
    278                  TriggerBatteryADC();
   \                     ??Test_38:
   \   000003C8   0x.... 0x....      BL       TriggerBatteryADC
    279                  MS5611_RefreshData();
   \   000003CC   0x.... 0x....      BL       MS5611_RefreshData
    280                  MPU6050_RefreshRawData(); 
   \   000003D0   0x.... 0x....      BL       MPU6050_RefreshRawData
    281                  if(g_sQuadSystemFlag.sys_setting.use_ak8975c)
   \   000003D4   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000003D8   0x7A40             LDRB     R0,[R0, #+9]
   \   000003DA   0x2800             CMP      R0,#+0
   \   000003DC   0xD001             BEQ.N    ??Test_39
    282                  {
    283                      AK8975C_RefreshRawData();
   \   000003DE   0x.... 0x....      BL       AK8975C_RefreshRawData
    284                  }
    285          //        Flow_RefreshRawData();
    286                  RefreshAttitude();
   \                     ??Test_39:
   \   000003E2   0x.... 0x....      BL       RefreshAttitude
    287                  ADNS3080_RefreshRawData();
   \   000003E6   0x.... 0x....      BL       ADNS3080_RefreshRawData
    288                  ADNS3080_IntegratePixel(ADNS3080_GetRawData()->delta_x, ADNS3080_GetRawData()->delta_y);
   \   000003EA   0x.... 0x....      BL       ADNS3080_GetRawData
   \   000003EE   0x4680             MOV      R8,R0
   \   000003F0   0x.... 0x....      BL       ADNS3080_GetRawData
   \   000003F4   0xF998 0x1002      LDRSB    R1,[R8, #+2]
   \   000003F8   0xF990 0x0001      LDRSB    R0,[R0, #+1]
   \   000003FC   0x.... 0x....      BL       ADNS3080_IntegratePixel
    289                  //ADNS3080_IntegratePosition(ADNS3080_GetRawData()->delta_x, ADNS3080_GetRawData()->delta_y, ((float)g_sonar_measure_distance_mm / 1000));
    290                  float gyr[3]; 
    291                  MPU6050_GetCalibratedGyr(gyr);
   \   00000400   0xA807             ADD      R0,SP,#+28
   \   00000402   0x.... 0x....      BL       MPU6050_GetCalibratedGyr
    292                  ADNS3080_IntergratePositionWithGyrAttitude(ADNS3080_GetRawData()->delta_x, ADNS3080_GetRawData()->delta_y, gyr[0], gyr[1], GetEulerAttitude()->yaw/57.2957795f, ((float)g_sonar_measure_distance_mm / 1000));
   \   00000406   0x.... 0x....      BL       GetEulerAttitude
   \   0000040A   0x4680             MOV      R8,R0
   \   0000040C   0x.... 0x....      BL       ADNS3080_GetRawData
   \   00000410   0x4681             MOV      R9,R0
   \   00000412   0x.... 0x....      BL       ADNS3080_GetRawData
   \   00000416   0x4682             MOV      R10,R0
   \   00000418   0x.... 0x....      LDR.W    R0,??DataTable1_16
   \   0000041C   0x8800             LDRH     R0,[R0, #+0]
   \   0000041E   0x.... 0x....      BL       __aeabi_ui2f
   \   00000422   0x.... 0x....      LDR.W    R1,??DataTable1_17  ;; 0x447a0000
   \   00000426   0x.... 0x....      BL       __aeabi_fdiv
   \   0000042A   0x9001             STR      R0,[SP, #+4]
   \   0000042C   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000430   0x.... 0x....      LDR.W    R1,??DataTable1_18  ;; 0x42652ee1
   \   00000434   0x.... 0x....      BL       __aeabi_fdiv
   \   00000438   0x9000             STR      R0,[SP, #+0]
   \   0000043A   0x9B08             LDR      R3,[SP, #+32]
   \   0000043C   0x9A07             LDR      R2,[SP, #+28]
   \   0000043E   0xF999 0x1002      LDRSB    R1,[R9, #+2]
   \   00000442   0xF99A 0x0001      LDRSB    R0,[R10, #+1]
   \   00000446   0x.... 0x....      BL       ADNS3080_IntergratePositionWithGyrAttitude
    293                 
    294                  yaw = GetEulerAttitude()->yaw * 10; 
   \   0000044A   0x.... 0x....      BL       GetEulerAttitude
   \   0000044E   0x6800             LDR      R0,[R0, #+0]
   \   00000450   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000454   0x.... 0x....      BL       __aeabi_fmul
   \   00000458   0x9006             STR      R0,[SP, #+24]
    295                  pitch = GetEulerAttitude()->pitch * 10; 
   \   0000045A   0x.... 0x....      BL       GetEulerAttitude
   \   0000045E   0x6840             LDR      R0,[R0, #+4]
   \   00000460   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000464   0x.... 0x....      BL       __aeabi_fmul
   \   00000468   0x9005             STR      R0,[SP, #+20]
    296                  roll = GetEulerAttitude()->roll * 10;
   \   0000046A   0x.... 0x....      BL       GetEulerAttitude
   \   0000046E   0x6880             LDR      R0,[R0, #+8]
   \   00000470   0x.... 0x....      LDR.W    R1,??DataTable1_2  ;; 0x41200000
   \   00000474   0x.... 0x....      BL       __aeabi_fmul
   \   00000478   0x0006             MOVS     R6,R0
    297          
    298                  /*float ypr[3];
    299                  if(((int)fabs(GetEulerAttitude()->pitch) >= 30) || ((int)fabs(GetEulerAttitude()->roll) >= 30) || (g_sQuadSystemFlag.incline_halt_flag == 1))
    300                  {
    301                      SetBuzzerMode(1);
    302                      g_sQuadSystemFlag.incline_halt_flag = 1;
    303                      for(i = 0; i < 3; i++)
    304                      {
    305                          ypr[i] = 0;
    306                      }  
    307                      GetControlParameter()->lock_attitude_struct.targetAttitude = quaternion_converYawPitchRollToQuaternion(ypr);
    308                      GetControlParameter()->lock_attitude_struct.baseThrottle = 0;
    309                  }
    310                  else if((g_u32LostSignalTimerCnt > LOST_SIGNAL_LIMIT_TIME_MS) && (g_sQuadSystemFlag.sys_setting.use_WFLY_RC == 0))
    311                  {
    312                      SetBuzzerMode(2);
    313                      for(i = 0; i < 3; i++)
    314                      {
    315                          ypr[i] = 0;
    316                      }
    317                      GetControlParameter()->lock_attitude_struct.targetAttitude = quaternion_converYawPitchRollToQuaternion(ypr);    
    318                      GetControlParameter()->lock_attitude_struct.baseThrottle = 0.4;            
    319                  }
    320                  else
    321                  {
    322                      SetBuzzerMode(0);
    323                      if(g_sQuadSystemFlag.sys_setting.use_WFLY_RC == 0)
    324                      {
    325                          ypr[0] = g_f32DebugYaw;
    326                          ypr[1] = g_f32DebugPitch;
    327                          ypr[2] = g_f32DebugRoll;  
    328                          GetControlParameter()->lock_attitude_struct.targetAttitude = quaternion_converYawPitchRollToQuaternion(ypr);
    329                          GetControlParameter()->lock_attitude_struct.baseThrottle = g_f32DebugThrottle; 
    330                      }
    331                      else
    332                      {
    333                          ypr[0] = WFLY_RC_GetYawRatio() * 10;
    334                          ypr[1] = WFLY_RC_GetPitchRatio() * 10;
    335                          ypr[2] = WFLY_RC_GetRollRatio() * 10;  
    336                          if(g_sQuadSystemFlag.sys_setting.lock_height)
    337                          {
    338                              GetControlParameter()->lock_attitude_struct.baseThrottle = CtrlGetLockTargetHeightThrottle(0);
    339                          }
    340                          else
    341                          {
    342                              GetControlParameter()->lock_attitude_struct.baseThrottle = WFLY_RC_GetThrottleRatio() * 0.60; 
    343                          }
    344                          GetControlParameter()->lock_attitude_struct.targetAttitude = quaternion_converYawPitchRollToQuaternion(ypr);                
    345                      }
    346                  }
    347                  CtrlLockTargetAttitude();*/
    348          
    349                  if(g_sQuadSystemFlag.sys_setting.use_WFLY_RC == 0)
   \   0000047A   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000047E   0x7AC0             LDRB     R0,[R0, #+11]
   \   00000480   0x2800             CMP      R0,#+0
   \   00000482   0xD15F             BNE.N    ??Test_40
    350                  {
    351                      if((g_u32LostSignalTimerCnt > LOST_SIGNAL_LIMIT_TIME_MS) && (g_u32LostSignalTimerCnt < (LOST_SIGNAL_LIMIT_TIME_MS + LANDING_TIME_MS)))
   \   00000484   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   00000488   0x6800             LDR      R0,[R0, #+0]
   \   0000048A   0xF240 0x51DD      MOVW     R1,#+1501
   \   0000048E   0x4288             CMP      R0,R1
   \   00000490   0xD31B             BCC.N    ??Test_41
   \   00000492   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   00000496   0x6800             LDR      R0,[R0, #+0]
   \   00000498   0xF241 0x1194      MOVW     R1,#+4500
   \   0000049C   0x4288             CMP      R0,R1
   \   0000049E   0xD214             BCS.N    ??Test_41
    352                      {
    353                          SetBuzzerMode(2);
   \   000004A0   0x2002             MOVS     R0,#+2
   \   000004A2   0x.... 0x....      BL       SetBuzzerMode
    354                          g_sQuadSystemFlag.lost_signal = 1;
   \   000004A6   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000004AA   0x2101             MOVS     R1,#+1
   \   000004AC   0x7101             STRB     R1,[R0, #+4]
    355                          CtrlSetTargetEulerAttitude(0, 0, 0);
   \   000004AE   0x2200             MOVS     R2,#+0
   \   000004B0   0x2100             MOVS     R1,#+0
   \   000004B2   0x2000             MOVS     R0,#+0
   \   000004B4   0x.... 0x....      BL       CtrlSetTargetEulerAttitude
    356                          CtrlSetBaseThrottle(gc_f32LandingThrottle);
   \   000004B8   0x.... 0x....      LDR.W    R0,??DataTable1_20
   \   000004BC   0x6800             LDR      R0,[R0, #+0]
   \   000004BE   0x.... 0x....      BL       CtrlSetBaseThrottle
    357                          CtrlSetMode(CTRL_MODE_LOCK_ATTITUDE);
   \   000004C2   0x2001             MOVS     R0,#+1
   \   000004C4   0x.... 0x....      BL       CtrlSetMode
   \   000004C8   0xE0D7             B.N      ??Test_42
    358                      }
    359                      else if(g_u32LostSignalTimerCnt > (LOST_SIGNAL_LIMIT_TIME_MS + LANDING_TIME_MS))
   \                     ??Test_41:
   \   000004CA   0x.... 0x....      LDR.W    R0,??DataTable1_19
   \   000004CE   0x6800             LDR      R0,[R0, #+0]
   \   000004D0   0xF241 0x1195      MOVW     R1,#+4501
   \   000004D4   0x4288             CMP      R0,R1
   \   000004D6   0xD30C             BCC.N    ??Test_43
    360                      {
    361                          SetBuzzerMode(2);
   \   000004D8   0x2002             MOVS     R0,#+2
   \   000004DA   0x.... 0x....      BL       SetBuzzerMode
    362                          g_sQuadSystemFlag.lost_signal = 1;
   \   000004DE   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000004E2   0x2101             MOVS     R1,#+1
   \   000004E4   0x7101             STRB     R1,[R0, #+4]
    363                          GetControlParameter()->mode = CTRL_MODE_HALT;
   \   000004E6   0x.... 0x....      BL       GetControlParameter
   \   000004EA   0x2100             MOVS     R1,#+0
   \   000004EC   0xF880 0x1038      STRB     R1,[R0, #+56]
   \   000004F0   0xE0C3             B.N      ??Test_42
    364                      }
    365                      else
    366                      {
    367                          SetBuzzerMode(0);
   \                     ??Test_43:
   \   000004F2   0x2000             MOVS     R0,#+0
   \   000004F4   0x.... 0x....      BL       SetBuzzerMode
    368                          g_sQuadSystemFlag.lost_signal = 0;
   \   000004F8   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000004FC   0x2100             MOVS     R1,#+0
   \   000004FE   0x7101             STRB     R1,[R0, #+4]
    369                          CtrlSetTargetEulerAttitude(g_f32DebugYaw, g_f32DebugPitch, g_f32DebugRoll); 
   \   00000500   0x.... 0x....      LDR.W    R0,??DataTable1_21
   \   00000504   0x6802             LDR      R2,[R0, #+0]
   \   00000506   0x.... 0x....      LDR.W    R0,??DataTable1_22
   \   0000050A   0x6801             LDR      R1,[R0, #+0]
   \   0000050C   0x.... 0x....      LDR.W    R0,??DataTable1_23
   \   00000510   0x6800             LDR      R0,[R0, #+0]
   \   00000512   0x.... 0x....      BL       CtrlSetTargetEulerAttitude
    370                          if(g_sQuadSystemFlag.sys_setting.lock_height)
   \   00000516   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   0000051A   0x7B00             LDRB     R0,[R0, #+12]
   \   0000051C   0x2800             CMP      R0,#+0
   \   0000051E   0xD008             BEQ.N    ??Test_44
    371                          {
    372                              CtrlSetTargetHeight(g_f32DebugThrottle);
   \   00000520   0x.... 0x....      LDR.W    R0,??DataTable1_24
   \   00000524   0x6800             LDR      R0,[R0, #+0]
   \   00000526   0x.... 0x....      BL       CtrlSetTargetHeight
    373                              CtrlSetMode(CTRL_MODE_LOCK_HEIGHT_ATTITUDE);
   \   0000052A   0x2003             MOVS     R0,#+3
   \   0000052C   0x.... 0x....      BL       CtrlSetMode
   \   00000530   0xE0A3             B.N      ??Test_42
    374                          }
    375                          else
    376                          {
    377                              CtrlSetBaseThrottle(g_f32DebugThrottle);
   \                     ??Test_44:
   \   00000532   0x.... 0x....      LDR.W    R0,??DataTable1_24
   \   00000536   0x6800             LDR      R0,[R0, #+0]
   \   00000538   0x.... 0x....      BL       CtrlSetBaseThrottle
    378                              CtrlSetMode(CTRL_MODE_LOCK_ATTITUDE);
   \   0000053C   0x2001             MOVS     R0,#+1
   \   0000053E   0x.... 0x....      BL       CtrlSetMode
   \   00000542   0xE09A             B.N      ??Test_42
    379                          }
    380                      }
    381                  }
    382                  else
    383                  {
    384                      SetBuzzerMode(0);
   \                     ??Test_40:
   \   00000544   0x2000             MOVS     R0,#+0
   \   00000546   0x.... 0x....      BL       SetBuzzerMode
    385                      static float s_f32LastYawAngle = 0;
    386                      float target_yaw_angle, target_pitch_angle, target_roll_angle;
    387          
    388                      target_yaw_angle = WFLY_RC_GetYawRatio() * gc_f32MaxRCYawAngle;
   \   0000054A   0x.... 0x....      BL       WFLY_RC_GetYawRatio
   \   0000054E   0x0001             MOVS     R1,R0
   \   00000550   0x.... 0x....      LDR.W    R0,??DataTable1_25
   \   00000554   0x6800             LDR      R0,[R0, #+0]
   \   00000556   0x.... 0x....      BL       __aeabi_fmul
   \   0000055A   0x4680             MOV      R8,R0
    389                      target_pitch_angle = WFLY_RC_GetPitchRatio() * gc_f32MaxRCPitchAngle;
   \   0000055C   0x.... 0x....      BL       WFLY_RC_GetPitchRatio
   \   00000560   0x0001             MOVS     R1,R0
   \   00000562   0x.... 0x....      LDR.W    R0,??DataTable1_26
   \   00000566   0x6800             LDR      R0,[R0, #+0]
   \   00000568   0x.... 0x....      BL       __aeabi_fmul
   \   0000056C   0x4681             MOV      R9,R0
    390                      target_roll_angle = WFLY_RC_GetRollRatio() * gc_f32MaxRCRollAngle;
   \   0000056E   0x.... 0x....      BL       WFLY_RC_GetRollRatio
   \   00000572   0x0001             MOVS     R1,R0
   \   00000574   0x.... 0x....      LDR.W    R0,??DataTable1_27
   \   00000578   0x6800             LDR      R0,[R0, #+0]
   \   0000057A   0x.... 0x....      BL       __aeabi_fmul
   \   0000057E   0x4682             MOV      R10,R0
    391                      if((WFLY_RC_GetYawRatio() < 0.1) && (WFLY_RC_GetYawRatio() > -0.1))
   \   00000580   0x.... 0x....      BL       WFLY_RC_GetYawRatio
   \   00000584   0x.... 0x....      LDR.W    R1,??DataTable1_28  ;; 0x3dcccccd
   \   00000588   0x.... 0x....      BL       __aeabi_cfcmple
   \   0000058C   0xD20B             BCS.N    ??Test_45
   \   0000058E   0x.... 0x....      BL       WFLY_RC_GetYawRatio
   \   00000592   0x.... 0x....      LDR.W    R1,??DataTable1_29  ;; 0xbdcccccc
   \   00000596   0x.... 0x....      BL       __aeabi_cfrcmple
   \   0000059A   0xD804             BHI.N    ??Test_45
    392                      {
    393                          target_yaw_angle = s_f32LastYawAngle;
   \   0000059C   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   000005A0   0x6800             LDR      R0,[R0, #+0]
   \   000005A2   0x4680             MOV      R8,R0
   \   000005A4   0xE00C             B.N      ??Test_46
    394                      }
    395                      else
    396                      {
    397                          target_yaw_angle = target_yaw_angle + s_f32LastYawAngle;
   \                     ??Test_45:
   \   000005A6   0x.... 0x....      LDR.W    R0,??DataTable1_30
   \   000005AA   0x6800             LDR      R0,[R0, #+0]
   \   000005AC   0x4641             MOV      R1,R8
   \   000005AE   0x.... 0x....      BL       __aeabi_fadd
   \   000005B2   0x4680             MOV      R8,R0
    398                          s_f32LastYawAngle = GetEulerAttitude()->yaw;
   \   000005B4   0x.... 0x....      BL       GetEulerAttitude
   \   000005B8   0x6800             LDR      R0,[R0, #+0]
   \   000005BA   0x.... 0x....      LDR.W    R1,??DataTable1_30
   \   000005BE   0x6008             STR      R0,[R1, #+0]
    399                      }
    400                      CtrlSetTargetEulerAttitude(target_yaw_angle, target_pitch_angle, target_roll_angle); 
   \                     ??Test_46:
   \   000005C0   0x4652             MOV      R2,R10
   \   000005C2   0x4649             MOV      R1,R9
   \   000005C4   0x4640             MOV      R0,R8
   \   000005C6   0x.... 0x....      BL       CtrlSetTargetEulerAttitude
    401          
    402                      if(g_sQuadSystemFlag.sys_setting.lock_height)
   \   000005CA   0x.... 0x....      LDR.W    R0,??DataTable1_8
   \   000005CE   0x7B00             LDRB     R0,[R0, #+12]
   \   000005D0   0x2800             CMP      R0,#+0
   \   000005D2   0xD032             BEQ.N    ??Test_47
    403                      {
    404                          if((WFLY_RC_GetThrottleRatio() * gc_f32MaxRCHeight) < gc_f32RCThrottleDeadZone)
   \   000005D4   0x.... 0x....      BL       WFLY_RC_GetThrottleRatio
   \   000005D8   0x0001             MOVS     R1,R0
   \   000005DA   0x.... 0x....      LDR.W    R0,??DataTable1_31
   \   000005DE   0x6800             LDR      R0,[R0, #+0]
   \   000005E0   0x.... 0x....      BL       __aeabi_fmul
   \   000005E4   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   000005E8   0x6809             LDR      R1,[R1, #+0]
   \   000005EA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000005EE   0xD206             BCS.N    ??Test_48
    405                          {
    406                              CtrlSetBaseThrottle(0);
   \   000005F0   0x2000             MOVS     R0,#+0
   \   000005F2   0x.... 0x....      BL       CtrlSetBaseThrottle
    407                              CtrlSetMode(CTRL_MODE_LOCK_ATTITUDE);
   \   000005F6   0x2001             MOVS     R0,#+1
   \   000005F8   0x.... 0x....      BL       CtrlSetMode
   \   000005FC   0xE02A             B.N      ??Test_49
    408                          }
    409                          else
    410                          {
    411                              CtrlSetTargetHeight((WFLY_RC_GetThrottleRatio() - gc_f32RCThrottleDeadZone) * (gc_f32MaxRCHeight / (1 - gc_f32RCThrottleDeadZone)));
   \                     ??Test_48:
   \   000005FE   0x.... 0x....      BL       WFLY_RC_GetThrottleRatio
   \   00000602   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   00000606   0x6809             LDR      R1,[R1, #+0]
   \   00000608   0x.... 0x....      BL       __aeabi_fsub
   \   0000060C   0x4683             MOV      R11,R0
   \   0000060E   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   00000612   0x.... 0x....      LDR.W    R1,??DataTable1_32
   \   00000616   0x6809             LDR      R1,[R1, #+0]
   \   00000618   0x.... 0x....      BL       __aeabi_fsub
   \   0000061C   0x0001             MOVS     R1,R0
   \   0000061E   0x.... 0x....      LDR.W    R0,??DataTable1_31
   \   00000622   0x6800             LDR      R0,[R0, #+0]
   \   00000624   0x.... 0x....      BL       __aeabi_fdiv
   \   00000628   0x4659             MOV      R1,R11
   \   0000062A   0x.... 0x....      BL       __aeabi_fmul
   \   0000062E   0x.... 0x....      BL       CtrlSetTargetHeight
    412                              CtrlSetMode(CTRL_MODE_LOCK_HEIGHT_ATTITUDE);
   \   00000632   0x2003             MOVS     R0,#+3
   \   00000634   0x.... 0x....      BL       CtrlSetMode
   \   00000638   0xE00C             B.N      ??Test_49
    413                          }
    414                      }
    415                      else
    416                      {
    417                          CtrlSetBaseThrottle(WFLY_RC_GetThrottleRatio() * gc_f32MaxRCThrottle);
   \                     ??Test_47:
   \   0000063A   0x.... 0x....      BL       WFLY_RC_GetThrottleRatio
   \   0000063E   0x0001             MOVS     R1,R0
   \   00000640   0x.... 0x....      LDR.W    R0,??DataTable1_33
   \   00000644   0x6800             LDR      R0,[R0, #+0]
   \   00000646   0x.... 0x....      BL       __aeabi_fmul
   \   0000064A   0x.... 0x....      BL       CtrlSetBaseThrottle
    418                          CtrlSetMode(CTRL_MODE_LOCK_ATTITUDE);
   \   0000064E   0x2001             MOVS     R0,#+1
   \   00000650   0x.... 0x....      BL       CtrlSetMode
    419                      }
    420          
    421                      if(WFLY_RC_GetCH5OnOff() == 0)
   \                     ??Test_49:
   \   00000654   0x.... 0x....      BL       WFLY_RC_GetCH5OnOff
   \   00000658   0x2800             CMP      R0,#+0
   \   0000065A   0xD103             BNE.N    ??Test_50
    422                      {
    423                          CtrlSetModeWithMask(CTRL_MODE_MASK_POSITION);
   \   0000065C   0x2004             MOVS     R0,#+4
   \   0000065E   0x.... 0x....      BL       CtrlSetModeWithMask
   \   00000662   0xE00A             B.N      ??Test_42
    424                      }
    425                      else
    426                      {
    427                          CtrlSetTargetPosition(g_f32ADNS3080PixelPosition[0], g_f32ADNS3080PixelPosition[1]);
   \                     ??Test_50:
   \   00000664   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   00000668   0x6841             LDR      R1,[R0, #+4]
   \   0000066A   0x.... 0x....      LDR.W    R0,??DataTable1_34
   \   0000066E   0x6800             LDR      R0,[R0, #+0]
   \   00000670   0x.... 0x....      BL       CtrlSetTargetPosition
    428                          CtrlCancelModeWithMask(CTRL_MODE_MASK_POSITION);
   \   00000674   0x2004             MOVS     R0,#+4
   \   00000676   0x.... 0x....      BL       CtrlCancelModeWithMask
    429                      }
    430                  }
    431                  CtrlEvent();
   \                     ??Test_42:
   \   0000067A   0x.... 0x....      BL       CtrlEvent
    432                  
    433                  //CtrlOutputSameThrottle(WFLY_RC_GetThrottleRatio());
    434          
    435                  //PWMOutOneESC(0, g_u32DebugPWM[0]);
    436                  //PWMOutOneESC(1, g_u32DebugPWM[1]);
    437                  //PWMOutOneESC(2, g_u32DebugPWM[2]);
    438                  //PWMOutOneESC(3, g_u32DebugPWM[3]);
    439                  
    440          //        PWMOutOneESC_1000Scale(0, g_u32DebugPWM[0] * 10);
    441          //        PWMOutOneESC_1000Scale(1, g_u32DebugPWM[1] * 10);
    442          //        PWMOutOneESC_1000Scale(2, g_u32DebugPWM[2] * 10);
    443          //        PWMOutOneESC_1000Scale(3, g_u32DebugPWM[3] * 10);
    444          
    445                  if(IsUartQueueEmpty(GPS_UART))
   \   0000067E   0x.... 0x....      LDR.W    R0,??DataTable1_13  ;; 0x400eb000
   \   00000682   0x.... 0x....      BL       IsUartQueueEmpty
   \   00000686   0x2800             CMP      R0,#+0
   \   00000688   0xD071             BEQ.N    ??Test_51
    446                  {
    447                      sprintf(str_buff, "%d\t%d\t%d\t%d\t", (int)(100 * GetControlParameter()->throttle[0]), (int)(100 * GetControlParameter()->throttle[1]), (int)(100 * GetControlParameter()->throttle[2]), (int)(100 * GetControlParameter()->throttle[3]));
   \   0000068A   0x.... 0x....      BL       GetControlParameter
   \   0000068E   0x4681             MOV      R9,R0
   \   00000690   0x.... 0x....      BL       GetControlParameter
   \   00000694   0x4682             MOV      R10,R0
   \   00000696   0x.... 0x....      BL       GetControlParameter
   \   0000069A   0x4683             MOV      R11,R0
   \   0000069C   0x.... 0x....      BL       GetControlParameter
   \   000006A0   0x4680             MOV      R8,R0
   \   000006A2   0xF8D9 0x002C      LDR      R0,[R9, #+44]
   \   000006A6   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   000006AA   0x.... 0x....      BL       __aeabi_fmul
   \   000006AE   0x.... 0x....      BL       __aeabi_f2iz
   \   000006B2   0x9001             STR      R0,[SP, #+4]
   \   000006B4   0xF8DA 0x0028      LDR      R0,[R10, #+40]
   \   000006B8   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   000006BC   0x.... 0x....      BL       __aeabi_fmul
   \   000006C0   0x.... 0x....      BL       __aeabi_f2iz
   \   000006C4   0x9000             STR      R0,[SP, #+0]
   \   000006C6   0xF8DB 0x0024      LDR      R0,[R11, #+36]
   \   000006CA   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   000006CE   0x.... 0x....      BL       __aeabi_fmul
   \   000006D2   0x.... 0x....      BL       __aeabi_f2iz
   \   000006D6   0x0003             MOVS     R3,R0
   \   000006D8   0x4699             MOV      R9,R3
   \   000006DA   0xF8D8 0x0020      LDR      R0,[R8, #+32]
   \   000006DE   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   000006E2   0x.... 0x....      BL       __aeabi_fmul
   \   000006E6   0x.... 0x....      BL       __aeabi_f2iz
   \   000006EA   0x0002             MOVS     R2,R0
   \   000006EC   0x464B             MOV      R3,R9
   \   000006EE   0x.... 0x....      LDR.W    R1,??DataTable1_36
   \   000006F2   0xA824             ADD      R0,SP,#+144
   \   000006F4   0x.... 0x....      BL       sprintf
    448                      //PutStringUartQueue(GPS_UART, str_buff);
    449                      sprintf(str_buff, "%d\t%d\t%d\t%d\t", (int)(100 * GetAttitude()->w), (int)(100 * GetAttitude()->x), (int)(100 * GetAttitude()->y), (int)(100 * GetAttitude()->z));
   \   000006F8   0x.... 0x....      BL       GetAttitude
   \   000006FC   0x4681             MOV      R9,R0
   \   000006FE   0x.... 0x....      BL       GetAttitude
   \   00000702   0x4682             MOV      R10,R0
   \   00000704   0x.... 0x....      BL       GetAttitude
   \   00000708   0x4683             MOV      R11,R0
   \   0000070A   0x.... 0x....      BL       GetAttitude
   \   0000070E   0x4680             MOV      R8,R0
   \   00000710   0xF8D9 0x000C      LDR      R0,[R9, #+12]
   \   00000714   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   00000718   0x.... 0x....      BL       __aeabi_fmul
   \   0000071C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000720   0x9001             STR      R0,[SP, #+4]
   \   00000722   0xF8DA 0x0008      LDR      R0,[R10, #+8]
   \   00000726   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   0000072A   0x.... 0x....      BL       __aeabi_fmul
   \   0000072E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000732   0x9000             STR      R0,[SP, #+0]
   \   00000734   0xF8DB 0x0004      LDR      R0,[R11, #+4]
   \   00000738   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   0000073C   0x.... 0x....      BL       __aeabi_fmul
   \   00000740   0x.... 0x....      BL       __aeabi_f2iz
   \   00000744   0x0003             MOVS     R3,R0
   \   00000746   0x4699             MOV      R9,R3
   \   00000748   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000074C   0x.... 0x....      LDR.W    R1,??DataTable1_35  ;; 0x42c80000
   \   00000750   0x.... 0x....      BL       __aeabi_fmul
   \   00000754   0x.... 0x....      BL       __aeabi_f2iz
   \   00000758   0x0002             MOVS     R2,R0
   \   0000075A   0x464B             MOV      R3,R9
   \   0000075C   0x.... 0x....      LDR.W    R1,??DataTable1_36
   \   00000760   0xA824             ADD      R0,SP,#+144
   \   00000762   0x.... 0x....      BL       sprintf
    450                      //PutStringUartQueue(GPS_UART, str_buff);
    451                      sprintf(str_buff, "\n\r");
   \   00000766   0x....             ADR.N    R1,??DataTable1  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000768   0xA824             ADD      R0,SP,#+144
   \   0000076A   0x.... 0x....      BL       sprintf
    452                      //PutStringUartQueue(GPS_UART, str_buff);
    453                  }
    454          
    455          #ifdef MINIAHRS_CLIENT_USE
    456                  if(!miniAHRS_IsUartQueueEmpty())
   \                     ??Test_51:
   \   0000076E   0x.... 0x....      BL       miniAHRS_IsUartQueueEmpty
   \   00000772   0x2800             CMP      R0,#+0
   \   00000774   0xD10E             BNE.N    ??Test_52
    457                  {
    458                      for(i = 0; i < 5; i ++)
   \   00000776   0x2000             MOVS     R0,#+0
   \   00000778   0x0005             MOVS     R5,R0
   \                     ??Test_53:
   \   0000077A   0x2D05             CMP      R5,#+5
   \   0000077C   0xDA7A             BGE.N    ??Test_54
    459                      {
    460                          if(!miniAHRS_IsUartQueueEmpty())
   \   0000077E   0x.... 0x....      BL       miniAHRS_IsUartQueueEmpty
   \   00000782   0x2800             CMP      R0,#+0
   \   00000784   0xD104             BNE.N    ??Test_55
    461                          {
    462                              miniAHRS_SendOneByte(miniAHRS_PopUartQueue());            
   \   00000786   0x.... 0x....      BL       miniAHRS_PopUartQueue
   \   0000078A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000078C   0x.... 0x....      BL       miniAHRS_SendOneByte
    463                          }
    464                      }
   \                     ??Test_55:
   \   00000790   0x1C6D             ADDS     R5,R5,#+1
   \   00000792   0xE7F2             B.N      ??Test_53
    465                  }
    466                  else
    467                  {
    468                     miniAHRS_ReportIMU_Queue((int)(GetEulerAttitude()->yaw * 10), (int)(GetEulerAttitude()->pitch * 10), (int)(GetEulerAttitude()->roll * 10), (int)(g_f32FiltedAltitude * 10), (int)(g_sMS5611DataCopy.Temp * 10), (int)(g_sMS5611DataCopy.Press * 10), 200); 
   \                     ??Test_52:
   \   00000794   0x.... 0x....      BL       GetEulerAttitude
   \   00000798   0x4680             MOV      R8,R0
   \   0000079A   0x.... 0x....      BL       GetEulerAttitude
   \   0000079E   0x4681             MOV      R9,R0
   \   000007A0   0x.... 0x....      BL       GetEulerAttitude
   \   000007A4   0x4682             MOV      R10,R0
   \   000007A6   0x20C8             MOVS     R0,#+200
   \   000007A8   0x9002             STR      R0,[SP, #+8]
   \   000007AA   0x....             LDR.N    R0,??DataTable1_4
   \   000007AC   0x6C00             LDR      R0,[R0, #+64]
   \   000007AE   0x....             LDR.N    R1,??DataTable1_2  ;; 0x41200000
   \   000007B0   0x.... 0x....      BL       __aeabi_fmul
   \   000007B4   0x.... 0x....      BL       __aeabi_f2iz
   \   000007B8   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000007BA   0x9001             STR      R0,[SP, #+4]
   \   000007BC   0x....             LDR.N    R0,??DataTable1_4
   \   000007BE   0x6BC0             LDR      R0,[R0, #+60]
   \   000007C0   0x....             LDR.N    R1,??DataTable1_2  ;; 0x41200000
   \   000007C2   0x.... 0x....      BL       __aeabi_fmul
   \   000007C6   0x.... 0x....      BL       __aeabi_f2iz
   \   000007CA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000007CC   0x9000             STR      R0,[SP, #+0]
   \   000007CE   0x....             LDR.N    R0,??DataTable1_37
   \   000007D0   0x6800             LDR      R0,[R0, #+0]
   \   000007D2   0x....             LDR.N    R1,??DataTable1_2  ;; 0x41200000
   \   000007D4   0x.... 0x....      BL       __aeabi_fmul
   \   000007D8   0x.... 0x....      BL       __aeabi_f2iz
   \   000007DC   0x0003             MOVS     R3,R0
   \   000007DE   0xB21B             SXTH     R3,R3            ;; SignExt  R3,R3,#+16,#+16
   \   000007E0   0x469B             MOV      R11,R3
   \   000007E2   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   000007E6   0x....             LDR.N    R1,??DataTable1_2  ;; 0x41200000
   \   000007E8   0x.... 0x....      BL       __aeabi_fmul
   \   000007EC   0x.... 0x....      BL       __aeabi_f2iz
   \   000007F0   0x0002             MOVS     R2,R0
   \   000007F2   0x465B             MOV      R3,R11
   \   000007F4   0xB212             SXTH     R2,R2            ;; SignExt  R2,R2,#+16,#+16
   \   000007F6   0x4690             MOV      R8,R2
   \   000007F8   0x469B             MOV      R11,R3
   \   000007FA   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   000007FE   0x....             LDR.N    R1,??DataTable1_2  ;; 0x41200000
   \   00000800   0x.... 0x....      BL       __aeabi_fmul
   \   00000804   0x.... 0x....      BL       __aeabi_f2iz
   \   00000808   0x0001             MOVS     R1,R0
   \   0000080A   0x465B             MOV      R3,R11
   \   0000080C   0x4642             MOV      R2,R8
   \   0000080E   0xB209             SXTH     R1,R1            ;; SignExt  R1,R1,#+16,#+16
   \   00000810   0x4688             MOV      R8,R1
   \   00000812   0x4691             MOV      R9,R2
   \   00000814   0x469B             MOV      R11,R3
   \   00000816   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000081A   0x....             LDR.N    R1,??DataTable1_2  ;; 0x41200000
   \   0000081C   0x.... 0x....      BL       __aeabi_fmul
   \   00000820   0x.... 0x....      BL       __aeabi_f2iz
   \   00000824   0x465B             MOV      R3,R11
   \   00000826   0x464A             MOV      R2,R9
   \   00000828   0x4641             MOV      R1,R8
   \   0000082A   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000082C   0x.... 0x....      BL       miniAHRS_ReportIMU_Queue
    469                     miniAHRS_ReportMotion_Queue(g_sMPU6050RawData.acc[0], g_sMPU6050RawData.acc[1], g_sMPU6050RawData.acc[2], g_sMPU6050RawData.gyr[0], g_sMPU6050RawData.gyr[1], g_sMPU6050RawData.gyr[2], g_sAK8975CRawData.mag[0], g_sAK8975CRawData.mag[1], g_sAK8975CRawData.mag[2]);
   \   00000830   0x....             LDR.N    R0,??DataTable1_6
   \   00000832   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   00000836   0x9004             STR      R0,[SP, #+16]
   \   00000838   0x....             LDR.N    R0,??DataTable1_6
   \   0000083A   0xF9B0 0x0002      LDRSH    R0,[R0, #+2]
   \   0000083E   0x9003             STR      R0,[SP, #+12]
   \   00000840   0x....             LDR.N    R0,??DataTable1_6
   \   00000842   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000846   0x9002             STR      R0,[SP, #+8]
   \   00000848   0x....             LDR.N    R0,??DataTable1_7
   \   0000084A   0xF9B0 0x000C      LDRSH    R0,[R0, #+12]
   \   0000084E   0x9001             STR      R0,[SP, #+4]
   \   00000850   0x....             LDR.N    R0,??DataTable1_7
   \   00000852   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   00000856   0x9000             STR      R0,[SP, #+0]
   \   00000858   0x....             LDR.N    R0,??DataTable1_7
   \   0000085A   0xF9B0 0x3008      LDRSH    R3,[R0, #+8]
   \   0000085E   0x....             LDR.N    R0,??DataTable1_7
   \   00000860   0xF9B0 0x2004      LDRSH    R2,[R0, #+4]
   \   00000864   0x....             LDR.N    R0,??DataTable1_7
   \   00000866   0xF9B0 0x1002      LDRSH    R1,[R0, #+2]
   \   0000086A   0x....             LDR.N    R0,??DataTable1_7
   \   0000086C   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000870   0x.... 0x....      BL       miniAHRS_ReportMotion_Queue
    470                     //miniAHRS_ReportMotion_Queue((int)(100 * FlowFilterGetCurrent()[0]), (int)(100 * FlowFilterGetCurrent()[1]), 0, (int)(100 * FlowFilterGetCurrent()[2]), (int)(100 * FlowFilterGetCurrent()[3]), 0, g_sAK8975CRawData.mag[0], g_sAK8975CRawData.mag[1], g_sAK8975CRawData.mag[2]);
    471                  }
    472          #endif        
    473          
    474                  /* 发送串口队列的一定数量的数据 */
    475                  SendSeveralUartQueueData(GPS_UART, 5);
   \                     ??Test_54:
   \   00000874   0x2105             MOVS     R1,#+5
   \   00000876   0x....             LDR.N    R0,??DataTable1_13  ;; 0x400eb000
   \   00000878   0x.... 0x....      BL       SendSeveralUartQueueData
    476                  SendSeveralUartQueueData(DEBUG_UART, 10);
   \   0000087C   0x210A             MOVS     R1,#+10
   \   0000087E   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   00000880   0x.... 0x....      BL       SendSeveralUartQueueData
    477                  SendSeveralUartQueueData(COMMUNICATE_UART, 5);   
   \   00000884   0x2105             MOVS     R1,#+5
   \   00000886   0x....             LDR.N    R0,??DataTable1_14  ;; 0x4006c000
   \   00000888   0x.... 0x....      BL       SendSeveralUartQueueData
    478                  
    479                  if(IsUartQueueEmpty(DEBUG_UART))
   \   0000088C   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   0000088E   0x.... 0x....      BL       IsUartQueueEmpty
   \   00000892   0x2800             CMP      R0,#+0
   \   00000894   0xF43F 0xAD6D      BEQ.W    ??Test_33
    480                  {
    481                      float ypr[3] = {0,0,0};
   \   00000898   0xA802             ADD      R0,SP,#+8
   \   0000089A   0x2100             MOVS     R1,#+0
   \   0000089C   0x2200             MOVS     R2,#+0
   \   0000089E   0x2300             MOVS     R3,#+0
   \   000008A0   0xC00E             STM      R0!,{R1-R3}
   \   000008A2   0x380C             SUBS     R0,R0,#+12
    482                      quaternion_converQuaternionToYawPitchRoll(GetControlParameter()->lock_attitude_struct.targetAttitude, ypr);
   \   000008A4   0x.... 0x....      BL       GetControlParameter
   \   000008A8   0xA902             ADD      R1,SP,#+8
   \   000008AA   0x9100             STR      R1,[SP, #+0]
   \   000008AC   0xC80F             LDM      R0,{R0-R3}
   \   000008AE   0x.... 0x....      BL       quaternion_converQuaternionToYawPitchRoll
    483                      sprintf(str_buff, "%d\t%d\t%d\t", (int)(100 * ypr[0]), (int)(ypr[1] * 100), (int)(ypr[2] * 100));
   \   000008B2   0x9804             LDR      R0,[SP, #+16]
   \   000008B4   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   000008B6   0x.... 0x....      BL       __aeabi_fmul
   \   000008BA   0x.... 0x....      BL       __aeabi_f2iz
   \   000008BE   0x9000             STR      R0,[SP, #+0]
   \   000008C0   0x9803             LDR      R0,[SP, #+12]
   \   000008C2   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   000008C4   0x.... 0x....      BL       __aeabi_fmul
   \   000008C8   0x.... 0x....      BL       __aeabi_f2iz
   \   000008CC   0x0003             MOVS     R3,R0
   \   000008CE   0x4698             MOV      R8,R3
   \   000008D0   0x9802             LDR      R0,[SP, #+8]
   \   000008D2   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   000008D4   0x.... 0x....      BL       __aeabi_fmul
   \   000008D8   0x.... 0x....      BL       __aeabi_f2iz
   \   000008DC   0x0002             MOVS     R2,R0
   \   000008DE   0x4643             MOV      R3,R8
   \   000008E0   0x....             LDR.N    R1,??DataTable1_38
   \   000008E2   0xA824             ADD      R0,SP,#+144
   \   000008E4   0x.... 0x....      BL       sprintf
    484                      PutStringUartQueue(DEBUG_UART, str_buff);
   \   000008E8   0xA924             ADD      R1,SP,#+144
   \   000008EA   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   000008EC   0x.... 0x....      BL       PutStringUartQueue
    485                      sprintf(str_buff, "%d\t%d\t", (int)((GetControlData()->lock_position_err[0]) * 1000), (int)((GetControlData()->lock_position_err[1]) * 1000));
   \   000008F0   0x.... 0x....      BL       GetControlData
   \   000008F4   0x4680             MOV      R8,R0
   \   000008F6   0x.... 0x....      BL       GetControlData
   \   000008FA   0x4681             MOV      R9,R0
   \   000008FC   0xF8D8 0x002C      LDR      R0,[R8, #+44]
   \   00000900   0x....             LDR.N    R1,??DataTable1_17  ;; 0x447a0000
   \   00000902   0x.... 0x....      BL       __aeabi_fmul
   \   00000906   0x.... 0x....      BL       __aeabi_f2iz
   \   0000090A   0x0003             MOVS     R3,R0
   \   0000090C   0x4698             MOV      R8,R3
   \   0000090E   0xF8D9 0x0028      LDR      R0,[R9, #+40]
   \   00000912   0x....             LDR.N    R1,??DataTable1_17  ;; 0x447a0000
   \   00000914   0x.... 0x....      BL       __aeabi_fmul
   \   00000918   0x.... 0x....      BL       __aeabi_f2iz
   \   0000091C   0x0002             MOVS     R2,R0
   \   0000091E   0x4643             MOV      R3,R8
   \   00000920   0x....             LDR.N    R1,??DataTable1_39
   \   00000922   0xA824             ADD      R0,SP,#+144
   \   00000924   0x.... 0x....      BL       sprintf
    486                      PutStringUartQueue(DEBUG_UART, str_buff);        
   \   00000928   0xA924             ADD      R1,SP,#+144
   \   0000092A   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   0000092C   0x.... 0x....      BL       PutStringUartQueue
    487                      sprintf(str_buff, "%d\t%d\t", (int)(100 * (GetControlData()->lock_position_pid_output[0])), (int)(100 * (GetControlData()->lock_position_pid_output[1])));
   \   00000930   0x.... 0x....      BL       GetControlData
   \   00000934   0x4680             MOV      R8,R0
   \   00000936   0x.... 0x....      BL       GetControlData
   \   0000093A   0x4681             MOV      R9,R0
   \   0000093C   0xF8D8 0x0024      LDR      R0,[R8, #+36]
   \   00000940   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   00000942   0x.... 0x....      BL       __aeabi_fmul
   \   00000946   0x.... 0x....      BL       __aeabi_f2iz
   \   0000094A   0x0003             MOVS     R3,R0
   \   0000094C   0x4698             MOV      R8,R3
   \   0000094E   0xF8D9 0x0020      LDR      R0,[R9, #+32]
   \   00000952   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   00000954   0x.... 0x....      BL       __aeabi_fmul
   \   00000958   0x.... 0x....      BL       __aeabi_f2iz
   \   0000095C   0x0002             MOVS     R2,R0
   \   0000095E   0x4643             MOV      R3,R8
   \   00000960   0x....             LDR.N    R1,??DataTable1_39
   \   00000962   0xA824             ADD      R0,SP,#+144
   \   00000964   0x.... 0x....      BL       sprintf
    488                      PutStringUartQueue(DEBUG_UART, str_buff);              
   \   00000968   0xA924             ADD      R1,SP,#+144
   \   0000096A   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   0000096C   0x.... 0x....      BL       PutStringUartQueue
    489          //            sprintf(str_buff, "%d\t%d\t%d\t%d\t%d\t%d\t", GetPWMData()->ESC_PWM[0], GetPWMData()->ESC_PWM[1], GetPWMData()->ESC_PWM[2], GetPWMData()->ESC_PWM[3], GetPWMData()->ESC_PWM[4], GetPWMData()->ESC_PWM[5]);
    490          //            PutStringUartQueue(DEBUG_UART, str_buff);
    491          //            sprintf(str_buff, "%d\t%d\t%d\t%d\t%d\t%d\t", g_WFLY_RC_pluse_width_us[0], g_WFLY_RC_pluse_width_us[1], g_WFLY_RC_pluse_width_us[2], g_WFLY_RC_pluse_width_us[3], g_WFLY_RC_pluse_width_us[4], g_WFLY_RC_pluse_width_us[5]);
    492          //            PutStringUartQueue(DEBUG_UART, str_buff);            
    493          //            sprintf(str_buff, "%d\t%d\t%d\t", (int)(100 * GetControlData()->pid_output[0]), (int)(100 * GetControlData()->pid_output[1]), (int)(100 * GetControlData()->pid_output[2]));
    494          //            PutStringUartQueue(DEBUG_UART, str_buff);            
    495          //            sprintf(str_buff, "%d\t%d\t%d\t", (int)(GetEulerAttitude()->roll * 100), (int)(GetEulerAttitude()->pitch * 100), (int)(GetEulerAttitude()->yaw * 100));
    496                      //PutStringUartQueue(DEBUG_UART, str_buff);               
    497          //            sprintf(str_buff, "%d\t%d\t%d\t%d\t", (int)(100 * GetAttitude()->w), (int)(100 * GetAttitude()->x), (int)(100 * GetAttitude()->y), (int)(100 * GetAttitude()->z));
    498          //            PutStringUartQueue(DEBUG_UART, str_buff);                  
    499          //            sprintf(str_buff, "%d\t%d\t%d\t", g_sMPU6050RawData.acc[0], g_sMPU6050RawData.acc[1], g_sMPU6050RawData.acc[2]);
    500          //            PutStringUartQueue(DEBUG_UART, str_buff); 
    501          //            sprintf(str_buff, "%d\t%d\t%d\t%d\t", (int)(100 * WFLY_RC_GetThrottleRatio()), (int)(100 * WFLY_RC_GetYawRatio()), (int)(100 * WFLY_RC_GetPitchRatio()), (int)(100 * WFLY_RC_GetRollRatio()));
    502          //            PutStringUartQueue(DEBUG_UART, str_buff); 
    503          //            sprintf(str_buff, "%d\t%d\t%d\t%d\t%d\t", (int)(100 * g_sPx4flowData.pixel_flow_x), (int)(100 * g_sPx4flowData.pixel_flow_y), (int)(100 * g_sPx4flowData.flow_comp_m_x), (int)(100 * g_sPx4flowData.flow_comp_m_y), (int)(100 * g_sPx4flowData.ground_distance));
    504          //            PutStringUartQueue(DEBUG_UART, str_buff); 
    505          //            sprintf(str_buff, "%d\t%d\t%d\t%d\t", (int)(100 * FlowFilterGetCurrent()[2] / g_sPx4flowData.ground_distance), (int)(100 * FlowFilterGetCurrent()[3] / g_sPx4flowData.ground_distance), (int)(100 * FlowFilterGetCurrent()[2]), (int)(100 * FlowFilterGetCurrent()[3]));
    506          //            PutStringUartQueue(DEBUG_UART, str_buff);          
    507          //            sprintf(str_buff, "%d\t%d\t", (long)(100 * g_f32XPosition), (long)(100 * g_f32YPosition));
    508          //            PutStringUartQueue(DEBUG_UART, str_buff);                 
    509                      //sprintf(str_buff, "\n\r");
    510                      //PutStringUartQueue(DEBUG_UART, str_buff);          
    511                      //sprintf(str_buff, "%d\t%d\t%d\t", (int)(yaw), (int)(pitch), (int)(roll) );
    512                      //PutStringUartQueue(DEBUG_UART, str_buff);
    513                      sprintf(str_buff, "%d\t%d\t%d\t%d\t", ADNS3080_GetRawData()->delta_x, ADNS3080_GetRawData()->delta_y, g_i32ADNS3080PixelSum[0], g_i32ADNS3080PixelSum[1]);
   \   00000970   0x.... 0x....      BL       ADNS3080_GetRawData
   \   00000974   0x4680             MOV      R8,R0
   \   00000976   0x.... 0x....      BL       ADNS3080_GetRawData
   \   0000097A   0x....             LDR.N    R1,??DataTable1_40
   \   0000097C   0x6849             LDR      R1,[R1, #+4]
   \   0000097E   0x9101             STR      R1,[SP, #+4]
   \   00000980   0x....             LDR.N    R1,??DataTable1_40
   \   00000982   0x6809             LDR      R1,[R1, #+0]
   \   00000984   0x9100             STR      R1,[SP, #+0]
   \   00000986   0xF998 0x3002      LDRSB    R3,[R8, #+2]
   \   0000098A   0xF990 0x2001      LDRSB    R2,[R0, #+1]
   \   0000098E   0x....             LDR.N    R1,??DataTable1_36
   \   00000990   0xA824             ADD      R0,SP,#+144
   \   00000992   0x.... 0x....      BL       sprintf
    514                      PutStringUartQueue(DEBUG_UART, str_buff);
   \   00000996   0xA924             ADD      R1,SP,#+144
   \   00000998   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   0000099A   0x.... 0x....      BL       PutStringUartQueue
    515                      sprintf(str_buff, "%d\t%d\t", (int)(g_f32ADNS3080PixelPosition[0] * 100), (int)(g_f32ADNS3080PixelPosition[1] * 100));
   \   0000099E   0x....             LDR.N    R0,??DataTable1_34
   \   000009A0   0x6840             LDR      R0,[R0, #+4]
   \   000009A2   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   000009A4   0x.... 0x....      BL       __aeabi_fmul
   \   000009A8   0x.... 0x....      BL       __aeabi_f2iz
   \   000009AC   0x0003             MOVS     R3,R0
   \   000009AE   0x4698             MOV      R8,R3
   \   000009B0   0x....             LDR.N    R0,??DataTable1_34
   \   000009B2   0x6800             LDR      R0,[R0, #+0]
   \   000009B4   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   000009B6   0x.... 0x....      BL       __aeabi_fmul
   \   000009BA   0x.... 0x....      BL       __aeabi_f2iz
   \   000009BE   0x0002             MOVS     R2,R0
   \   000009C0   0x4643             MOV      R3,R8
   \   000009C2   0x....             LDR.N    R1,??DataTable1_39
   \   000009C4   0xA824             ADD      R0,SP,#+144
   \   000009C6   0x.... 0x....      BL       sprintf
    516                      PutStringUartQueue(DEBUG_UART, str_buff);
   \   000009CA   0xA924             ADD      R1,SP,#+144
   \   000009CC   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   000009CE   0x.... 0x....      BL       PutStringUartQueue
    517          //            sprintf(str_buff, "%d\t", (int)(WFLY_RC_GetThrottleRatio() * 100));
    518          //            PutStringUartQueue(DEBUG_UART, str_buff);             
    519          //            sprintf(str_buff, "%d\t", (int)(g_f32FiltedAltitude * 1000));
    520          //            PutStringUartQueue(DEBUG_UART, str_buff);
    521                      sprintf(str_buff, "%d\t", max_program_period_time);
   \   000009D2   0x0022             MOVS     R2,R4
   \   000009D4   0x....             ADR.N    R1,??DataTable1_5  ;; "%d\t"
   \   000009D6   0xA824             ADD      R0,SP,#+144
   \   000009D8   0x.... 0x....      BL       sprintf
    522                      PutStringUartQueue(DEBUG_UART, str_buff);
   \   000009DC   0xA924             ADD      R1,SP,#+144
   \   000009DE   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   000009E0   0x.... 0x....      BL       PutStringUartQueue
    523                      sprintf(str_buff, "%d\t", g_timer_cnt);
   \   000009E4   0x....             LDR.N    R0,??DataTable1_41
   \   000009E6   0x6802             LDR      R2,[R0, #+0]
   \   000009E8   0x....             ADR.N    R1,??DataTable1_5  ;; "%d\t"
   \   000009EA   0xA824             ADD      R0,SP,#+144
   \   000009EC   0x.... 0x....      BL       sprintf
    524                      PutStringUartQueue(DEBUG_UART, str_buff);          
   \   000009F0   0xA924             ADD      R1,SP,#+144
   \   000009F2   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   000009F4   0x.... 0x....      BL       PutStringUartQueue
    525                      sprintf(str_buff, "%d\t", g_sonar_measure_distance_mm);
   \   000009F8   0x....             LDR.N    R0,??DataTable1_16
   \   000009FA   0x8802             LDRH     R2,[R0, #+0]
   \   000009FC   0x....             ADR.N    R1,??DataTable1_5  ;; "%d\t"
   \   000009FE   0xA824             ADD      R0,SP,#+144
   \   00000A00   0x.... 0x....      BL       sprintf
    526                      PutStringUartQueue(DEBUG_UART, str_buff);     
   \   00000A04   0xA924             ADD      R1,SP,#+144
   \   00000A06   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   00000A08   0x.... 0x....      BL       PutStringUartQueue
    527          //            sprintf(str_buff, "%d\t", (int)(GetControlParameter()->lock_attitude_struct.targetHeight*1000));
    528          //            PutStringUartQueue(DEBUG_UART, str_buff);              
    529          //            sprintf(str_buff, "%d\t", (int)(100 * GetHighByAltitude()));
    530          //            PutStringUartQueue(DEBUG_UART, str_buff);               
    531                      sprintf(str_buff, "%d\t", (int)(100 * GetControlData()->lock_height_pid_output));
   \   00000A0C   0x.... 0x....      BL       GetControlData
   \   00000A10   0x68C0             LDR      R0,[R0, #+12]
   \   00000A12   0x....             LDR.N    R1,??DataTable1_35  ;; 0x42c80000
   \   00000A14   0x.... 0x....      BL       __aeabi_fmul
   \   00000A18   0x.... 0x....      BL       __aeabi_f2iz
   \   00000A1C   0x0002             MOVS     R2,R0
   \   00000A1E   0x....             ADR.N    R1,??DataTable1_5  ;; "%d\t"
   \   00000A20   0xA824             ADD      R0,SP,#+144
   \   00000A22   0x.... 0x....      BL       sprintf
    532                      PutStringUartQueue(DEBUG_UART, str_buff); 
   \   00000A26   0xA924             ADD      R1,SP,#+144
   \   00000A28   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   00000A2A   0x.... 0x....      BL       PutStringUartQueue
    533          //            sprintf(str_buff, "%d\t", g_ulFlowTime);
    534          //            PutStringUartQueue(DEBUG_UART, str_buff);                     
    535                      sprintf(str_buff, "\n\r");
   \   00000A2E   0x....             ADR.N    R1,??DataTable1  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000A30   0xA824             ADD      R0,SP,#+144
   \   00000A32   0x.... 0x....      BL       sprintf
    536                      PutStringUartQueue(DEBUG_UART, str_buff);
   \   00000A36   0xA924             ADD      R1,SP,#+144
   \   00000A38   0x....             LDR.N    R0,??DataTable1_15  ;; 0x400ea000
   \   00000A3A   0x.... 0x....      BL       PutStringUartQueue
    537                      max_program_period_time = 0;
   \   00000A3E   0x2000             MOVS     R0,#+0
   \   00000A40   0x0004             MOVS     R4,R0
   \   00000A42   0xE496             B.N      ??Test_33
    538                  }      
    539              } 
    540              
    541              //DestoryMyQueue(UART5_queue);
    542          
    543              //int8 recv;
    544              //uint32 counts = 0;
    545              //uint32 time_tag[2] = {0,0};
    546              //int i = 0;
    547              //uint8 temp = 0x01;
    548              //uint8 data[4] = {1,2,3,4};
    549              //uint8 buf[4] = {0,0,0,0};
    550              //int16 raw_data[7];
    551          
    552              //MPU6050_DMP_MultiWriteReg(0x68, 0x63, 4,data);
    553          
    554              /*GetAccGyrOffsetOpe();
    555          
    556              MPU6050_InitRawData();
    557              AK8975C_InitRawData();
    558              AttitudeInit();
    559          
    560              float yaw, pitch, roll;
    561          
    562              while(1)
    563              {
    564                  while(g_u32ProgramPeriodTimerCnt < PROGRAM_PERIOD_MS)
    565                  {
    566          
    567                  }
    568                  g_u32ProgramPeriodTimerCnt = 0;
    569          
    570                  TriggerBatteryADC();
    571                  MPU6050_RefreshRawData(); 
    572                  AK8975C_RefreshRawData();
    573                  MS5611_RefreshData();
    574                  RefreshAttitude();
    575                  
    576                  yaw = GetEulerAttitude()->yaw * 10; 
    577                  pitch = GetEulerAttitude()->pitch * 10; 
    578                  roll = GetEulerAttitude()->roll * 10;
    579          
    580                  miniAHRS_ReportIMU((int)yaw, (int)pitch, (int)roll, (int)g_sMS5611Data.High, (int)(g_sMS5611Data.Temp * 10), (int)(g_sMS5611Data.Press * 10), 200);
    581                  miniAHRS_ReportMotion(g_sMPU6050RawData.acc[0], g_sMPU6050RawData.acc[1], g_sMPU6050RawData.acc[2], g_sMPU6050RawData.gyr[0], g_sMPU6050RawData.gyr[1], g_sMPU6050RawData.gyr[2], g_sAK8975CRawData.mag[0], g_sAK8975CRawData.mag[1], g_sAK8975CRawData.mag[2]);
    582                  
    583          //        printf("%d\t%d\t%d\t", (int)(yaw), (int)(pitch), (int)(roll) );
    584          //        printf("%d\t%d\t%d\t", g_sAK8975CRawData.mag[0], g_sAK8975CRawData.mag[1], g_sAK8975CRawData.mag[2]);        
    585          //        printf("%d\t%d\t%d\t", (int)g_sMS5611Data.Temp, (int)g_sMS5611Data.Press, (int)g_sMS5611Data.High);
    586          //        printf("%d\t", g_u32ProgramPeriodTimerCnt);
    587          //        printf("\n\r");
    588              }*/
    589          
    590          /*    AK8975C_StartMeasure();
    591              while(1)
    592              {
    593                  printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_XOUT_H)-g_u32AccOffset[0]);
    594                  printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_YOUT_H)-g_u32AccOffset[1]);
    595                  printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_ZOUT_H));
    596                  printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_ZOUT_H)-g_u32AccOffset[2]);
    597                  printf("%d\t", MPU6050_GetData(MPU6050_GYRO_XOUT_H)-g_u32GyrOffset[0]);
    598                  printf("%d\t", MPU6050_GetData(MPU6050_GYRO_YOUT_H)-g_u32GyrOffset[1]);
    599                  printf("%d\t", MPU6050_GetData(MPU6050_GYRO_ZOUT_H)-g_u32GyrOffset[2]);
    600                  printf("%d\t", g_timer_cnt);        
    601                  if(i >= 10)
    602                  {
    603                      printf("%d\t", AK8975C_GetData(AK8975C_HXL));
    604                      printf("%d\t", AK8975C_GetData(AK8975C_HYL));
    605                      printf("%d\t", AK8975C_GetData(AK8975C_HZL));          
    606                      AK8975C_StartMeasure();
    607                      i = 0;
    608                  }        
    609                  printf("\n\r");
    610                  if(i < 10)
    611                  {
    612                      DelayWithTimer(1);
    613                  }
    614                  i++;
    615              }
    616              */
    617            
    618              /* while(1)
    619              {
    620                  if(counts > 50)
    621                  {
    622                      ToggleLights(ReadSwitches(0xff));
    623                      //ToggleBuzzer();
    624                      counts = 0;
    625                      i++;
    626                      //SetBuzzerMode(i);
    627                      if(i > 4)
    628                      {
    629                        i = 0;
    630                      }
    631                      
    632                  }
    633                  time_tag[0] = g_timer_cnt;
    634                  TriggerBatteryADC();
    635                  MS5611_Read(&MS5611_data_struct, MS5611_D1_OSR_4096);
    636                  time_tag[1] = g_timer_cnt;
    637                  MPU6050_GetRawData(raw_data);
    638                  printf("%d\t", raw_data[0]);
    639                  printf("%d\t", raw_data[1]);
    640                  printf("%d\t", raw_data[2]);
    641                  printf("%d\t", raw_data[3]);
    642                  printf("%d\t", raw_data[4]);
    643                  printf("%d\t", raw_data[5]);
    644                  printf("%d\t", raw_data[6]);
    645          //        printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_XOUT_H)-g_u32AccOffset[0]);
    646          //        printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_YOUT_H)-g_u32AccOffset[1]);
    647          //        printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_ZOUT_H));
    648          //        printf("%d\t", MPU6050_GetData(MPU6050_ACCEL_ZOUT_H)-g_u32AccOffset[2]);
    649          //        printf("%d\t", MPU6050_GetData(MPU6050_GYRO_XOUT_H)-g_u32GyrOffset[0]);
    650          //        printf("%d\t", MPU6050_GetData(MPU6050_GYRO_YOUT_H)-g_u32GyrOffset[1]);
    651          //        printf("%d\t", MPU6050_GetData(MPU6050_GYRO_ZOUT_H)-g_u32GyrOffset[2]);
    652                  AK8975C_StartMeasure();
    653                  AK8975C_WaitMeasureComplete(); 
    654                  DelayWithTimer(0);
    655                  printf("%d\t", AK8975C_GetData(AK8975C_HXL));
    656                  printf("%d\t", AK8975C_GetData(AK8975C_HYL));
    657                  printf("%d\t", AK8975C_GetData(AK8975C_HZL));          
    658                  MPU6050_DMP_MultiReadReg(0x68, 0x63, 4,buf);
    659                  //printf("%d\t", buf[0]);
    660                  //printf("%d\t", buf[1]);
    661                  //printf("%d\t", buf[2]);
    662                  //printf("%d\t", buf[3]);
    663                  printf("%d\t", g_u32AccOffset[0]);
    664                  printf("%d\t", g_u32AccOffset[1]);
    665                  printf("%d\t", g_u32AccOffset[2]);            
    666                  printf("%d\t", g_u32GyrOffset[0]);
    667                  printf("%d\t", g_u32GyrOffset[1]);
    668                  printf("%d\t", g_u32GyrOffset[2]);        
    669                  printf("%d\t", (int)MS5611_data_struct.rPress);
    670                  //printf("%d\t", MPU6050_SingleReadReg(0x63));
    671                  //printf("%d\t", MPU6050_SingleReadReg(0x64));
    672                  //printf("%d\t", MPU6050_SingleReadReg(0x65));
    673                  //printf("%d\t", MPU6050_SingleReadReg(0x66));        
    674                  //printf("%d\t", g_sonar_measure_distance_cm);
    675                  printf("%d\t", g_battery_voltage);
    676                  printf("%d\t%d\t", time_tag[0], time_tag[1]);
    677                  printf("\n\r");
    678                  //printf("Hello Wrold!!!\n\r");
    679                  temp = 0x01;
    680          //        for(i = 0; i < 8; i++)
    681          //        {
    682          //            recv = (!!ReadSwitches(temp)) + '0';
    683          //            LPLD_UART_PutChar(DEBUG_UART, recv);
    684          //            temp = temp << 1;
    685          //        }
    686          //        LPLD_UART_PutChar(DEBUG_UART, '\n');
    687          //        LPLD_UART_PutChar(DEBUG_UART, '\r');
    688          //        //recv = LPLD_UART_GetChar(DEBUG_UART);
    689          //        //LPLD_UART_PutChar(DEBUG_UART, recv);
    690          //        PWMOutOneRotor(1, 7);
    691          //        PWMOutOneRotor(2, 30);
    692          //        PWMOutOneRotor(3, 7);
    693          //        PWMOutOneRotor(4, 7);
    694                  counts ++;
    695              }     */
    696          }

   \                                 In section .bss, align 4
   \                     ??s_f32LastYawAngle:
   \   00000000                      DS8 4
    697          

   \                                 In section .text, align 2, keep-with-next
    698          void InitHW(void)
    699          {
   \                     InitHW:
   \   00000000   0xB580             PUSH     {R7,LR}
    700              DisableInterrupts;
   \   00000002   0xB672             CPSID    I
    701          
    702              InitDebugUart();
   \   00000004   0x.... 0x....      BL       InitDebugUart
    703              InitCommunicateUart();
   \   00000008   0x.... 0x....      BL       InitCommunicateUart
    704              InitGPSUart();
   \   0000000C   0x.... 0x....      BL       InitGPSUart
    705              InitADNS3080_SPI();                          // SPI的初始化必须在灯的端口初始化之前，不然会出现未知问题… 
   \   00000010   0x.... 0x....      BL       InitADNS3080_SPI
    706              InitLight();
   \   00000014   0x.... 0x....      BL       InitLight
    707              InitBuzzer();
   \   00000018   0x.... 0x....      BL       InitBuzzer
    708              InitSixRotorPWM();
   \   0000001C   0x.... 0x....      BL       InitSixRotorPWM
    709              InitSwitches();
   \   00000020   0x.... 0x....      BL       InitSwitches
    710              InitMPU9150();
   \   00000024   0x.... 0x....      BL       InitMPU9150
    711              InitHCSR04();
   \   00000028   0x.... 0x....      BL       InitHCSR04
    712              InitTimer();
   \   0000002C   0x.... 0x....      BL       InitTimer
    713              InitWFLY_RC();
   \   00000030   0x.... 0x....      BL       InitWFLY_RC
    714              InitMS5611();
   \   00000034   0x.... 0x....      BL       InitMS5611
    715              InitBatteryVoltageMeasurement();
   \   00000038   0x.... 0x....      BL       InitBatteryVoltageMeasurement
    716              InitFlashRom();
   \   0000003C   0x.... 0x....      BL       InitFlashRom
    717              
    718              EnableInterrupts;    
   \   00000040   0xB662             CPSIE    I
    719          }
   \   00000042   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     g_u32ProgramPeriodTimerCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x41200000         DC32     0x41200000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     g_u32DebugPWM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     g_sMS5611DataCopy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x25 0x64          DC8      "%d\t"
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     g_sAK8975CRawData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     g_sMPU6050RawData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     g_sQuadSystemFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x........         DC32     g_i16AccOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     g_i16GyrOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     g_u32WFLY_RC_offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x........         DC32     g_u32WFLY_RC_max_range

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x400EB000         DC32     0x400eb000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x4006C000         DC32     0x4006c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x400EA000         DC32     0x400ea000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x........         DC32     g_sonar_measure_distance_mm

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x42652EE1         DC32     0x42652ee1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x........         DC32     g_u32LostSignalTimerCnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x........         DC32     gc_f32LandingThrottle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   0x........         DC32     g_f32DebugRoll

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   0x........         DC32     g_f32DebugPitch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   0x........         DC32     g_f32DebugYaw

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_24:
   \   00000000   0x........         DC32     g_f32DebugThrottle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_25:
   \   00000000   0x........         DC32     gc_f32MaxRCYawAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_26:
   \   00000000   0x........         DC32     gc_f32MaxRCPitchAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_27:
   \   00000000   0x........         DC32     gc_f32MaxRCRollAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_28:
   \   00000000   0x3DCCCCCD         DC32     0x3dcccccd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_29:
   \   00000000   0xBDCCCCCC         DC32     0xbdcccccc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_30:
   \   00000000   0x........         DC32     ??s_f32LastYawAngle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_31:
   \   00000000   0x........         DC32     gc_f32MaxRCHeight

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_32:
   \   00000000   0x........         DC32     gc_f32RCThrottleDeadZone

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_33:
   \   00000000   0x........         DC32     gc_f32MaxRCThrottle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_34:
   \   00000000   0x........         DC32     g_f32ADNS3080PixelPosition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_35:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_36:
   \   00000000   0x........         DC32     `?<Constant "%d\\t%d\\t%d\\t%d\\t">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_37:
   \   00000000   0x........         DC32     g_f32FiltedAltitude

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_38:
   \   00000000   0x........         DC32     `?<Constant "%d\\t%d\\t%d\\t">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_39:
   \   00000000   0x........         DC32     `?<Constant "%d\\t%d\\t">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_40:
   \   00000000   0x........         DC32     g_i32ADNS3080PixelSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_41:
   \   00000000   0x........         DC32     g_timer_cnt

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d\\t%d\\t%d\\t%d\\t">`:
   \   00000000   0x25 0x64          DC8 "%d\t%d\t%d\t%d\t"
   \              0x09 0x25    
   \              0x64 0x09    
   \              0x25 0x64    
   \              0x09 0x25    
   \              0x64 0x09    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x0A 0x0D          DC8 "\012\015"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H, 0H, 0H
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d\\t%d\\t%d\\t">`:
   \   00000000   0x25 0x64          DC8 "%d\t%d\t%d\t"
   \              0x09 0x25    
   \              0x64 0x09    
   \              0x25 0x64    
   \              0x09 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d\\t%d\\t">`:
   \   00000000   0x25 0x64          DC8 "%d\t%d\t"
   \              0x09 0x25    
   \              0x64 0x09    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x25 0x64          DC8 "%d\t"
   \              0x09 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  InitHW
               8 -> InitADNS3080_SPI
               8 -> InitBatteryVoltageMeasurement
               8 -> InitBuzzer
               8 -> InitCommunicateUart
               8 -> InitDebugUart
               8 -> InitFlashRom
               8 -> InitGPSUart
               8 -> InitHCSR04
               8 -> InitLight
               8 -> InitMPU9150
               8 -> InitMS5611
               8 -> InitSixRotorPWM
               8 -> InitSwitches
               8 -> InitTimer
               8 -> InitWFLY_RC
      288  Test
             272 -> ADNS3080_GetRawData
             272 -> ADNS3080_IntegratePixel
             272 -> ADNS3080_IntergratePositionWithGyrAttitude
             272 -> ADNS3080_RefreshRawData
             272 -> AK8975C_InitRawData
             272 -> AK8975C_RefreshRawData
             272 -> ApplyQuadParam
             272 -> AttitudeInit
             272 -> CheckLastSystemSettingTheSame
             272 -> CtrlCancelModeWithMask
             272 -> CtrlEvent
             272 -> CtrlSetBaseThrottle
             272 -> CtrlSetMode
             272 -> CtrlSetModeWithMask
             272 -> CtrlSetTargetEulerAttitude
             272 -> CtrlSetTargetHeight
             272 -> CtrlSetTargetPosition
             272 -> GetAccGyrOffsetOpe
             272 -> GetAccOffsetOpe
             272 -> GetAttitude
             272 -> GetControlData
             272 -> GetControlParameter
             272 -> GetEulerAttitude
             272 -> GetGyrOffsetOpe
             272 -> GetQuadParamInRam
             272 -> GetSystemSettingOnSwitch
             272 -> InitAltitude
             272 -> InitControl
             272 -> InitQuadParam
             272 -> InitUartQueue
             272 -> InitUartRecvQueue
             272 -> IsUartQueueEmpty
             272 -> MPU6050_GetCalibratedGyr
             272 -> MPU6050_InitRawData
             272 -> MPU6050_RefreshRawData
             272 -> MS5611_RefreshData
             272 -> PutStringUartQueue
             272 -> ReadSwitches
             272 -> RefreshAttitude
             272 -> SaveQuadParamToFlash
             272 -> SaveThisSystemSettingToFlash
             272 -> SendSeveralUartQueueData
             272 -> SetBuzzerMode
             272 -> SetLightsOnOff
             272 -> ToggleLights
             272 -> TriggerBatteryADC
             272 -> TurnOnLights
             272 -> WFLY_RC_GetCH5OnOff
             272 -> WFLY_RC_GetMaxRangeOpe
             272 -> WFLY_RC_GetOffsetOpe
             272 -> WFLY_RC_GetPitchRatio
             272 -> WFLY_RC_GetRollRatio
             272 -> WFLY_RC_GetThrottleRatio
             272 -> WFLY_RC_GetYawRatio
             272 -> __aeabi_cfcmple
             272 -> __aeabi_cfrcmple
             272 -> __aeabi_f2iz
             272 -> __aeabi_fadd
             272 -> __aeabi_fdiv
             272 -> __aeabi_fmul
             272 -> __aeabi_fsub
             288 -> __aeabi_memcpy
             272 -> __aeabi_ui2f
             272 -> delayms
             272 -> miniAHRS_InitUartQueue
             272 -> miniAHRS_IsUartQueueEmpty
             272 -> miniAHRS_PopUartQueue
             272 -> miniAHRS_ReportIMU_Queue
             272 -> miniAHRS_ReportMotion_Queue
             272 -> miniAHRS_SendOneByte
             272 -> quaternion_converQuaternionToYawPitchRoll
             272 -> sprintf
       24  main
              24 -> AK8975C_InitRawData
              24 -> AK8975C_RefreshRawData
              24 -> AttitudeInit
              24 -> GetAccGyrOffsetOpe
              24 -> GetEulerAttitude
              24 -> InitHW
              24 -> MPU6050_InitRawData
              24 -> MPU6050_RefreshRawData
              24 -> MS5611_RefreshData
              24 -> PWMOutOneESC
              24 -> RefreshAttitude
              24 -> Test
              24 -> TriggerBatteryADC
              24 -> __aeabi_f2iz
              24 -> __aeabi_fmul
              24 -> miniAHRS_InitUartQueue
              24 -> miniAHRS_IsUartQueueEmpty
              24 -> miniAHRS_PopUartQueue
              24 -> miniAHRS_ReportIMU_Queue
              24 -> miniAHRS_ReportMotion_Queue
              24 -> miniAHRS_SendOneByte


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%d\t">
       8  ?<Constant "%d\t%d\t">
      12  ?<Constant "%d\t%d\t%d\t">
      16  ?<Constant "%d\t%d\t%d\t%d\t">
       4  ?<Constant "\n\r">
      12  ?<Constant {(0.0F), (0.0F), (0.0F)}>
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_21
       4  ??DataTable1_22
       4  ??DataTable1_23
       4  ??DataTable1_24
       4  ??DataTable1_25
       4  ??DataTable1_26
       4  ??DataTable1_27
       4  ??DataTable1_28
       4  ??DataTable1_29
       4  ??DataTable1_3
       4  ??DataTable1_30
       4  ??DataTable1_31
       4  ??DataTable1_32
       4  ??DataTable1_33
       4  ??DataTable1_34
       4  ??DataTable1_35
       4  ??DataTable1_36
       4  ??DataTable1_37
       4  ??DataTable1_38
       4  ??DataTable1_39
       4  ??DataTable1_4
       4  ??DataTable1_40
       4  ??DataTable1_41
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      68  InitHW
    2628  Test
     458  main
       4  s_f32LastYawAngle

 
     4 bytes in section .bss
    56 bytes in section .rodata
 3 322 bytes in section .text
 
 3 322 bytes of CODE  memory
    56 bytes of CONST memory
     4 bytes of DATA  memory

Errors: none
Warnings: 6
