###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     09/Aug/2014  09:42:38 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\ADNS3080data.c                             #
#    Command line =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\ #
#                    SignalProcess\ADNS3080data.c -D LPLD_K60 -lCN            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ -lB E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\FLASH_MINE\List\ -o E:\ShawnDocuments\IAR_WorkSpa #
#                    ce\LPLD_Quad_V3\iar\FLASH_MINE\Obj\ --no_cse             #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\ #
#                    iar\..\source\app\Control\ -I                            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Others\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\app\Communicate\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\app\Algorithm\ -I E:\ShawnDocuments\IAR_WorkSpace\LPL #
#                    D_Quad_V3\iar\..\source\app\SignalProcess\ -I            #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_ #
#                    V3\iar\..\source\module\anbt_dmp\ -I                     #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\module\eMPL\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\CPU\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Q #
#                    uad_V3\iar\..\source\lib\LPLD\ -I                        #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\LPLD\HW\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_ #
#                    Quad_V3\iar\..\source\lib\LPLD\DEV\ -I                   #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\uCOS-II\Ports\ -I E:\ShawnDocuments\IAR_WorkSpace #
#                    \LPLD_Quad_V3\iar\..\source\lib\uCOS-II\Source\ -I       #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\FatFs\ -I E:\ShawnDocuments\IAR_WorkSpace\LPLD_Qu #
#                    ad_V3\iar\..\source\lib\FatFs\option\ -I                 #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\common\ -I E:\ShawnDocuments\IAR_WorkSpace\LP #
#                    LD_Quad_V3\iar\..\source\lib\USB\driver\ -I              #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\USB\descriptor\ -I E:\ShawnDocuments\IAR_WorkSpac #
#                    e\LPLD_Quad_V3\iar\..\source\lib\USB\class\ -I           #
#                    E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\..\sour #
#                    ce\lib\MyLib\ -On -I "D:\Program Files\IAR               #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\" -D    #
#                    ARM_MATH_CM4                                             #
#    List file    =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\List\ADNS3080data.lst                                #
#    Object file  =  E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\iar\FLASH_M #
#                    INE\Obj\ADNS3080data.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\ShawnDocuments\IAR_WorkSpace\LPLD_Quad_V3\source\app\SignalProcess\ADNS3080data.c
      1          /****************************************************************************** 
      2           *       ADNS3080data.c ----- The code to handle with the data from the ADNS3080          *
      3           *       (c) Copyright 2012 HUST RENESAS LAB,The Department of CSE, HUST       *
      4           *                        All Rights Reserved                                  *
      5           *Filename             :  ADNS3080data.c                                           *
      6           *Programmer(s)        :  Yang Xiang                                           *
      7           *Description          :                                                       *
      8           *Modification History :                                                       *
      9           *01a 2014/7/12 15:03:31                                                       *
     10           ******************************************************************************/
     11          #include "ADNS3080data.h"
     12          

   \                                 In section .bss, align 4
     13          static ADNS3080_RawDataStruct s_sADNS3080_raw_data;
   \                     s_sADNS3080_raw_data:
   \   00000000                      DS8 8
     14          

   \                                 In section .bss, align 4
     15          int32 g_i32ADNS3080PixelSum[2] = {0,0};
   \                     g_i32ADNS3080PixelSum:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     16          float g_f32ADNS3080PixelPosition[2] = {0,0};
   \                     g_f32ADNS3080PixelPosition:
   \   00000000                      DS8 8
     17          

   \                                 In section .rodata, align 4
     18          extern const float gc_f32PixelHeightToDistanceRate = 0.01314103;  // 测试得来 
   \                     gc_f32PixelHeightToDistanceRate:
   \   00000000   0x3C574D7A         DC32 3C574D7AH
     19          

   \                                 In section .text, align 2, keep-with-next
     20          void ADNS3080_RefreshRawData(void)
     21          {
   \                     ADNS3080_RefreshRawData:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     22              uint8 reg_data[7];
     23              
     24              ADNS3080_MotionBurst(reg_data);
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      BL       ADNS3080_MotionBurst
     25              s_sADNS3080_raw_data.motion = reg_data[0];
   \   0000000A   0x....             LDR.N    R0,??DataTable8
   \   0000000C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000010   0x7001             STRB     R1,[R0, #+0]
     26              s_sADNS3080_raw_data.delta_x = -reg_data[2];
   \   00000012   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000016   0x4240             RSBS     R0,R0,#+0
   \   00000018   0x....             LDR.N    R1,??DataTable8
   \   0000001A   0x7048             STRB     R0,[R1, #+1]
     27              s_sADNS3080_raw_data.delta_y = reg_data[1];
   \   0000001C   0x....             LDR.N    R0,??DataTable8
   \   0000001E   0xF99D 0x1001      LDRSB    R1,[SP, #+1]
   \   00000022   0x7081             STRB     R1,[R0, #+2]
     28              s_sADNS3080_raw_data.squal = reg_data[3];
   \   00000024   0x....             LDR.N    R0,??DataTable8
   \   00000026   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   0000002A   0x70C1             STRB     R1,[R0, #+3]
     29              s_sADNS3080_raw_data.shutter = reg_data[4];
   \   0000002C   0x....             LDR.N    R0,??DataTable8
   \   0000002E   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000032   0x8081             STRH     R1,[R0, #+4]
     30              s_sADNS3080_raw_data.shutter = (s_sADNS3080_raw_data.shutter << 8) | reg_data[5];
   \   00000034   0x....             LDR.N    R0,??DataTable8
   \   00000036   0x8880             LDRH     R0,[R0, #+4]
   \   00000038   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   0000003C   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000040   0x....             LDR.N    R1,??DataTable8
   \   00000042   0x8088             STRH     R0,[R1, #+4]
     31              s_sADNS3080_raw_data.maximum_pixel = reg_data[6];
   \   00000044   0x....             LDR.N    R0,??DataTable8
   \   00000046   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   0000004A   0x7181             STRB     R1,[R0, #+6]
     32          }
   \   0000004C   0xBD07             POP      {R0-R2,PC}       ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
     34          ADNS3080_RawDataStruct * ADNS3080_GetRawData(void)
     35          {
     36              return &s_sADNS3080_raw_data;
   \                     ADNS3080_GetRawData:
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x4770             BX       LR               ;; return
     37          }
     38          

   \                                 In section .text, align 2, keep-with-next
     39          void ADNS3080_ImageTest(UART_Type * uartx)
     40          {
   \                     ADNS3080_ImageTest:
   \   00000000   0xF5AD 0x7D62      SUB      SP,SP,#+904
   \   00000004   0x0004             MOVS     R4,R0
     41              uint8 pixel_data[900];
     42          
     43              while(1)
     44              {
     45                  LPLD_UART_PutChar(uartx, 0x5A);
   \                     ??ADNS3080_ImageTest_0:
   \   00000006   0x215A             MOVS     R1,#+90
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       LPLD_UART_PutChar
     46                  ADNS3080_PixelBurst(pixel_data);
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       ADNS3080_PixelBurst
     47                  LPLD_UART_PutCharArr(uartx, (signed char *)pixel_data, 900);
   \   00000014   0xF44F 0x7261      MOV      R2,#+900
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       LPLD_UART_PutCharArr
   \   00000020   0xE7F1             B.N      ??ADNS3080_ImageTest_0
     48              }
     49          }
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void ADNS3080_IntegratePixel(int8 delta_x, int8 delta_y)
     52          {
     53              g_i32ADNS3080PixelSum[0] += delta_x;
   \                     ADNS3080_IntegratePixel:
   \   00000000   0x....             LDR.N    R2,??DataTable8_1
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0xFA42 0xF280      SXTAB    R2,R2,R0
   \   00000008   0x....             LDR.N    R3,??DataTable8_1
   \   0000000A   0x601A             STR      R2,[R3, #+0]
     54              g_i32ADNS3080PixelSum[1] += delta_y;
   \   0000000C   0x....             LDR.N    R2,??DataTable8_1
   \   0000000E   0x6852             LDR      R2,[R2, #+4]
   \   00000010   0xFA42 0xF281      SXTAB    R2,R2,R1
   \   00000014   0x....             LDR.N    R3,??DataTable8_1
   \   00000016   0x605A             STR      R2,[R3, #+4]
     55          }
   \   00000018   0x4770             BX       LR               ;; return
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void ADNS3080_IntegratePosition(int8 delta_x, int8 delta_y, float height)
     58          {
   \                     ADNS3080_IntegratePosition:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     59              g_f32ADNS3080PixelPosition[0] += (delta_x * gc_f32PixelHeightToDistanceRate * height);
   \   00000008   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_i2f
   \   00000010   0x....             LDR.N    R1,??DataTable8_2
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x.... 0x....      BL       __aeabi_fmul
   \   00000018   0x0031             MOVS     R1,R6
   \   0000001A   0x.... 0x....      BL       __aeabi_fmul
   \   0000001E   0x....             LDR.N    R1,??DataTable8_3
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x.... 0x....      BL       __aeabi_fadd
   \   00000026   0x....             LDR.N    R1,??DataTable8_3
   \   00000028   0x6008             STR      R0,[R1, #+0]
     60              g_f32ADNS3080PixelPosition[1] += (delta_y * gc_f32PixelHeightToDistanceRate * height);
   \   0000002A   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   0000002C   0x0028             MOVS     R0,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_i2f
   \   00000032   0x....             LDR.N    R1,??DataTable8_2
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x0031             MOVS     R1,R6
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x....             LDR.N    R1,??DataTable8_3
   \   00000042   0x6849             LDR      R1,[R1, #+4]
   \   00000044   0x.... 0x....      BL       __aeabi_fadd
   \   00000048   0x....             LDR.N    R1,??DataTable8_3
   \   0000004A   0x6048             STR      R0,[R1, #+4]
     61          }
   \   0000004C   0xBD70             POP      {R4-R6,PC}       ;; return
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void ADNS3080_IntergratePositionWithGyrAttitude(int8 delta_x, int8 delta_y, float gyr_x, float gyr_y, float yaw, float height)
     64          {
   \                     ADNS3080_IntergratePositionWithGyrAttitude:
   \   00000000   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0xF8DD 0xB048      LDR      R11,[SP, #+72]
   \   0000000A   0xF8DD 0xA04C      LDR      R10,[SP, #+76]
     65              float x_move = 0;
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
     66              float y_move = 0;
   \   00000012   0xF05F 0x0800      MOVS     R8,#+0
     67              float x_rotate_move = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9003             STR      R0,[SP, #+12]
     68              float y_rotate_move = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9002             STR      R0,[SP, #+8]
     69          
     70              x_move = delta_x * gc_f32PixelHeightToDistanceRate * height;
   \   0000001E   0xF99D 0x0014      LDRSB    R0,[SP, #+20]
   \   00000022   0x.... 0x....      BL       __aeabi_i2f
   \   00000026   0x....             LDR.N    R1,??DataTable8_2
   \   00000028   0x6809             LDR      R1,[R1, #+0]
   \   0000002A   0x.... 0x....      BL       __aeabi_fmul
   \   0000002E   0x4651             MOV      R1,R10
   \   00000030   0x.... 0x....      BL       __aeabi_fmul
   \   00000034   0x4681             MOV      R9,R0
     71              y_move = delta_y * gc_f32PixelHeightToDistanceRate * height;
   \   00000036   0xF99D 0x0018      LDRSB    R0,[SP, #+24]
   \   0000003A   0x.... 0x....      BL       __aeabi_i2f
   \   0000003E   0x....             LDR.N    R1,??DataTable8_2
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
   \   00000046   0x4651             MOV      R1,R10
   \   00000048   0x.... 0x....      BL       __aeabi_fmul
   \   0000004C   0x4680             MOV      R8,R0
     72          
     73              x_rotate_move = (gyr_y) * height * 0.001 * PROGRAM_PERIOD_MS;
   \   0000004E   0x9808             LDR      R0,[SP, #+32]
   \   00000050   0x4651             MOV      R1,R10
   \   00000052   0x.... 0x....      BL       __aeabi_fmul
   \   00000056   0x.... 0x....      BL       __aeabi_f2d
   \   0000005A   0x....             LDR.N    R2,??DataTable8_4  ;; 0xd2f1a9fc
   \   0000005C   0x....             LDR.N    R3,??DataTable8_5  ;; 0x3f50624d
   \   0000005E   0x.... 0x....      BL       __aeabi_dmul
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x....             LDR.N    R3,??DataTable8_6  ;; 0x40100000
   \   00000066   0x.... 0x....      BL       __aeabi_dmul
   \   0000006A   0x.... 0x....      BL       __aeabi_d2f
   \   0000006E   0x9003             STR      R0,[SP, #+12]
     74              y_rotate_move = -(gyr_x) * height * 0.001 * PROGRAM_PERIOD_MS;
   \   00000070   0x9807             LDR      R0,[SP, #+28]
   \   00000072   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   00000076   0x4651             MOV      R1,R10
   \   00000078   0x.... 0x....      BL       __aeabi_fmul
   \   0000007C   0x.... 0x....      BL       __aeabi_f2d
   \   00000080   0x....             LDR.N    R2,??DataTable8_4  ;; 0xd2f1a9fc
   \   00000082   0x....             LDR.N    R3,??DataTable8_5  ;; 0x3f50624d
   \   00000084   0x.... 0x....      BL       __aeabi_dmul
   \   00000088   0x2200             MOVS     R2,#+0
   \   0000008A   0x....             LDR.N    R3,??DataTable8_6  ;; 0x40100000
   \   0000008C   0x.... 0x....      BL       __aeabi_dmul
   \   00000090   0x.... 0x....      BL       __aeabi_d2f
   \   00000094   0x9002             STR      R0,[SP, #+8]
     75          
     76              x_move = x_move - x_rotate_move;
   \   00000096   0x4648             MOV      R0,R9
   \   00000098   0x9903             LDR      R1,[SP, #+12]
   \   0000009A   0x.... 0x....      BL       __aeabi_fsub
   \   0000009E   0x4681             MOV      R9,R0
     77              y_move = y_move - y_rotate_move;
   \   000000A0   0x4640             MOV      R0,R8
   \   000000A2   0x9902             LDR      R1,[SP, #+8]
   \   000000A4   0x.... 0x....      BL       __aeabi_fsub
   \   000000A8   0x4680             MOV      R8,R0
     78          
     79              g_f32ADNS3080PixelPosition[0] += ((x_move * cos(yaw)) - (y_move * sin(yaw)));
   \   000000AA   0x4658             MOV      R0,R11
   \   000000AC   0x.... 0x....      BL       __aeabi_f2d
   \   000000B0   0x.... 0x....      BL       cos
   \   000000B4   0x0006             MOVS     R6,R0
   \   000000B6   0x000F             MOVS     R7,R1
   \   000000B8   0x4658             MOV      R0,R11
   \   000000BA   0x.... 0x....      BL       __aeabi_f2d
   \   000000BE   0x.... 0x....      BL       sin
   \   000000C2   0x0004             MOVS     R4,R0
   \   000000C4   0x000D             MOVS     R5,R1
   \   000000C6   0x....             LDR.N    R0,??DataTable8_3
   \   000000C8   0x6800             LDR      R0,[R0, #+0]
   \   000000CA   0x.... 0x....      BL       __aeabi_f2d
   \   000000CE   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000D2   0x4648             MOV      R0,R9
   \   000000D4   0x.... 0x....      BL       __aeabi_f2d
   \   000000D8   0x0032             MOVS     R2,R6
   \   000000DA   0x003B             MOVS     R3,R7
   \   000000DC   0x.... 0x....      BL       __aeabi_dmul
   \   000000E0   0x0006             MOVS     R6,R0
   \   000000E2   0x000F             MOVS     R7,R1
   \   000000E4   0x4640             MOV      R0,R8
   \   000000E6   0x.... 0x....      BL       __aeabi_f2d
   \   000000EA   0x0022             MOVS     R2,R4
   \   000000EC   0x002B             MOVS     R3,R5
   \   000000EE   0x.... 0x....      BL       __aeabi_dmul
   \   000000F2   0x0002             MOVS     R2,R0
   \   000000F4   0x000B             MOVS     R3,R1
   \   000000F6   0x0030             MOVS     R0,R6
   \   000000F8   0x0039             MOVS     R1,R7
   \   000000FA   0x.... 0x....      BL       __aeabi_dsub
   \   000000FE   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000102   0x.... 0x....      BL       __aeabi_dadd
   \   00000106   0x.... 0x....      BL       __aeabi_d2f
   \   0000010A   0x....             LDR.N    R1,??DataTable8_3
   \   0000010C   0x6008             STR      R0,[R1, #+0]
     80              g_f32ADNS3080PixelPosition[1] += ((x_move * sin(yaw)) + (y_move * cos(yaw)));
   \   0000010E   0x4658             MOV      R0,R11
   \   00000110   0x.... 0x....      BL       __aeabi_f2d
   \   00000114   0x.... 0x....      BL       sin
   \   00000118   0x0006             MOVS     R6,R0
   \   0000011A   0x000F             MOVS     R7,R1
   \   0000011C   0x4658             MOV      R0,R11
   \   0000011E   0x.... 0x....      BL       __aeabi_f2d
   \   00000122   0x.... 0x....      BL       cos
   \   00000126   0x0004             MOVS     R4,R0
   \   00000128   0x000D             MOVS     R5,R1
   \   0000012A   0x....             LDR.N    R0,??DataTable8_3
   \   0000012C   0x6840             LDR      R0,[R0, #+4]
   \   0000012E   0x.... 0x....      BL       __aeabi_f2d
   \   00000132   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000136   0x4648             MOV      R0,R9
   \   00000138   0x.... 0x....      BL       __aeabi_f2d
   \   0000013C   0x0032             MOVS     R2,R6
   \   0000013E   0x003B             MOVS     R3,R7
   \   00000140   0x.... 0x....      BL       __aeabi_dmul
   \   00000144   0x0006             MOVS     R6,R0
   \   00000146   0x000F             MOVS     R7,R1
   \   00000148   0x4640             MOV      R0,R8
   \   0000014A   0x.... 0x....      BL       __aeabi_f2d
   \   0000014E   0x0022             MOVS     R2,R4
   \   00000150   0x002B             MOVS     R3,R5
   \   00000152   0x.... 0x....      BL       __aeabi_dmul
   \   00000156   0x0032             MOVS     R2,R6
   \   00000158   0x003B             MOVS     R3,R7
   \   0000015A   0x.... 0x....      BL       __aeabi_dadd
   \   0000015E   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   00000162   0x.... 0x....      BL       __aeabi_dadd
   \   00000166   0x.... 0x....      BL       __aeabi_d2f
   \   0000016A   0x....             LDR.N    R1,??DataTable8_3
   \   0000016C   0x6048             STR      R0,[R1, #+4]
     81          }
   \   0000016E   0xB009             ADD      SP,SP,#+36
   \   00000170   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void ADNS3080_ResetIntegratedPixel(void)
     84          {
     85              int i = 0;
   \                     ADNS3080_ResetIntegratedPixel:
   \   00000000   0x2000             MOVS     R0,#+0
     86              for(i = 0; i < 2; i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \                     ??ADNS3080_ResetIntegratedPixel_0:
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xDA05             BGE.N    ??ADNS3080_ResetIntegratedPixel_1
     87              {
     88                  g_i32ADNS3080PixelSum[i] = 0;
   \   0000000A   0x....             LDR.N    R1,??DataTable8_1
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
     89              }
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0xE7F7             B.N      ??ADNS3080_ResetIntegratedPixel_0
     90          }
   \                     ??ADNS3080_ResetIntegratedPixel_1:
   \   00000016   0x4770             BX       LR               ;; return
     91          

   \                                 In section .text, align 2, keep-with-next
     92          void ADNS3080_ResetIntergratedPosition(void)
     93          {
     94              int i = 0; 
   \                     ADNS3080_ResetIntergratedPosition:
   \   00000000   0x2000             MOVS     R0,#+0
     95              for(i = 0; i < 2; i++)
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x0008             MOVS     R0,R1
   \                     ??ADNS3080_ResetIntergratedPosition_0:
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xDA05             BGE.N    ??ADNS3080_ResetIntergratedPosition_1
     96              {
     97                  g_f32ADNS3080PixelPosition[i] = 0;
   \   0000000A   0x....             LDR.N    R1,??DataTable8_3
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
     98              }
   \   00000012   0x1C40             ADDS     R0,R0,#+1
   \   00000014   0xE7F7             B.N      ??ADNS3080_ResetIntergratedPosition_0
     99          }
   \                     ??ADNS3080_ResetIntergratedPosition_1:
   \   00000016   0x4770             BX       LR               ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          int32 * ADNS3080_GetIntegratedPixel(void)
    102          {
    103              return g_i32ADNS3080PixelSum;
   \                     ADNS3080_GetIntegratedPixel:
   \   00000000   0x....             LDR.N    R0,??DataTable8_1
   \   00000002   0x4770             BX       LR               ;; return
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          float * ADNS3080_GetIntegratedPosition(void)
    107          {
    108              return g_f32ADNS3080PixelPosition;
   \                     ADNS3080_GetIntegratedPosition:
   \   00000000   0x....             LDR.N    R0,??DataTable8_3
   \   00000002   0x4770             BX       LR               ;; return
    109          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     s_sADNS3080_raw_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     g_i32ADNS3080PixelSum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     gc_f32PixelHeightToDistanceRate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     g_f32ADNS3080PixelPosition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0xD2F1A9FC         DC32     0xd2f1a9fc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x3F50624D         DC32     0x3f50624d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x40100000         DC32     0x40100000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  ADNS3080_GetIntegratedPixel
        0  ADNS3080_GetIntegratedPosition
        0  ADNS3080_GetRawData
      904  ADNS3080_ImageTest
             904 -> ADNS3080_PixelBurst
             904 -> LPLD_UART_PutChar
             904 -> LPLD_UART_PutCharArr
        0  ADNS3080_IntegratePixel
       16  ADNS3080_IntegratePosition
              16 -> __aeabi_fadd
              16 -> __aeabi_fmul
              16 -> __aeabi_i2f
       72  ADNS3080_IntergratePositionWithGyrAttitude
              72 -> __aeabi_d2f
              72 -> __aeabi_dadd
              72 -> __aeabi_dmul
              72 -> __aeabi_dsub
              72 -> __aeabi_f2d
              72 -> __aeabi_fmul
              72 -> __aeabi_fsub
              72 -> __aeabi_i2f
              72 -> cos
              72 -> sin
       16  ADNS3080_RefreshRawData
              16 -> ADNS3080_MotionBurst
        0  ADNS3080_ResetIntegratedPixel
        0  ADNS3080_ResetIntergratedPosition


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ADNS3080_GetIntegratedPixel
       4  ADNS3080_GetIntegratedPosition
       4  ADNS3080_GetRawData
      34  ADNS3080_ImageTest
      26  ADNS3080_IntegratePixel
      78  ADNS3080_IntegratePosition
     372  ADNS3080_IntergratePositionWithGyrAttitude
      78  ADNS3080_RefreshRawData
      24  ADNS3080_ResetIntegratedPixel
      24  ADNS3080_ResetIntergratedPosition
       8  g_f32ADNS3080PixelPosition
       8  g_i32ADNS3080PixelSum
       4  gc_f32PixelHeightToDistanceRate
       8  s_sADNS3080_raw_data

 
  24 bytes in section .bss
   4 bytes in section .rodata
 676 bytes in section .text
 
 676 bytes of CODE  memory
   4 bytes of CONST memory
  24 bytes of DATA  memory

Errors: none
Warnings: none
